var Shumway;
(function (Shumway) {
    var startTag = /^<([-A-Za-z0-9_]+)((?:\s+[-A-Za-z0-9_]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/, endTag = /^<\/([-A-Za-z0-9_]+)[^>]*>/, attr = /([-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
    var empty = makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed");
    var block = makeMap("address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul");
    var inline = makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var");
    var closeSelf = makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");
    var fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");
    var special = makeMap("script,style");
    function HTMLParser(html, handler) {
        var index, chars, match, stack = [], last = html;
        function top() {
            return this[this.length - 1];
        }
        while (html) {
            chars = true;
            if (!top() || !special[top()]) {
                if (html.indexOf("<!--") == 0) {
                    index = html.indexOf("-->");
                    if (index >= 0) {
                        if (handler.comment)
                            handler.comment(html.substring(4, index));
                        html = html.substring(index + 3);
                        chars = false;
                    }
                }
                else if (html.indexOf("</") == 0) {
                    match = html.match(endTag);
                    if (match) {
                        html = html.substring(match[0].length);
                        match[0].replace(endTag, parseEndTag);
                        chars = false;
                    }
                }
                else if (html.indexOf("<") == 0) {
                    match = html.match(startTag);
                    if (match) {
                        html = html.substring(match[0].length);
                        match[0].replace(startTag, parseStartTag);
                        chars = false;
                    }
                }
                if (chars) {
                    index = html.indexOf("<");
                    var text = index < 0 ? html : html.substring(0, index);
                    html = index < 0 ? "" : html.substring(index);
                    if (handler.chars)
                        handler.chars(text);
                }
            }
            else {
                html = html.replace(new RegExp("(.*)<\/" + top() + "[^>]*>"), function (all, text) {
                    text = text.replace(/<!--(.*?)-->/g, "$1").replace(/<!\[CDATA\[(.*?)]]>/g, "$1");
                    if (handler.chars)
                        handler.chars(text);
                    return "";
                });
                parseEndTag("", top());
            }
            if (html == last)
                throw "Parse Error: " + html;
            last = html;
        }
        parseEndTag();
        function parseStartTag(tag, tagName, rest, unary) {
            tagName = tagName.toLowerCase();
            if (block[tagName]) {
                while (top() && inline[top()]) {
                    parseEndTag("", top());
                }
            }
            if (closeSelf[tagName] && top() == tagName) {
                parseEndTag("", tagName);
            }
            unary = empty[tagName] || !!unary;
            if (!unary)
                stack.push(tagName);
            if (handler.start) {
                var attrs = Object.create(null);
                rest.replace(attr, function (match, name) {
                    name = name.toLowerCase();
                    var value = arguments[2] ? arguments[2] : arguments[3] ? arguments[3] : arguments[4] ? arguments[4] : fillAttrs[name] ? name : "";
                    attrs[name] = value;
                    return match;
                });
                if (handler.start)
                    handler.start(tagName, attrs, !!unary);
            }
        }
        function parseEndTag(tag, tagName) {
            if (!tagName)
                var pos = 0;
            else
                for (var pos = stack.length - 1; pos >= 0; pos--)
                    if (stack[pos] == tagName)
                        break;
            if (pos >= 0) {
                for (var i = stack.length - 1; i >= pos; i--)
                    if (handler.end)
                        handler.end(stack[i]);
                stack.length = pos;
            }
        }
    }
    Shumway.HTMLParser = HTMLParser;
    ;
    function makeMap(str) {
        var obj = {}, items = str.split(",");
        for (var i = 0; i < items.length; i++)
            obj[items[i]] = true;
        return obj;
    }
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var notImplemented = Shumway.Debug.notImplemented;
    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
    var Bounds = Shumway.Bounds;
    var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
    var ColorUtilities = Shumway.ColorUtilities;
    var flash = Shumway.AVM2.AS.flash;
    var altTieBreakRound = Shumway.NumberUtilities.altTieBreakRound;
    (function (TextContentFlags) {
        TextContentFlags[TextContentFlags["None"] = 0x0000] = "None";
        TextContentFlags[TextContentFlags["DirtyBounds"] = 0x0001] = "DirtyBounds";
        TextContentFlags[TextContentFlags["DirtyContent"] = 0x0002] = "DirtyContent";
        TextContentFlags[TextContentFlags["DirtyStyle"] = 0x0004] = "DirtyStyle";
        TextContentFlags[TextContentFlags["DirtyFlow"] = 0x0008] = "DirtyFlow";
        TextContentFlags[TextContentFlags["Dirty"] = TextContentFlags.DirtyBounds | TextContentFlags.DirtyContent | TextContentFlags.DirtyStyle | TextContentFlags.DirtyFlow] = "Dirty";
    })(Shumway.TextContentFlags || (Shumway.TextContentFlags = {}));
    var TextContentFlags = Shumway.TextContentFlags;
    var _decodeHTMLMap = {
        lt: '<',
        gt: '>',
        amp: '&',
        quot: '"',
        apos: "'",
        nbsp: "\u00A0"
    };
    function decodeHTML(s) {
        var r = "";
        for (var i = 0; i < s.length; i++) {
            var c = s.charAt(i);
            if (c !== '&') {
                r += c;
            }
            else {
                var j = Shumway.StringUtilities.indexOfAny(s, ['&', ';'], i + 1);
                if (j > 0) {
                    var v = s.substring(i + 1, j);
                    if (v.length > 1 && v.charAt(0) === "#") {
                        var n = 0;
                        if (v.length > 2 && v.charAt(1) === "x") {
                            n = parseInt(v.substring(1));
                        }
                        else {
                            n = parseInt(v.substring(2), 16);
                        }
                        r += String.fromCharCode(n);
                    }
                    else {
                        if (_decodeHTMLMap[v] !== undefined) {
                            r += _decodeHTMLMap[v];
                        }
                        else {
                            Shumway.Debug.unexpected(v);
                        }
                    }
                    i = j;
                }
                else {
                    for (var k in _decodeHTMLMap) {
                        if (s.indexOf(k, i + 1) === i + 1) {
                            r += _decodeHTMLMap[k];
                            i += k.length;
                            break;
                        }
                    }
                }
            }
        }
        return r;
    }
    var TextContent = (function () {
        function TextContent(defaultTextFormat) {
            this._id = flash.display.DisplayObject.getNextSyncID();
            this._bounds = new Bounds(0, 0, 0, 0);
            this._plainText = '';
            this._backgroundColor = 0;
            this._borderColor = 0;
            this._autoSize = 0;
            this._wordWrap = false;
            this._scrollV = 1;
            this._scrollH = 0;
            this.flags = 0 /* None */;
            this.defaultTextFormat = defaultTextFormat || new flash.text.TextFormat();
            this.textRuns = [];
            this.textRunData = new DataBuffer();
            this.matrix = null;
            this.coords = null;
        }
        TextContent.prototype.parseHtml = function (htmlText, styleSheet, multiline) {
            var plainText = '';
            var textRuns = this.textRuns;
            textRuns.length = 0;
            var beginIndex = 0;
            var endIndex = 0;
            var textFormat = this.defaultTextFormat.clone();
            var prevTextRun = null;
            var stack = [];
            var handler;
            Shumway.HTMLParser(htmlText, handler = {
                chars: function (text) {
                    text = decodeHTML(text);
                    plainText += text;
                    endIndex += text.length;
                    if (endIndex - beginIndex) {
                        if (prevTextRun && prevTextRun.textFormat.equals(textFormat)) {
                            prevTextRun.endIndex = endIndex;
                        }
                        else {
                            prevTextRun = new flash.text.TextRun(beginIndex, endIndex, textFormat);
                            textRuns.push(prevTextRun);
                        }
                        beginIndex = endIndex;
                    }
                },
                start: function (tagName, attributes) {
                    var hasStyle = false;
                    if (styleSheet) {
                        hasStyle = styleSheet.hasStyle(tagName);
                        if (hasStyle) {
                            stack.push(textFormat);
                            textFormat = textFormat.clone();
                            styleSheet.applyStyle(textFormat, tagName);
                        }
                    }
                    switch (tagName) {
                        case 'a':
                            stack.push(textFormat);
                            somewhatImplemented('<a/>');
                            var target = attributes.target || textFormat.target;
                            var url = attributes.url || textFormat.url;
                            if (target !== textFormat.target || url !== textFormat.url) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.target = target;
                                textFormat.url = url;
                            }
                            break;
                        case 'b':
                            stack.push(textFormat);
                            if (!textFormat.bold) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.bold = true;
                            }
                            break;
                        case 'font':
                            stack.push(textFormat);
                            var color = ColorUtilities.isValidHexColor(attributes.color) ? ColorUtilities.hexToRGB(attributes.color) : textFormat.color;
                            var font = attributes.face || textFormat.font;
                            var size = isNaN(attributes.size) ? textFormat.size : +attributes.size;
                            if (color !== textFormat.color || font !== textFormat.font || size !== textFormat.size) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.color = color;
                                textFormat.font = font;
                                textFormat.size = size;
                            }
                            break;
                        case 'img':
                            notImplemented('<img/>');
                            break;
                        case 'i':
                            stack.push(textFormat);
                            if (!textFormat.italic) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.italic = true;
                            }
                            break;
                        case 'li':
                            stack.push(textFormat);
                            if (!textFormat.bullet) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.bullet = true;
                            }
                            if (plainText[plainText.length - 1] === '\r') {
                                break;
                            }
                        case 'br':
                            if (multiline) {
                                handler.chars('\r');
                            }
                            break;
                        case 'span':
                        case 'p':
                            var hasClassStyle = false;
                            stack.push(textFormat);
                            if (styleSheet && attributes.class) {
                                var cssClass = '.' + attributes.class;
                                hasClassStyle = styleSheet.hasStyle(cssClass);
                                if (hasClassStyle) {
                                    if (!hasStyle) {
                                        textFormat = textFormat.clone();
                                    }
                                    styleSheet.applyStyle(textFormat, cssClass);
                                }
                            }
                            if (tagName === 'span') {
                                break;
                            }
                            var align = attributes.align;
                            if (flash.text.TextFormatAlign.toNumber(align) > -1 && align !== textFormat.align) {
                                if (!(hasStyle || hasClassStyle)) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.align = align;
                            }
                            break;
                        case 'textformat':
                            stack.push(textFormat);
                            var blockIndent = isNaN(attributes.blockindent) ? textFormat.blockIndent : +attributes.blockindent;
                            var indent = isNaN(attributes.indent) ? textFormat.indent : +attributes.indent;
                            var leading = isNaN(attributes.leading) ? textFormat.leading : +attributes.leading;
                            var leftMargin = isNaN(attributes.leftmargin) ? textFormat.leftMargin : +attributes.leftmargin;
                            var rightMargin = isNaN(attributes.rightmargin) ? textFormat.rightMargin : +attributes.rightmargin;
                            if (blockIndent !== textFormat.blockIndent || indent !== textFormat.indent || leading !== textFormat.leading || leftMargin !== textFormat.leftMargin || rightMargin !== textFormat.rightMargin) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.blockIndent = blockIndent;
                                textFormat.indent = indent;
                                textFormat.leading = leading;
                                textFormat.leftMargin = leftMargin;
                                textFormat.rightMargin = rightMargin;
                            }
                            break;
                        case 'u':
                            stack.push(textFormat);
                            if (!textFormat.underline) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.underline = true;
                            }
                            break;
                    }
                },
                end: function (tagName) {
                    switch (tagName) {
                        case 'li':
                        case 'p':
                            if (multiline) {
                                handler.chars('\r');
                            }
                        case 'a':
                        case 'b':
                        case 'font':
                        case 'i':
                        case 'textformat':
                        case 'u':
                            textFormat = stack.pop();
                            if (styleSheet && styleSheet.hasStyle(tagName)) {
                                textFormat = stack.pop();
                            }
                    }
                }
            });
            this._plainText = plainText;
            this._serializeTextRuns();
        };
        Object.defineProperty(TextContent.prototype, "plainText", {
            get: function () {
                return this._plainText;
            },
            set: function (value) {
                this._plainText = value;
                this.textRuns.length = 0;
                if (value) {
                    var textRun = new flash.text.TextRun(0, value.length, this.defaultTextFormat);
                    this.textRuns[0] = textRun;
                }
                this._serializeTextRuns();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "bounds", {
            get: function () {
                return this._bounds;
            },
            set: function (bounds) {
                this._bounds.copyFrom(bounds);
                this.flags |= 1 /* DirtyBounds */;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "autoSize", {
            get: function () {
                return this._autoSize;
            },
            set: function (value) {
                if (value === this._autoSize) {
                    return;
                }
                this._autoSize = value;
                if (this._plainText) {
                    this.flags |= 8 /* DirtyFlow */;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "wordWrap", {
            get: function () {
                return this._wordWrap;
            },
            set: function (value) {
                if (value === this._wordWrap) {
                    return;
                }
                this._wordWrap = value;
                if (this._plainText) {
                    this.flags |= 8 /* DirtyFlow */;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "scrollV", {
            get: function () {
                return this._scrollV;
            },
            set: function (value) {
                if (value === this._scrollV) {
                    return;
                }
                this._scrollV = value;
                if (this._plainText) {
                    this.flags |= 8 /* DirtyFlow */;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "scrollH", {
            get: function () {
                return this._scrollH;
            },
            set: function (value) {
                if (value === this._scrollH) {
                    return;
                }
                this._scrollH = value;
                if (this._plainText) {
                    this.flags |= 8 /* DirtyFlow */;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "backgroundColor", {
            get: function () {
                return this._backgroundColor;
            },
            set: function (value) {
                if (value === this._backgroundColor) {
                    return;
                }
                this._backgroundColor = value;
                this.flags |= 4 /* DirtyStyle */;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "borderColor", {
            get: function () {
                return this._borderColor;
            },
            set: function (value) {
                if (value === this._borderColor) {
                    return;
                }
                this._borderColor = value;
                this.flags |= 4 /* DirtyStyle */;
            },
            enumerable: true,
            configurable: true
        });
        TextContent.prototype._serializeTextRuns = function () {
            var textRuns = this.textRuns;
            this.textRunData.clear();
            for (var i = 0; i < textRuns.length; i++) {
                this._writeTextRun(textRuns[i]);
            }
            this.flags |= 2 /* DirtyContent */;
        };
        TextContent.prototype._writeTextRun = function (textRun) {
            var textRunData = this.textRunData;
            textRunData.writeInt(textRun.beginIndex);
            textRunData.writeInt(textRun.endIndex);
            var textFormat = textRun.textFormat;
            var size = +textFormat.size;
            textRunData.writeInt(size);
            var font = flash.text.Font.getByNameAndStyle(textFormat.font, textFormat.style) || flash.text.Font.getDefaultFont();
            if (font.fontType === flash.text.FontType.EMBEDDED) {
                textRunData.writeUTF('swffont' + font._id);
            }
            else {
                textRunData.writeUTF(font._fontFamily);
            }
            textRunData.writeInt(altTieBreakRound(font.ascent * size, true));
            textRunData.writeInt(altTieBreakRound(font.descent * size, false));
            textRunData.writeInt(textFormat.leading === null ? font.leading * size : +textFormat.leading);
            var bold = false;
            var italic = false;
            if (font.fontType === flash.text.FontType.DEVICE) {
                if (textFormat.bold === null) {
                    bold = font.fontStyle === flash.text.FontStyle.BOLD || font.fontType === flash.text.FontStyle.BOLD_ITALIC;
                }
                else {
                    bold = !!textFormat.bold;
                }
                if (textFormat.italic === null) {
                    italic = font.fontStyle === flash.text.FontStyle.ITALIC || font.fontType === flash.text.FontStyle.BOLD_ITALIC;
                }
                else {
                    italic = !!textFormat.italic;
                }
            }
            textRunData.writeBoolean(bold);
            textRunData.writeBoolean(italic);
            textRunData.writeInt(+textFormat.color);
            textRunData.writeInt(flash.text.TextFormatAlign.toNumber(textFormat.align));
            textRunData.writeBoolean(!!textFormat.bullet);
            textRunData.writeInt(+textFormat.indent);
            textRunData.writeInt(+textFormat.kerning);
            textRunData.writeInt(+textFormat.leftMargin);
            textRunData.writeInt(+textFormat.letterSpacing);
            textRunData.writeInt(+textFormat.rightMargin);
            textRunData.writeBoolean(!!textFormat.underline);
        };
        TextContent.prototype.appendText = function (newText, format) {
            if (!format) {
                format = this.defaultTextFormat;
            }
            var plainText = this._plainText;
            var newRun = new flash.text.TextRun(plainText.length, plainText.length + newText.length, format);
            this._plainText = plainText + newText;
            this.textRuns.push(newRun);
            this._writeTextRun(newRun);
        };
        TextContent.prototype.prependText = function (newText, format) {
            if (!format) {
                format = this.defaultTextFormat;
            }
            var plainText = this._plainText;
            this._plainText = newText + plainText;
            var textRuns = this.textRuns;
            var shift = newText.length;
            for (var i = 0; i < textRuns.length; i++) {
                var run = textRuns[i];
                run.beginIndex += shift;
                run.endIndex += shift;
            }
            textRuns.unshift(new flash.text.TextRun(0, shift, format));
            this._serializeTextRuns();
        };
        TextContent.prototype.replaceText = function (beginIndex, endIndex, newText, format) {
            if (endIndex < beginIndex || !newText) {
                return;
            }
            if (endIndex === 0) {
                this.prependText(newText, format);
                return;
            }
            var plainText = this._plainText;
            if (beginIndex >= plainText.length) {
                this.appendText(newText, format);
                return;
            }
            var defaultTextFormat = this.defaultTextFormat;
            var newFormat = defaultTextFormat;
            if (format) {
                newFormat = newFormat.clone();
                newFormat.merge(format);
            }
            if (beginIndex <= 0 && endIndex >= plainText.length) {
                if (format) {
                    this.defaultTextFormat = newFormat;
                    this.plainText = newText;
                    this.defaultTextFormat = defaultTextFormat;
                }
                else {
                    this.plainText = newText;
                }
                return;
            }
            var textRuns = this.textRuns;
            var newTextRuns = [];
            var newEndIndex = beginIndex + newText.length;
            var shift = newEndIndex - endIndex;
            for (var i = 0; i < textRuns.length; i++) {
                var run = textRuns[i];
                if (beginIndex < run.endIndex) {
                    if (beginIndex <= run.beginIndex && newEndIndex >= run.endIndex) {
                        continue;
                    }
                    var containsBeginIndex = run.containsIndex(beginIndex);
                    var containsEndIndex = run.containsIndex(endIndex);
                    if (containsBeginIndex && containsEndIndex) {
                        if (format) {
                            var clone = run.clone();
                            clone.endIndex = beginIndex;
                            newTextRuns.push(clone);
                            i--;
                            run.beginIndex = beginIndex + 1;
                            continue;
                        }
                    }
                    else if (containsBeginIndex) {
                        run.endIndex = beginIndex;
                    }
                    else if (containsEndIndex) {
                        if (format) {
                            newTextRuns.push(new flash.text.TextRun(beginIndex, newEndIndex, newFormat));
                            run.beginIndex = newEndIndex;
                        }
                        else {
                            run.beginIndex = beginIndex;
                            run.endIndex += shift;
                        }
                    }
                    else {
                        run.beginIndex += shift;
                        run.endIndex += shift;
                    }
                }
                newTextRuns.push(run);
            }
            this._plainText = plainText.substring(0, beginIndex) + newText + plainText.substring(endIndex);
            this.textRuns = newTextRuns;
            this._serializeTextRuns();
        };
        return TextContent;
    })();
    Shumway.TextContent = TextContent;
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var OptionSet = Shumway.Options.OptionSet;
            var shumwayOptions = Shumway.Settings.shumwayOptions;
            AS.flashOptions = shumwayOptions.register(new OptionSet("Flash Options"));
            AS.traceEventsOption = AS.flashOptions.register(new Shumway.Options.Option("te", "Trace Events", "boolean", false, "Trace dispatching of events."));
            AS.traceLoaderOption = AS.flashOptions.register(new Shumway.Options.Option("tp", "Trace Loader", "boolean", false, "Trace loader execution."));
            AS.disableAudioOption = AS.flashOptions.register(new Shumway.Options.Option("da", "Disable Audio", "boolean", false, "Disables audio."));
            AS.webAudioOption = AS.flashOptions.register(new Shumway.Options.Option(null, "Use WebAudio for Sound", "boolean", false, "Enables WebAudio API for MovieClip sound stream. (MP3 format is an exception)"));
            AS.webAudioMP3Option = AS.flashOptions.register(new Shumway.Options.Option(null, "Use MP3 decoding to WebAudio", "boolean", false, "Enables WebAudio API and software MP3 decoding and disables any AUDIO tag usage for MP3 format"));
            AS.mediaSourceOption = AS.flashOptions.register(new Shumway.Options.Option(null, "Use Media Source for Video", "boolean", false, "Enables Media Source Extension API for NetStream."));
            AS.mediaSourceMP3Option = AS.flashOptions.register(new Shumway.Options.Option(null, "Use Media Source for MP3", "boolean", true, "Enables Media Source Extension API for MP3 streams."));
            AS.flvOption = AS.flashOptions.register(new Shumway.Options.Option(null, "FLV support.", "string", "unsupported", "Defines how to deal with FLV streams."));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var Timeline;
    (function (Timeline) {
        var isInteger = Shumway.isInteger;
        var assert = Shumway.Debug.assert;
        var warning = Shumway.Debug.warning;
        var Bounds = Shumway.Bounds;
        var flash = Shumway.AVM2.AS.flash;
        var Symbol = (function () {
            function Symbol(data, symbolDefaultClass) {
                release || assert(isInteger(data.id));
                this.data = data;
                if (data.className) {
                    var appDomain = Shumway.AVM2.Runtime.AVM2.instance.applicationDomain;
                    try {
                        var symbolClass = appDomain.getClass(data.className);
                        this.symbolClass = symbolClass;
                    }
                    catch (e) {
                        warning("Symbol " + data.id + " bound to non-existing class " + data.className);
                        this.symbolClass = symbolDefaultClass;
                    }
                }
                else {
                    this.symbolClass = symbolDefaultClass;
                }
                this.isAVM1Object = false;
            }
            Object.defineProperty(Symbol.prototype, "id", {
                get: function () {
                    return this.data.id;
                },
                enumerable: true,
                configurable: true
            });
            return Symbol;
        })();
        Timeline.Symbol = Symbol;
        var DisplaySymbol = (function (_super) {
            __extends(DisplaySymbol, _super);
            function DisplaySymbol(data, symbolClass, dynamic) {
                _super.call(this, data, symbolClass);
                this.dynamic = dynamic;
            }
            DisplaySymbol.prototype._setBoundsFromData = function (data) {
                this.fillBounds = data.fillBounds ? Bounds.FromUntyped(data.fillBounds) : null;
                this.lineBounds = data.lineBounds ? Bounds.FromUntyped(data.lineBounds) : null;
                if (!this.lineBounds && this.fillBounds) {
                    this.lineBounds = this.fillBounds.clone();
                }
            };
            return DisplaySymbol;
        })(Symbol);
        Timeline.DisplaySymbol = DisplaySymbol;
        var BinarySymbol = (function (_super) {
            __extends(BinarySymbol, _super);
            function BinarySymbol(data) {
                _super.call(this, data, flash.utils.ByteArray);
            }
            BinarySymbol.FromData = function (data) {
                var symbol = new BinarySymbol(data);
                symbol.buffer = data.data;
                symbol.byteLength = data.data.byteLength;
                return symbol;
            };
            return BinarySymbol;
        })(Symbol);
        Timeline.BinarySymbol = BinarySymbol;
        var SoundStart = (function () {
            function SoundStart(soundId, soundInfo) {
                this.soundId = soundId;
                this.soundInfo = soundInfo;
            }
            return SoundStart;
        })();
        Timeline.SoundStart = SoundStart;
    })(Timeline = Shumway.Timeline || (Shumway.Timeline = {}));
})(Shumway || (Shumway = {}));
var RtmpJs;
(function (RtmpJs) {
    var Browser;
    (function (Browser) {
        var ShumwayComRtmpSocket = (function () {
            function ShumwayComRtmpSocket(host, port, params) {
                this._socket = ShumwayCom.createRtmpSocket({ host: host, port: port, ssl: params.useSecureTransport });
            }
            Object.defineProperty(ShumwayComRtmpSocket, "isAvailable", {
                get: function () {
                    return !!(typeof ShumwayCom !== 'undefined' && ShumwayCom.createRtmpSocket);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpSocket.prototype, "onopen", {
                get: function () {
                    return this._onopen;
                },
                set: function (callback) {
                    this._socket.setOpenCallback(this._onopen = callback);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpSocket.prototype, "ondata", {
                get: function () {
                    return this._ondata;
                },
                set: function (callback) {
                    this._socket.setDataCallback(this._ondata = callback);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpSocket.prototype, "ondrain", {
                get: function () {
                    return this._ondrain;
                },
                set: function (callback) {
                    this._socket.setDrainCallback(this._ondrain = callback);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpSocket.prototype, "onerror", {
                get: function () {
                    return this._onerror;
                },
                set: function (callback) {
                    this._socket.setErrorCallback(this._onerror = callback);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpSocket.prototype, "onclose", {
                get: function () {
                    return this._onclose;
                },
                set: function (callback) {
                    this._socket.setCloseCallback(this._onclose = callback);
                },
                enumerable: true,
                configurable: true
            });
            ShumwayComRtmpSocket.prototype.send = function (buffer, offset, count) {
                return this._socket.send(buffer, offset, count);
            };
            ShumwayComRtmpSocket.prototype.close = function () {
                this._socket.close();
            };
            return ShumwayComRtmpSocket;
        })();
        Browser.ShumwayComRtmpSocket = ShumwayComRtmpSocket;
        var ShumwayComRtmpXHR = (function () {
            function ShumwayComRtmpXHR() {
                this._xhr = ShumwayCom.createRtmpXHR();
            }
            Object.defineProperty(ShumwayComRtmpXHR, "isAvailable", {
                get: function () {
                    return !!(typeof ShumwayCom !== 'undefined' && ShumwayCom.createRtmpXHR);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpXHR.prototype, "status", {
                get: function () {
                    return this._xhr.status;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpXHR.prototype, "response", {
                get: function () {
                    return this._xhr.response;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpXHR.prototype, "responseType", {
                get: function () {
                    return this._xhr.responseType;
                },
                set: function (type) {
                    this._xhr.responseType = type;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpXHR.prototype, "onload", {
                get: function () {
                    return this._onload;
                },
                set: function (callback) {
                    this._xhr.setLoadCallback(this._onload = callback);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ShumwayComRtmpXHR.prototype, "onerror", {
                get: function () {
                    return this._onload;
                },
                set: function (callback) {
                    this._xhr.setErrorCallback(this._onerror = callback);
                },
                enumerable: true,
                configurable: true
            });
            ShumwayComRtmpXHR.prototype.open = function (method, path, async) {
                if (async === void 0) { async = true; }
                this._xhr.open(method, path, async);
            };
            ShumwayComRtmpXHR.prototype.setRequestHeader = function (header, value) {
                this._xhr.setRequestHeader(header, value);
            };
            ShumwayComRtmpXHR.prototype.send = function (data) {
                this._xhr.send(data);
            };
            return ShumwayComRtmpXHR;
        })();
        Browser.ShumwayComRtmpXHR = ShumwayComRtmpXHR;
    })(Browser = RtmpJs.Browser || (RtmpJs.Browser = {}));
})(RtmpJs || (RtmpJs = {}));
var RtmpJs;
(function (RtmpJs) {
    var MAX_CHUNKED_CHANNEL_BUFFER = 0x80000;
    var RANDOM_DATA_SIZE = 1536;
    var PROTOCOL_VERSION = 3;
    var SET_CHUNK_SIZE_CONTROL_MESSAGE_ID = 1;
    var ABORT_MESSAGE_CONTROL_MESSAGE_ID = 2;
    var ACK_MESSAGE_ID = 3;
    var USER_CONTROL_MESSAGE_ID = 4;
    var ACK_WINDOW_SIZE_MESSAGE_ID = 5;
    var SET_PEER_BANDWIDTH_MESSAGE_ID = 6;
    var CONTROL_CHUNK_STREAM_ID = 2;
    var MIN_CHUNK_STREAM_ID = 3;
    var MAX_CHUNK_STREAM_ID = 65599;
    var MAX_CHUNK_HEADER_SIZE = 18;
    var ChunkedStream = (function () {
        function ChunkedStream(id) {
            this.onmessage = null;
            this.id = id;
            this.buffer = null;
            this.bufferLength = 0;
            this.lastStreamId = -1;
            this.lastTimestamp = 0;
            this.lastLength = 0;
            this.lastTypeId = 0;
            this.lastMessageComplete = false;
            this.waitingForBytes = 0;
            this.sentStreamId = -1;
            this.sentTimestamp = 0;
            this.sentLength = 0;
            this.sentTypeId = 0;
        }
        ChunkedStream.prototype.setBuffer = function (enabled) {
            if (enabled && !this.buffer) {
                this.buffer = new Uint8Array(128);
                this.bufferLength = 0;
            }
            if (!enabled && this.buffer) {
                this.buffer = null;
                this.bufferLength = 0;
            }
        };
        ChunkedStream.prototype.abort = function () {
            if (this.buffer) {
                this.bufferLength = 0;
            }
            else if (!this.lastMessageComplete) {
                this.lastMessageComplete = true;
                this.onmessage({
                    timestamp: this.lastTimestamp,
                    streamId: this.lastStreamId,
                    chunkedStreamId: this.id,
                    typeId: this.lastTypeId,
                    data: null,
                    firstChunk: false,
                    lastChunk: true
                });
            }
        };
        ChunkedStream.prototype._push = function (data, firstChunk, lastChunk) {
            if (!this.onmessage) {
                return;
            }
            if ((firstChunk && lastChunk) || !this.buffer) {
                this.onmessage({
                    timestamp: this.lastTimestamp,
                    streamId: this.lastStreamId,
                    chunkedStreamId: this.id,
                    typeId: this.lastTypeId,
                    data: data,
                    firstChunk: firstChunk,
                    lastChunk: lastChunk
                });
                return;
            }
            if (firstChunk) {
                this.bufferLength = 0;
                if (this.lastLength > this.buffer.length) {
                    this.buffer = new Uint8Array(this.lastLength);
                }
            }
            this.buffer.set(data, this.bufferLength);
            this.bufferLength += data.length;
            if (lastChunk) {
                this.onmessage({
                    timestamp: this.lastTimestamp,
                    streamId: this.lastStreamId,
                    chunkedStreamId: this.id,
                    typeId: this.lastTypeId,
                    data: this.buffer.subarray(0, this.bufferLength),
                    firstChunk: true,
                    lastChunk: true
                });
            }
        };
        return ChunkedStream;
    })();
    RtmpJs.ChunkedStream = ChunkedStream;
    var ChunkedChannel = (function () {
        function ChunkedChannel() {
            this.onusercontrolmessage = null;
            this.onack = null;
            this.ondata = function (data) {
            };
            this.onclose = function () {
            };
            this.oncreated = null;
            this.state = 'uninitialized';
            this.buffer = new Uint8Array(4092);
            this.bufferLength = 0;
            this.chunkSize = 128;
            this.chunkStreams = [];
            this.peerChunkSize = 128;
            this.peerAckWindowSize = 0;
            this.bandwidthLimitType = 0;
            this.windowAckSize = 0;
            this.bytesReceived = 0;
            this.lastAckSent = 0;
        }
        ChunkedChannel.prototype.push = function (data) {
            var newDataLength = data.length + this.bufferLength;
            if (newDataLength > this.buffer.length) {
                var newBufferLength = this.buffer.length * 2;
                while (newDataLength > newBufferLength) {
                    newBufferLength *= 2;
                }
                if (newBufferLength > MAX_CHUNKED_CHANNEL_BUFFER) {
                    this._fail('Buffer overflow');
                }
                var newBuffer = new Uint8Array(newBufferLength);
                newBuffer.set(this.buffer);
                this.buffer = newBuffer;
            }
            for (var i = 0, j = this.bufferLength; i < data.length; i++, j++) {
                this.buffer[j] = data[i];
            }
            this.bufferLength = newDataLength;
            this.bytesReceived += data.length;
            if (this.peerAckWindowSize && (this.bytesReceived - this.lastAckSent) >= this.peerAckWindowSize) {
                this._sendAck();
            }
            while (this.bufferLength > 0) {
                var shiftBy = 0;
                switch (this.state) {
                    case 'uninitialized':
                        if (this.bufferLength < 1) {
                            return;
                        }
                        this.serverVersion = this.buffer[0];
                        shiftBy = 1;
                        if (this.serverVersion !== PROTOCOL_VERSION) {
                            this._fail('Unsupported protocol version: ' + this.serverVersion);
                        }
                        this.state = 'version_received';
                        break;
                    case 'version_received':
                        if (this.bufferLength < RANDOM_DATA_SIZE) {
                            return;
                        }
                        shiftBy = RANDOM_DATA_SIZE;
                        var timestamp = (Date.now() - this.epochStart) | 0;
                        this.buffer[4] = (timestamp >>> 24) & 0xFF;
                        this.buffer[5] = (timestamp >>> 16) & 0xFF;
                        this.buffer[6] = (timestamp >>> 8) & 0xFF;
                        this.buffer[7] = timestamp & 0xFF;
                        this.ondata(this.buffer.subarray(0, RANDOM_DATA_SIZE));
                        this.state = 'ack_sent';
                        break;
                    case 'ack_sent':
                        if (this.bufferLength < RANDOM_DATA_SIZE) {
                            return;
                        }
                        shiftBy = RANDOM_DATA_SIZE;
                        for (var i = 8; i < RANDOM_DATA_SIZE; i++) {
                            if (this.buffer[i] !== this.randomData[i]) {
                                this._fail('Random data do not match @' + i);
                            }
                        }
                        this.state = 'handshake_done';
                        this.lastAckSent = this.bytesReceived;
                        this._initialize();
                        break;
                    case 'handshake_done':
                        shiftBy = this._parseChunkedData();
                        if (!shiftBy) {
                            return;
                        }
                        break;
                    default:
                        return;
                }
                this.buffer.set(this.buffer.subarray(shiftBy, this.bufferLength), 0);
                this.bufferLength -= shiftBy;
            }
        };
        ChunkedChannel.prototype._initialize = function () {
            var controlStream = this._getChunkStream(CONTROL_CHUNK_STREAM_ID);
            controlStream.setBuffer(true);
            controlStream.onmessage = function (e) {
                if (e.streamId !== 0) {
                    return;
                }
                release || console.log('Control message: ' + e.typeId);
                switch (e.typeId) {
                    case SET_CHUNK_SIZE_CONTROL_MESSAGE_ID:
                        var newChunkSize = (e.data[0] << 24) | (e.data[1] << 16) | (e.data[2] << 8) | e.data[3];
                        if (newChunkSize >= 1 && newChunkSize <= 0x7FFFFFFF) {
                            this.peerChunkSize = newChunkSize;
                        }
                        break;
                    case ABORT_MESSAGE_CONTROL_MESSAGE_ID:
                        var chunkStreamId = (e.data[0] << 24) | (e.data[1] << 16) | (e.data[2] << 8) | e.data[3];
                        if (MIN_CHUNK_STREAM_ID <= chunkStreamId && chunkStreamId <= MAX_CHUNK_STREAM_ID) {
                            var chunkStream = this._getChunkStream(chunkStreamId);
                            chunkStream.abort();
                        }
                        break;
                    case ACK_MESSAGE_ID:
                        if (this.onack) {
                            this.onack();
                        }
                        break;
                    case USER_CONTROL_MESSAGE_ID:
                        if (this.onusercontrolmessage) {
                            this.onusercontrolmessage({
                                type: (e.data[0] << 8) | e.data[1],
                                data: e.data.subarray(2)
                            });
                        }
                        break;
                    case ACK_WINDOW_SIZE_MESSAGE_ID:
                        var ackWindowSize = (e.data[0] << 24) | (e.data[1] << 16) | (e.data[2] << 8) | e.data[3];
                        if (ackWindowSize < 0) {
                            break;
                        }
                        this.peerAckWindowSize = ackWindowSize;
                        break;
                    case SET_PEER_BANDWIDTH_MESSAGE_ID:
                        var ackWindowSize = (e.data[0] << 24) | (e.data[1] << 16) | (e.data[2] << 8) | e.data[3];
                        var limitType = e.data[4];
                        if (ackWindowSize < 0 || limitType > 2) {
                            break;
                        }
                        if (limitType === 1 || (limitType === 2 && this.bandwidthLimitType === 1)) {
                            ackWindowSize = Math.min(this.windowAckSize, ackWindowSize);
                        }
                        if (ackWindowSize !== this.ackWindowSize) {
                            this.ackWindowSize = ackWindowSize;
                            var ackData = new Uint8Array([(ackWindowSize >>> 24) & 0xFF, (ackWindowSize >>> 16) & 0xFF, (ackWindowSize >>> 8) & 0xFF, ackWindowSize & 0xFF]);
                            this._sendMessage(CONTROL_CHUNK_STREAM_ID, {
                                typeId: ACK_WINDOW_SIZE_MESSAGE_ID,
                                streamId: 0,
                                data: ackData
                            });
                            if (limitType !== 2) {
                                this.bandwidthLimitType = limitType;
                            }
                        }
                        break;
                }
            }.bind(this);
            if (this.oncreated) {
                this.oncreated();
            }
        };
        ChunkedChannel.prototype.setChunkSize = function (chunkSize) {
            if (chunkSize < 1 || chunkSize > 0x7FFFFFFF) {
                throw new Error('Invalid chunk size');
            }
            this._sendMessage(CONTROL_CHUNK_STREAM_ID, {
                streamId: 0,
                typeId: SET_CHUNK_SIZE_CONTROL_MESSAGE_ID,
                data: new Uint8Array([(chunkSize >>> 24) & 0xFF, (chunkSize >>> 16) & 0xFF, (chunkSize >>> 8) & 0xFF, chunkSize & 0xFF])
            });
            this.chunkSize = chunkSize;
        };
        ChunkedChannel.prototype.send = function (chunkStreamId, message) {
            if (chunkStreamId < MIN_CHUNK_STREAM_ID || chunkStreamId > MAX_CHUNK_STREAM_ID) {
                throw new Error('Invalid chunkStreamId');
            }
            return this._sendMessage(chunkStreamId, message);
        };
        ChunkedChannel.prototype.sendUserControlMessage = function (type, data) {
            var eventData = new Uint8Array(2 + data.length);
            eventData[0] = (type >> 8) & 0xFF;
            eventData[1] = type & 0xFF;
            eventData.set(data, 2);
            this._sendMessage(CONTROL_CHUNK_STREAM_ID, {
                typeId: USER_CONTROL_MESSAGE_ID,
                streamId: 0,
                data: eventData
            });
        };
        ChunkedChannel.prototype._sendAck = function () {
            var ackData = new Uint8Array([(this.bytesReceived >>> 24) & 0xFF, (this.bytesReceived >>> 16) & 0xFF, (this.bytesReceived >>> 8) & 0xFF, this.bytesReceived & 0xFF]);
            this._sendMessage(CONTROL_CHUNK_STREAM_ID, {
                typeId: ACK_MESSAGE_ID,
                streamId: 0,
                data: ackData
            });
        };
        ChunkedChannel.prototype._sendMessage = function (chunkStreamId, message) {
            var data = message.data;
            var messageLength = data.length;
            var chunkStream = this._getChunkStream(chunkStreamId);
            var timestamp = ('timestamp' in message ? message.timestamp : (Date.now() - this.epochStart)) | 0;
            var timestampDelta = (timestamp - chunkStream.sentTimestamp) | 0;
            var buffer = new Uint8Array(this.chunkSize + MAX_CHUNK_HEADER_SIZE);
            var chunkStreamIdSize;
            if (chunkStreamId < 64) {
                chunkStreamIdSize = 1;
                buffer[0] = chunkStreamId;
            }
            else if (chunkStreamId < 320) {
                chunkStreamIdSize = 2;
                buffer[0] = 0;
                buffer[1] = chunkStreamId - 64;
            }
            else {
                chunkStreamIdSize = 3;
                buffer[0] = 1;
                buffer[1] = ((chunkStreamId - 64) >> 8) & 0xFF;
                buffer[2] = (chunkStreamId - 64) & 0xFF;
            }
            var position = chunkStreamIdSize;
            var extendTimestamp = 0;
            if (message.streamId !== chunkStream.sentStreamId || timestampDelta < 0) {
                if ((timestamp & 0xFF000000) !== 0) {
                    extendTimestamp = timestamp;
                    buffer[position] = buffer[position + 1] = buffer[position + 2] = 0xFF;
                }
                else {
                    buffer[position] = (timestamp >> 16) & 0xFF;
                    buffer[position + 1] = (timestamp >> 8) & 0xFF;
                    buffer[position + 2] = timestamp & 0xFF;
                }
                position += 3;
                buffer[position++] = (messageLength >> 16) & 0xFF;
                buffer[position++] = (messageLength >> 8) & 0xFF;
                buffer[position++] = messageLength & 0xFF;
                buffer[position++] = message.typeId;
                buffer[position++] = message.streamId & 0xFF;
                buffer[position++] = (message.streamId >> 8) & 0xFF;
                buffer[position++] = (message.streamId >> 16) & 0xFF;
                buffer[position++] = (message.streamId >> 24) & 0xFF;
            }
            else if (messageLength !== chunkStream.sentLength || message.typeId !== chunkStream.sentTypeId) {
                buffer[0] |= 0x40;
                if ((timestampDelta & 0xFF000000) !== 0) {
                    extendTimestamp = timestampDelta;
                    buffer[position] = buffer[position + 1] = buffer[position + 2] = 0xFF;
                }
                else {
                    buffer[position] = (timestampDelta >> 16) & 0xFF;
                    buffer[position + 1] = (timestampDelta >> 8) & 0xFF;
                    buffer[position + 2] = timestampDelta & 0xFF;
                }
                position += 3;
                buffer[position++] = (messageLength >> 16) & 0xFF;
                buffer[position++] = (messageLength >> 8) & 0xFF;
                buffer[position++] = messageLength & 0xFF;
                buffer[position++] = message.typeId;
            }
            else if (timestampDelta !== 0) {
                buffer[0] |= 0x80;
                if ((timestampDelta & 0xFF000000) !== 0) {
                    extendTimestamp = timestampDelta;
                    buffer[position] = buffer[position + 1] = buffer[position + 2] = 0xFF;
                }
                else {
                    buffer[position] = (timestampDelta >> 16) & 0xFF;
                    buffer[position + 1] = (timestampDelta >> 8) & 0xFF;
                    buffer[position + 2] = timestampDelta & 0xFF;
                }
                position += 3;
            }
            else {
                buffer[0] |= 0xC0;
            }
            if (extendTimestamp) {
                buffer[position++] = (extendTimestamp >>> 24) & 0xFF;
                buffer[position++] = (extendTimestamp >>> 16) & 0xFF;
                buffer[position++] = (extendTimestamp >>> 8) & 0xFF;
                buffer[position++] = extendTimestamp & 0xFF;
            }
            chunkStream.sentTimestamp = timestamp;
            chunkStream.sentStreamId = message.streamId;
            chunkStream.sentTypeId = message.typeId;
            chunkStream.sentLength = messageLength;
            var sent = 0;
            while (sent < messageLength) {
                var currentChunkLength = Math.min(messageLength - sent, this.chunkSize);
                buffer.set(data.subarray(sent, sent + currentChunkLength), position);
                sent += currentChunkLength;
                this.ondata(buffer.subarray(0, position + currentChunkLength));
                buffer[0] |= 0xC0;
                position = chunkStreamIdSize;
            }
            return timestamp;
        };
        ChunkedChannel.prototype._getChunkStream = function (id) {
            var chunkStream = this.chunkStreams[id];
            if (!chunkStream) {
                this.chunkStreams[id] = chunkStream = new ChunkedStream(id);
                chunkStream.setBuffer(true);
                chunkStream.onmessage = function (message) {
                    if (this.onmessage) {
                        this.onmessage(message);
                    }
                }.bind(this);
            }
            return chunkStream;
        };
        ChunkedChannel.prototype._parseChunkedData = function () {
            if (this.bufferLength < 1) {
                return;
            }
            var chunkType = (this.buffer[0] >> 6) & 3;
            var chunkHeaderPosition = 1;
            var chunkStreamId = this.buffer[0] & 0x3F;
            if (chunkStreamId === 0) {
                if (this.bufferLength < 2) {
                    return;
                }
                chunkStreamId = this.buffer[1] + 64;
                chunkHeaderPosition = 2;
            }
            else if (chunkStreamId === 1) {
                if (this.bufferLength < 2) {
                    return;
                }
                chunkStreamId = (this.buffer[1] << 8) + this.buffer[2] + 64;
                chunkHeaderPosition = 3;
            }
            var chunkHeaderSize = chunkType === 0 ? 11 : chunkType === 1 ? 7 : chunkType === 2 ? 3 : 0;
            if (this.bufferLength < chunkHeaderPosition + chunkHeaderSize) {
                return;
            }
            var extendTimestampSize = chunkType !== 3 && this.buffer[chunkHeaderPosition] === 0xFF && this.buffer[chunkHeaderPosition + 1] === 0xFF && this.buffer[chunkHeaderPosition + 2] === 0xFF ? 4 : 0;
            var totalChunkHeaderSize = chunkHeaderPosition + chunkHeaderSize + extendTimestampSize;
            if (this.bufferLength < totalChunkHeaderSize) {
                return;
            }
            var chunkStream = this._getChunkStream(chunkStreamId);
            var chunkTimestamp;
            if (chunkType === 3) {
                chunkTimestamp = chunkStream.lastTimestamp;
            }
            else {
                chunkTimestamp = (this.buffer[chunkHeaderPosition] << 16) | (this.buffer[chunkHeaderPosition + 1] << 8) | this.buffer[chunkHeaderPosition + 2];
            }
            if (extendTimestampSize) {
                var chunkTimestampPosition = chunkHeaderPosition + chunkHeaderSize;
                chunkTimestamp = (this.buffer[chunkTimestampPosition] << 24) | (this.buffer[chunkTimestampPosition + 1] << 16) | (this.buffer[chunkTimestampPosition + 2] << 8) | this.buffer[chunkTimestampPosition + 3];
            }
            if (chunkType === 1 || chunkType === 2) {
                chunkTimestamp = (chunkStream.lastTimestamp + chunkTimestamp) | 0;
            }
            var messageLength = chunkStream.lastLength;
            var messageTypeId = chunkStream.lastTypeId;
            var messageStreamId = chunkStream.lastStreamId;
            if (chunkType === 0 || chunkType === 1) {
                messageLength = (this.buffer[chunkHeaderPosition + 3] << 16) | (this.buffer[chunkHeaderPosition + 4] << 8) | this.buffer[chunkHeaderPosition + 5];
                messageTypeId = this.buffer[chunkHeaderPosition + 6];
            }
            if (chunkType === 0) {
                messageStreamId = (this.buffer[chunkHeaderPosition + 10] << 24) | (this.buffer[chunkHeaderPosition + 9] << 16) | (this.buffer[chunkHeaderPosition + 8] << 8) | this.buffer[chunkHeaderPosition + 7];
            }
            var read, tailLength, firstChunk;
            if (chunkType === 3 && chunkStream.waitingForBytes) {
                firstChunk = false;
                read = Math.min(chunkStream.waitingForBytes, this.peerChunkSize);
                tailLength = chunkStream.waitingForBytes - read;
            }
            else {
                firstChunk = true;
                read = Math.min(messageLength, this.peerChunkSize);
                tailLength = messageLength - read;
            }
            if (this.bufferLength < totalChunkHeaderSize + read) {
                return;
            }
            release || (!firstChunk && tailLength) || console.log('Chunk received: cs:' + chunkStreamId + '; ' + 'f/l:' + firstChunk + '/' + (!tailLength) + ';  len:' + messageLength);
            chunkStream.lastTimestamp = chunkTimestamp;
            chunkStream.lastLength = messageLength;
            chunkStream.lastTypeId = messageTypeId;
            chunkStream.lastStreamId = messageStreamId;
            chunkStream.lastMessageComplete = !tailLength;
            chunkStream.waitingForBytes = tailLength;
            chunkStream._push(this.buffer.subarray(totalChunkHeaderSize, totalChunkHeaderSize + read), firstChunk, !tailLength);
            return totalChunkHeaderSize + read;
        };
        ChunkedChannel.prototype.start = function () {
            this.epochStart = Date.now();
            this.ondata(new Uint8Array([PROTOCOL_VERSION]));
            this.randomData = new Uint8Array(RANDOM_DATA_SIZE);
            this.randomData[0] = 0;
            this.randomData[1] = 0;
            this.randomData[2] = 0;
            this.randomData[3] = 0;
            for (var i = 8; i < RANDOM_DATA_SIZE; i++) {
                this.randomData[i] = (Math.random() * 256) | 0;
            }
            this.ondata(this.randomData);
            console.log('## connected');
        };
        ChunkedChannel.prototype.stop = function (error) {
            if (error) {
                console.error('socket error!!!');
            }
            console.log('## closed');
        };
        ChunkedChannel.prototype._fail = function (message) {
            console.error('failed: ' + message);
            this.state = 'failed';
            this.onclose();
            throw new Error(message);
        };
        return ChunkedChannel;
    })();
    RtmpJs.ChunkedChannel = ChunkedChannel;
})(RtmpJs || (RtmpJs = {}));
var RtmpJs;
(function (RtmpJs) {
    var flash = Shumway.AVM2.AS.flash;
    var TRANSPORT_ENCODING = 0;
    var MAIN_CHUNKED_STREAM_ID = 3;
    var CONNECT_TRANSACTION_ID = 1;
    var DEFAULT_STREAM_ID = 0;
    var COMMAND_MESSAGE_AMF0_ID = 20;
    var COMMAND_MESSAGE_AMF3_ID = 17;
    var SET_BUFFER_CONTROL_MESSAGE_ID = 3;
    var PING_REQUEST_CONTROL_MESSAGE_ID = 6;
    var PING_RESPONSE_CONTROL_MESSAGE_ID = 7;
    var BaseTransport = (function () {
        function BaseTransport() {
            this._streams = [];
        }
        BaseTransport.prototype.connect = function (properties, args) {
            throw new Error('Abstract BaseTransport.connect method');
        };
        BaseTransport.prototype._initChannel = function (properties, args) {
            var channel = new RtmpJs.ChunkedChannel();
            var transport = this;
            channel.oncreated = function () {
                var ba = new flash.utils.ByteArray();
                ba.objectEncoding = TRANSPORT_ENCODING;
                ba.writeObject('connect');
                ba.writeObject(CONNECT_TRANSACTION_ID);
                ba.writeObject(properties);
                ba.writeObject(args || null);
                release || console.log('.. Connect sent');
                channel.send(MAIN_CHUNKED_STREAM_ID, {
                    streamId: DEFAULT_STREAM_ID,
                    typeId: TRANSPORT_ENCODING ? COMMAND_MESSAGE_AMF3_ID : COMMAND_MESSAGE_AMF0_ID,
                    data: new Uint8Array(ba._buffer, 0, ba.length)
                });
            };
            channel.onmessage = function (message) {
                release || console.log('.. Data received: typeId:' + message.typeId + ', streamId:' + message.streamId + ', cs: ' + message.chunkedStreamId);
                if (message.streamId !== 0) {
                    transport._streams[message.streamId]._push(message);
                    return;
                }
                if (message.typeId === COMMAND_MESSAGE_AMF0_ID || message.typeId === COMMAND_MESSAGE_AMF3_ID) {
                    var ba = new flash.utils.ByteArray();
                    ba.writeRawBytes(message.data);
                    ba.position = 0;
                    ba.objectEncoding = message.typeId === COMMAND_MESSAGE_AMF0_ID ? 0 : 3;
                    var commandName = ba.readObject();
                    if (commandName === undefined) {
                        ba.objectEncoding = 0;
                        commandName = ba.readObject();
                    }
                    var transactionId = ba.readObject();
                    if (commandName === '_result' || commandName === '_error') {
                        var isError = commandName === '_error';
                        if (transactionId === CONNECT_TRANSACTION_ID) {
                            var properties = ba.readObject();
                            var information = ba.readObject();
                            if (transport.onconnected) {
                                transport.onconnected({ properties: properties, information: information, isError: isError });
                            }
                        }
                        else {
                            var commandObject = ba.readObject();
                            var streamId = ba.readObject();
                            if (transport.onstreamcreated) {
                                var stream = new NetStream(transport, streamId);
                                transport._streams[streamId] = stream;
                                transport.onstreamcreated({ transactionId: transactionId, commandObject: commandObject, streamId: streamId, stream: stream, isError: isError });
                            }
                        }
                    }
                    else if (commandName === 'onBWCheck' || commandName === 'onBWDone') {
                        transport.sendCommandOrResponse('_error', transactionId, null, { code: 'NetConnection.Call.Failed', level: 'error' });
                    }
                    else {
                        var commandObject = ba.readObject();
                        var response = ba.position < ba.length ? ba.readObject() : undefined;
                        if (transport.onresponse) {
                            transport.onresponse({ commandName: commandName, transactionId: transactionId, commandObject: commandObject, response: response });
                        }
                    }
                    return;
                }
            };
            channel.onusercontrolmessage = function (e) {
                release || console.log('.. Event ' + e.type + ' +' + e.data.length + ' bytes');
                if (e.type === PING_REQUEST_CONTROL_MESSAGE_ID) {
                    channel.sendUserControlMessage(PING_RESPONSE_CONTROL_MESSAGE_ID, e.data);
                }
                if (transport.onevent) {
                    transport.onevent({ type: e.type, data: e.data });
                }
            };
            return (this.channel = channel);
        };
        BaseTransport.prototype.call = function (procedureName, transactionId, commandObject, args) {
            var channel = this.channel;
            var ba = new flash.utils.ByteArray();
            ba.objectEncoding = TRANSPORT_ENCODING;
            ba.writeObject(procedureName);
            ba.writeObject(transactionId);
            ba.writeObject(commandObject);
            ba.writeObject(args);
            channel.send(MAIN_CHUNKED_STREAM_ID, {
                streamId: DEFAULT_STREAM_ID,
                typeId: TRANSPORT_ENCODING ? COMMAND_MESSAGE_AMF3_ID : COMMAND_MESSAGE_AMF0_ID,
                data: new Uint8Array(ba._buffer, 0, ba.length)
            });
        };
        BaseTransport.prototype.createStream = function (transactionId, commandObject) {
            this.sendCommandOrResponse('createStream', transactionId, commandObject);
        };
        BaseTransport.prototype.sendCommandOrResponse = function (commandName, transactionId, commandObject, response) {
            var channel = this.channel;
            var ba = new flash.utils.ByteArray();
            ba.writeByte(0);
            ba.objectEncoding = 0;
            ba.writeObject(commandName);
            ba.writeObject(transactionId);
            ba.writeObject(commandObject || null);
            if (arguments.length > 3) {
                ba.writeObject(response);
            }
            channel.send(MAIN_CHUNKED_STREAM_ID, {
                streamId: DEFAULT_STREAM_ID,
                typeId: COMMAND_MESSAGE_AMF3_ID,
                data: new Uint8Array(ba._buffer, 0, ba.length)
            });
        };
        BaseTransport.prototype._setBuffer = function (streamId, ms) {
            this.channel.sendUserControlMessage(SET_BUFFER_CONTROL_MESSAGE_ID, new Uint8Array([
                (streamId >> 24) & 0xFF,
                (streamId >> 16) & 0xFF,
                (streamId >> 8) & 0xFF,
                streamId & 0xFF,
                (ms >> 24) & 0xFF,
                (ms >> 16) & 0xFF,
                (ms >> 8) & 0xFF,
                ms & 0xFF
            ]));
        };
        BaseTransport.prototype._sendCommand = function (streamId, data) {
            this.channel.send(8, {
                streamId: streamId,
                typeId: TRANSPORT_ENCODING ? COMMAND_MESSAGE_AMF3_ID : COMMAND_MESSAGE_AMF0_ID,
                data: data
            });
        };
        return BaseTransport;
    })();
    RtmpJs.BaseTransport = BaseTransport;
    var DEFAULT_BUFFER_LENGTH = 100;
    var NetStream = (function () {
        function NetStream(transport, streamId) {
            this.transport = transport;
            this.streamId = streamId;
        }
        NetStream.prototype.play = function (name, start, duration, reset) {
            var ba = new flash.utils.ByteArray();
            ba.objectEncoding = TRANSPORT_ENCODING;
            ba.writeObject('play');
            ba.writeObject(0);
            ba.writeObject(null);
            ba.writeObject(name);
            if (arguments.length > 1) {
                ba.writeObject(start);
            }
            if (arguments.length > 2) {
                ba.writeObject(duration);
            }
            if (arguments.length > 3) {
                ba.writeObject(reset);
            }
            this.transport._sendCommand(this.streamId, new Uint8Array(ba._buffer, 0, ba.length));
            this.transport._setBuffer(this.streamId, DEFAULT_BUFFER_LENGTH);
        };
        NetStream.prototype._push = function (message) {
            switch (message.typeId) {
                case 8:
                case 9:
                    if (this.ondata) {
                        this.ondata(message);
                    }
                    break;
                case 18:
                case 20:
                    var args = [];
                    var ba = new flash.utils.ByteArray();
                    ba.writeRawBytes(message.data);
                    ba.position = 0;
                    ba.objectEncoding = 0;
                    while (ba.position < ba.length) {
                        args.push(ba.readObject());
                    }
                    if (message.typeId === 18 && this.onscriptdata) {
                        this.onscriptdata.apply(this, args);
                    }
                    if (message.typeId === 20 && this.oncallback) {
                        this.oncallback.apply(this, args);
                    }
                    break;
            }
        };
        return NetStream;
    })();
    function parseConnectionString(s) {
        var protocolSeparatorIndex = s.indexOf(':');
        if (protocolSeparatorIndex < 0) {
            return null;
        }
        if (s[protocolSeparatorIndex + 1] !== '/') {
            return null;
        }
        var protocol = s.substring(0, protocolSeparatorIndex).toLocaleLowerCase();
        if (protocol !== 'rtmp' && protocol !== 'rtmpt' && protocol !== 'rtmps' && protocol !== 'rtmpe' && protocol !== 'rtmpte' && protocol !== 'rtmfp') {
            return null;
        }
        var host, port;
        var appnameSeparator = protocolSeparatorIndex + 1;
        if (s[protocolSeparatorIndex + 2] === '/') {
            appnameSeparator = s.indexOf('/', protocolSeparatorIndex + 3);
            if (appnameSeparator < 0) {
                return undefined;
            }
            var portSeparator = s.indexOf(':', protocolSeparatorIndex + 1);
            if (portSeparator >= 0 && portSeparator < appnameSeparator) {
                host = s.substring(protocolSeparatorIndex + 3, portSeparator);
                port = +s.substring(portSeparator + 1, appnameSeparator);
            }
            else {
                host = s.substring(protocolSeparatorIndex + 3, appnameSeparator);
            }
        }
        var app = s.substring(appnameSeparator + 1);
        return {
            protocol: protocol,
            host: host,
            port: port,
            app: app
        };
    }
    RtmpJs.parseConnectionString = parseConnectionString;
})(RtmpJs || (RtmpJs = {}));
var RtmpJs;
(function (RtmpJs) {
    var Browser;
    (function (Browser) {
        var DEFAULT_RTMP_PORT = 1935;
        var COMBINE_RTMPT_DATA = true;
        var RtmpTransport = (function (_super) {
            __extends(RtmpTransport, _super);
            function RtmpTransport(connectionSettings) {
                _super.call(this);
                if (typeof connectionSettings === 'string') {
                    connectionSettings = { host: connectionSettings };
                }
                this.host = connectionSettings.host || 'localhost';
                this.port = connectionSettings.port || DEFAULT_RTMP_PORT;
                this.ssl = !!connectionSettings.ssl || false;
            }
            RtmpTransport.prototype.connect = function (properties, args) {
                var TCPSocket = typeof navigator !== 'undefined' && navigator.mozTCPSocket;
                if (!TCPSocket) {
                    throw new Error('Your browser does not support socket communication.\n' + 'Currenly only Firefox with enabled mozTCPSocket is allowed (see README.md).');
                }
                var channel = this._initChannel(properties, args);
                var writeQueue = [], socketError = false;
                var socket = typeof Browser.ShumwayComRtmpSocket !== 'undefined' && Browser.ShumwayComRtmpSocket.isAvailable ? new Browser.ShumwayComRtmpSocket(this.host, this.port, { useSecureTransport: this.ssl, binaryType: 'arraybuffer' }) : TCPSocket.open(this.host, this.port, { useSecureTransport: this.ssl, binaryType: 'arraybuffer' });
                var sendData = function (data) {
                    return socket.send(data.buffer, data.byteOffset, data.byteLength);
                };
                socket.onopen = function (e) {
                    channel.ondata = function (data) {
                        var buf = new Uint8Array(data);
                        writeQueue.push(buf);
                        if (writeQueue.length > 1) {
                            return;
                        }
                        release || console.log('Bytes written: ' + buf.length);
                        if (sendData(buf)) {
                            writeQueue.shift();
                        }
                    };
                    channel.onclose = function () {
                        socket.close();
                    };
                    channel.start();
                };
                socket.ondrain = function (e) {
                    writeQueue.shift();
                    release || console.log('Write completed');
                    while (writeQueue.length > 0) {
                        release || console.log('Bytes written: ' + writeQueue[0].length);
                        if (!sendData(writeQueue[0])) {
                            break;
                        }
                        writeQueue.shift();
                    }
                };
                socket.onclose = function (e) {
                    channel.stop(socketError);
                };
                socket.onerror = function (e) {
                    socketError = true;
                    console.error('socket error: ' + e.data);
                };
                socket.ondata = function (e) {
                    release || console.log('Bytes read: ' + e.data.byteLength);
                    channel.push(new Uint8Array(e.data));
                };
            };
            return RtmpTransport;
        })(RtmpJs.BaseTransport);
        Browser.RtmpTransport = RtmpTransport;
        var RtmptTransport = (function (_super) {
            __extends(RtmptTransport, _super);
            function RtmptTransport(connectionSettings) {
                _super.call(this);
                var host = connectionSettings.host || 'localhost';
                var url = (connectionSettings.ssl ? 'https' : 'http') + '://' + host;
                if (connectionSettings.port) {
                    url += ':' + connectionSettings.port;
                }
                this.baseUrl = url;
                this.stopped = false;
                this.sessionId = null;
                this.requestId = 0;
                this.data = [];
            }
            RtmptTransport.prototype.connect = function (properties, args) {
                var channel = this._initChannel(properties, args);
                channel.ondata = function (data) {
                    release || console.log('Bytes written: ' + data.length);
                    this.data.push(new Uint8Array(data));
                }.bind(this);
                channel.onclose = function () {
                    this.stopped = true;
                }.bind(this);
                post(this.baseUrl + '/fcs/ident2', null, function (data, status) {
                    if (status !== 404) {
                        throw new Error('Unexpected response: ' + status);
                    }
                    post(this.baseUrl + '/open/1', null, function (data, status) {
                        this.sessionId = String.fromCharCode.apply(null, data).slice(0, -1);
                        console.log('session id: ' + this.sessionId);
                        this.tick();
                        channel.start();
                    }.bind(this));
                }.bind(this));
            };
            RtmptTransport.prototype.tick = function () {
                var continueSend = function (data, status) {
                    if (status !== 200) {
                        throw new Error('Invalid HTTP status');
                    }
                    var idle = data[0];
                    if (data.length > 1) {
                        this.channel.push(data.subarray(1));
                    }
                    setTimeout(this.tick.bind(this), idle * 16);
                }.bind(this);
                if (this.stopped) {
                    post(this.baseUrl + '/close/2', null, function () {
                    });
                    return;
                }
                if (this.data.length > 0) {
                    var data;
                    if (COMBINE_RTMPT_DATA) {
                        var length = 0;
                        this.data.forEach(function (i) {
                            length += i.length;
                        });
                        var pos = 0;
                        data = new Uint8Array(length);
                        this.data.forEach(function (i) {
                            data.set(i, pos);
                            pos += i.length;
                        });
                        this.data.length = 0;
                    }
                    else {
                        data = this.data.shift();
                    }
                    post(this.baseUrl + '/send/' + this.sessionId + '/' + (this.requestId++), data, continueSend);
                }
                else {
                    post(this.baseUrl + '/idle/' + this.sessionId + '/' + (this.requestId++), null, continueSend);
                }
            };
            return RtmptTransport;
        })(RtmpJs.BaseTransport);
        Browser.RtmptTransport = RtmptTransport;
        var emptyPostData = new Uint8Array([0]);
        function post(path, data, onload) {
            data || (data = emptyPostData);
            var xhr = typeof Browser.ShumwayComRtmpXHR !== 'undefined' && Browser.ShumwayComRtmpXHR.isAvailable ? new Browser.ShumwayComRtmpXHR() : new XMLHttpRequest({ mozSystem: true });
            xhr.open('POST', path, true);
            xhr.responseType = 'arraybuffer';
            xhr.setRequestHeader('Content-Type', 'application/x-fcs');
            xhr.onload = function (e) {
                onload(new Uint8Array(xhr.response), xhr.status);
            };
            xhr.onerror = function (e) {
                console.log('error');
                throw new Error('HTTP error');
            };
            xhr.send(data);
        }
    })(Browser = RtmpJs.Browser || (RtmpJs.Browser = {}));
})(RtmpJs || (RtmpJs = {}));
var RtmpJs;
(function (RtmpJs) {
    var MP4;
    (function (MP4) {
        var Iso;
        (function (Iso) {
            var utf8decode = Shumway.StringUtilities.utf8decode;
            var START_DATE = -2082844800000;
            var DEFAULT_MOVIE_MATRIX = [1.0, 0, 0, 0, 1.0, 0, 0, 0, 1.0];
            var DEFAULT_OP_COLOR = [0, 0, 0];
            function concatArrays(arg0) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return Array.prototype.concat.apply(arg0, args);
            }
            function writeInt32(data, offset, value) {
                data[offset] = (value >> 24) & 255;
                data[offset + 1] = (value >> 16) & 255;
                data[offset + 2] = (value >> 8) & 255;
                data[offset + 3] = value & 255;
            }
            function decodeInt32(s) {
                return (s.charCodeAt(0) << 24) | (s.charCodeAt(1) << 16) | (s.charCodeAt(2) << 8) | s.charCodeAt(3);
            }
            function encodeDate(d) {
                return ((d - START_DATE) / 1000) | 0;
            }
            function encodeFloat_16_16(f) {
                return (f * 0x10000) | 0;
            }
            function encodeFloat_2_30(f) {
                return (f * 0x40000000) | 0;
            }
            function encodeFloat_8_8(f) {
                return (f * 0x100) | 0;
            }
            function encodeLang(s) {
                return ((s.charCodeAt(0) & 0x1F) << 10) | ((s.charCodeAt(1) & 0x1F) << 5) | (s.charCodeAt(2) & 0x1F);
            }
            var Box = (function () {
                function Box(boxtype, extendedType) {
                    this.boxtype = boxtype;
                    if (boxtype === 'uuid') {
                        this.userType = extendedType;
                    }
                }
                Box.prototype.layout = function (offset) {
                    this.offset = offset;
                    var size = 8;
                    if (this.userType) {
                        size += 16;
                    }
                    this.size = size;
                    return size;
                };
                Box.prototype.write = function (data) {
                    writeInt32(data, this.offset, this.size);
                    writeInt32(data, this.offset + 4, decodeInt32(this.boxtype));
                    if (!this.userType) {
                        return 8;
                    }
                    data.set(this.userType, this.offset + 8);
                    return 24;
                };
                Box.prototype.toUint8Array = function () {
                    var size = this.layout(0);
                    var data = new Uint8Array(size);
                    this.write(data);
                    return data;
                };
                return Box;
            })();
            Iso.Box = Box;
            var FullBox = (function (_super) {
                __extends(FullBox, _super);
                function FullBox(boxtype, version, flags) {
                    if (version === void 0) { version = 0; }
                    if (flags === void 0) { flags = 0; }
                    _super.call(this, boxtype);
                    this.version = version;
                    this.flags = flags;
                }
                FullBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 4;
                    return this.size;
                };
                FullBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, (this.version << 24) | this.flags);
                    return offset + 4;
                };
                return FullBox;
            })(Box);
            Iso.FullBox = FullBox;
            var FileTypeBox = (function (_super) {
                __extends(FileTypeBox, _super);
                function FileTypeBox(majorBrand, minorVersion, compatibleBrands) {
                    _super.call(this, 'ftype');
                    this.majorBrand = majorBrand;
                    this.minorVersion = minorVersion;
                    this.compatibleBrands = compatibleBrands;
                }
                FileTypeBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 4 * (2 + this.compatibleBrands.length);
                    return this.size;
                };
                FileTypeBox.prototype.write = function (data) {
                    var _this = this;
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, decodeInt32(this.majorBrand));
                    writeInt32(data, this.offset + offset + 4, this.minorVersion);
                    offset += 8;
                    this.compatibleBrands.forEach(function (brand) {
                        writeInt32(data, _this.offset + offset, decodeInt32(brand));
                        offset += 4;
                    }, this);
                    return offset;
                };
                return FileTypeBox;
            })(Box);
            Iso.FileTypeBox = FileTypeBox;
            var BoxContainerBox = (function (_super) {
                __extends(BoxContainerBox, _super);
                function BoxContainerBox(type, children) {
                    _super.call(this, type);
                    this.children = children;
                }
                BoxContainerBox.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset);
                    this.children.forEach(function (child) {
                        if (!child) {
                            return;
                        }
                        size += child.layout(offset + size);
                    });
                    return (this.size = size);
                };
                BoxContainerBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    this.children.forEach(function (child) {
                        if (!child) {
                            return;
                        }
                        offset += child.write(data);
                    });
                    return offset;
                };
                return BoxContainerBox;
            })(Box);
            Iso.BoxContainerBox = BoxContainerBox;
            var MovieBox = (function (_super) {
                __extends(MovieBox, _super);
                function MovieBox(header, tracks, extendsBox, userData) {
                    _super.call(this, 'moov', concatArrays([header], tracks, [extendsBox, userData]));
                    this.header = header;
                    this.tracks = tracks;
                    this.extendsBox = extendsBox;
                    this.userData = userData;
                }
                return MovieBox;
            })(BoxContainerBox);
            Iso.MovieBox = MovieBox;
            var MovieHeaderBox = (function (_super) {
                __extends(MovieHeaderBox, _super);
                function MovieHeaderBox(timescale, duration, nextTrackId, rate, volume, matrix, creationTime, modificationTime) {
                    if (rate === void 0) { rate = 1.0; }
                    if (volume === void 0) { volume = 1.0; }
                    if (matrix === void 0) { matrix = DEFAULT_MOVIE_MATRIX; }
                    if (creationTime === void 0) { creationTime = START_DATE; }
                    if (modificationTime === void 0) { modificationTime = START_DATE; }
                    _super.call(this, 'mvhd', 0, 0);
                    this.timescale = timescale;
                    this.duration = duration;
                    this.nextTrackId = nextTrackId;
                    this.rate = rate;
                    this.volume = volume;
                    this.matrix = matrix;
                    this.creationTime = creationTime;
                    this.modificationTime = modificationTime;
                }
                MovieHeaderBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 16 + 4 + 2 + 2 + 8 + 36 + 24 + 4;
                    return this.size;
                };
                MovieHeaderBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, encodeDate(this.creationTime));
                    writeInt32(data, this.offset + offset + 4, encodeDate(this.modificationTime));
                    writeInt32(data, this.offset + offset + 8, this.timescale);
                    writeInt32(data, this.offset + offset + 12, this.duration);
                    offset += 16;
                    writeInt32(data, this.offset + offset, encodeFloat_16_16(this.rate));
                    writeInt32(data, this.offset + offset + 4, encodeFloat_8_8(this.volume) << 16);
                    writeInt32(data, this.offset + offset + 8, 0);
                    writeInt32(data, this.offset + offset + 12, 0);
                    offset += 16;
                    writeInt32(data, this.offset + offset, encodeFloat_16_16(this.matrix[0]));
                    writeInt32(data, this.offset + offset + 4, encodeFloat_16_16(this.matrix[1]));
                    writeInt32(data, this.offset + offset + 8, encodeFloat_16_16(this.matrix[2]));
                    writeInt32(data, this.offset + offset + 12, encodeFloat_16_16(this.matrix[3]));
                    writeInt32(data, this.offset + offset + 16, encodeFloat_16_16(this.matrix[4]));
                    writeInt32(data, this.offset + offset + 20, encodeFloat_16_16(this.matrix[5]));
                    writeInt32(data, this.offset + offset + 24, encodeFloat_2_30(this.matrix[6]));
                    writeInt32(data, this.offset + offset + 28, encodeFloat_2_30(this.matrix[7]));
                    writeInt32(data, this.offset + offset + 32, encodeFloat_2_30(this.matrix[8]));
                    offset += 36;
                    writeInt32(data, this.offset + offset, 0);
                    writeInt32(data, this.offset + offset + 4, 0);
                    writeInt32(data, this.offset + offset + 8, 0);
                    writeInt32(data, this.offset + offset + 12, 0);
                    writeInt32(data, this.offset + offset + 16, 0);
                    writeInt32(data, this.offset + offset + 20, 0);
                    offset += 24;
                    writeInt32(data, this.offset + offset, this.nextTrackId);
                    offset += 4;
                    return offset;
                };
                return MovieHeaderBox;
            })(FullBox);
            Iso.MovieHeaderBox = MovieHeaderBox;
            (function (TrackHeaderFlags) {
                TrackHeaderFlags[TrackHeaderFlags["TRACK_ENABLED"] = 0x000001] = "TRACK_ENABLED";
                TrackHeaderFlags[TrackHeaderFlags["TRACK_IN_MOVIE"] = 0x000002] = "TRACK_IN_MOVIE";
                TrackHeaderFlags[TrackHeaderFlags["TRACK_IN_PREVIEW"] = 0x000004] = "TRACK_IN_PREVIEW";
            })(Iso.TrackHeaderFlags || (Iso.TrackHeaderFlags = {}));
            var TrackHeaderFlags = Iso.TrackHeaderFlags;
            var TrackHeaderBox = (function (_super) {
                __extends(TrackHeaderBox, _super);
                function TrackHeaderBox(flags, trackId, duration, width, height, volume, alternateGroup, layer, matrix, creationTime, modificationTime) {
                    if (alternateGroup === void 0) { alternateGroup = 0; }
                    if (layer === void 0) { layer = 0; }
                    if (matrix === void 0) { matrix = DEFAULT_MOVIE_MATRIX; }
                    if (creationTime === void 0) { creationTime = START_DATE; }
                    if (modificationTime === void 0) { modificationTime = START_DATE; }
                    _super.call(this, 'tkhd', 0, flags);
                    this.trackId = trackId;
                    this.duration = duration;
                    this.width = width;
                    this.height = height;
                    this.volume = volume;
                    this.alternateGroup = alternateGroup;
                    this.layer = layer;
                    this.matrix = matrix;
                    this.creationTime = creationTime;
                    this.modificationTime = modificationTime;
                }
                TrackHeaderBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 20 + 8 + 6 + 2 + 36 + 8;
                    return this.size;
                };
                TrackHeaderBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, encodeDate(this.creationTime));
                    writeInt32(data, this.offset + offset + 4, encodeDate(this.modificationTime));
                    writeInt32(data, this.offset + offset + 8, this.trackId);
                    writeInt32(data, this.offset + offset + 12, 0);
                    writeInt32(data, this.offset + offset + 16, this.duration);
                    offset += 20;
                    writeInt32(data, this.offset + offset, 0);
                    writeInt32(data, this.offset + offset + 4, 0);
                    writeInt32(data, this.offset + offset + 8, (this.layer << 16) | this.alternateGroup);
                    writeInt32(data, this.offset + offset + 12, encodeFloat_8_8(this.volume) << 16);
                    offset += 16;
                    writeInt32(data, this.offset + offset, encodeFloat_16_16(this.matrix[0]));
                    writeInt32(data, this.offset + offset + 4, encodeFloat_16_16(this.matrix[1]));
                    writeInt32(data, this.offset + offset + 8, encodeFloat_16_16(this.matrix[2]));
                    writeInt32(data, this.offset + offset + 12, encodeFloat_16_16(this.matrix[3]));
                    writeInt32(data, this.offset + offset + 16, encodeFloat_16_16(this.matrix[4]));
                    writeInt32(data, this.offset + offset + 20, encodeFloat_16_16(this.matrix[5]));
                    writeInt32(data, this.offset + offset + 24, encodeFloat_2_30(this.matrix[6]));
                    writeInt32(data, this.offset + offset + 28, encodeFloat_2_30(this.matrix[7]));
                    writeInt32(data, this.offset + offset + 32, encodeFloat_2_30(this.matrix[8]));
                    offset += 36;
                    writeInt32(data, this.offset + offset, encodeFloat_16_16(this.width));
                    writeInt32(data, this.offset + offset + 4, encodeFloat_16_16(this.height));
                    offset += 8;
                    return offset;
                };
                return TrackHeaderBox;
            })(FullBox);
            Iso.TrackHeaderBox = TrackHeaderBox;
            var MediaHeaderBox = (function (_super) {
                __extends(MediaHeaderBox, _super);
                function MediaHeaderBox(timescale, duration, language, creationTime, modificationTime) {
                    if (language === void 0) { language = 'unk'; }
                    if (creationTime === void 0) { creationTime = START_DATE; }
                    if (modificationTime === void 0) { modificationTime = START_DATE; }
                    _super.call(this, 'mdhd', 0, 0);
                    this.timescale = timescale;
                    this.duration = duration;
                    this.language = language;
                    this.creationTime = creationTime;
                    this.modificationTime = modificationTime;
                }
                MediaHeaderBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 16 + 4;
                    return this.size;
                };
                MediaHeaderBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, encodeDate(this.creationTime));
                    writeInt32(data, this.offset + offset + 4, encodeDate(this.modificationTime));
                    writeInt32(data, this.offset + offset + 8, this.timescale);
                    writeInt32(data, this.offset + offset + 12, this.duration);
                    writeInt32(data, this.offset + offset + 16, encodeLang(this.language) << 16);
                    return offset + 20;
                };
                return MediaHeaderBox;
            })(FullBox);
            Iso.MediaHeaderBox = MediaHeaderBox;
            var HandlerBox = (function (_super) {
                __extends(HandlerBox, _super);
                function HandlerBox(handlerType, name) {
                    _super.call(this, 'hdlr', 0, 0);
                    this.handlerType = handlerType;
                    this.name = name;
                    this._encodedName = utf8decode(this.name);
                }
                HandlerBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 8 + 12 + (this._encodedName.length + 1);
                    return this.size;
                };
                HandlerBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, 0);
                    writeInt32(data, this.offset + offset + 4, decodeInt32(this.handlerType));
                    writeInt32(data, this.offset + offset + 8, 0);
                    writeInt32(data, this.offset + offset + 12, 0);
                    writeInt32(data, this.offset + offset + 16, 0);
                    offset += 20;
                    data.set(this._encodedName, this.offset + offset);
                    data[this.offset + offset + this._encodedName.length] = 0;
                    offset += this._encodedName.length + 1;
                    return offset;
                };
                return HandlerBox;
            })(FullBox);
            Iso.HandlerBox = HandlerBox;
            var SoundMediaHeaderBox = (function (_super) {
                __extends(SoundMediaHeaderBox, _super);
                function SoundMediaHeaderBox(balance) {
                    if (balance === void 0) { balance = 0.0; }
                    _super.call(this, 'smhd', 0, 0);
                    this.balance = balance;
                }
                SoundMediaHeaderBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 4;
                    return this.size;
                };
                SoundMediaHeaderBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, encodeFloat_8_8(this.balance) << 16);
                    return offset + 4;
                };
                return SoundMediaHeaderBox;
            })(FullBox);
            Iso.SoundMediaHeaderBox = SoundMediaHeaderBox;
            var VideoMediaHeaderBox = (function (_super) {
                __extends(VideoMediaHeaderBox, _super);
                function VideoMediaHeaderBox(graphicsMode, opColor) {
                    if (graphicsMode === void 0) { graphicsMode = 0; }
                    if (opColor === void 0) { opColor = DEFAULT_OP_COLOR; }
                    _super.call(this, 'vmhd', 0, 0);
                    this.graphicsMode = graphicsMode;
                    this.opColor = opColor;
                }
                VideoMediaHeaderBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 8;
                    return this.size;
                };
                VideoMediaHeaderBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, (this.graphicsMode << 16) | this.opColor[0]);
                    writeInt32(data, this.offset + offset + 4, (this.opColor[1] << 16) | this.opColor[2]);
                    return offset + 8;
                };
                return VideoMediaHeaderBox;
            })(FullBox);
            Iso.VideoMediaHeaderBox = VideoMediaHeaderBox;
            Iso.SELF_CONTAINED_DATA_REFERENCE_FLAG = 0x000001;
            var DataEntryUrlBox = (function (_super) {
                __extends(DataEntryUrlBox, _super);
                function DataEntryUrlBox(flags, location) {
                    if (location === void 0) { location = null; }
                    _super.call(this, 'url ', 0, flags);
                    this.location = location;
                    if (!(flags & Iso.SELF_CONTAINED_DATA_REFERENCE_FLAG)) {
                        this._encodedLocation = utf8decode(location);
                    }
                }
                DataEntryUrlBox.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset);
                    if (this._encodedLocation) {
                        size += this._encodedLocation.length + 1;
                    }
                    return (this.size = size);
                };
                DataEntryUrlBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    if (this._encodedLocation) {
                        data.set(this._encodedLocation, this.offset + offset);
                        data[this.offset + offset + this._encodedLocation.length] = 0;
                        offset += this._encodedLocation.length;
                    }
                    return offset;
                };
                return DataEntryUrlBox;
            })(FullBox);
            Iso.DataEntryUrlBox = DataEntryUrlBox;
            var DataReferenceBox = (function (_super) {
                __extends(DataReferenceBox, _super);
                function DataReferenceBox(entries) {
                    _super.call(this, 'dref', 0, 0);
                    this.entries = entries;
                }
                DataReferenceBox.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset) + 4;
                    this.entries.forEach(function (entry) {
                        size += entry.layout(offset + size);
                    });
                    return (this.size = size);
                };
                DataReferenceBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, this.entries.length);
                    this.entries.forEach(function (entry) {
                        offset += entry.write(data);
                    });
                    return offset;
                };
                return DataReferenceBox;
            })(FullBox);
            Iso.DataReferenceBox = DataReferenceBox;
            var DataInformationBox = (function (_super) {
                __extends(DataInformationBox, _super);
                function DataInformationBox(dataReference) {
                    _super.call(this, 'dinf', [dataReference]);
                    this.dataReference = dataReference;
                }
                return DataInformationBox;
            })(BoxContainerBox);
            Iso.DataInformationBox = DataInformationBox;
            var SampleDescriptionBox = (function (_super) {
                __extends(SampleDescriptionBox, _super);
                function SampleDescriptionBox(entries) {
                    _super.call(this, 'stsd', 0, 0);
                    this.entries = entries;
                }
                SampleDescriptionBox.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset);
                    size += 4;
                    this.entries.forEach(function (entry) {
                        size += entry.layout(offset + size);
                    });
                    return (this.size = size);
                };
                SampleDescriptionBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, this.entries.length);
                    offset += 4;
                    this.entries.forEach(function (entry) {
                        offset += entry.write(data);
                    });
                    return offset;
                };
                return SampleDescriptionBox;
            })(FullBox);
            Iso.SampleDescriptionBox = SampleDescriptionBox;
            var SampleTableBox = (function (_super) {
                __extends(SampleTableBox, _super);
                function SampleTableBox(sampleDescriptions, timeToSample, sampleToChunk, sampleSizes, chunkOffset) {
                    _super.call(this, 'stbl', [sampleDescriptions, timeToSample, sampleToChunk, sampleSizes, chunkOffset]);
                    this.sampleDescriptions = sampleDescriptions;
                    this.timeToSample = timeToSample;
                    this.sampleToChunk = sampleToChunk;
                    this.sampleSizes = sampleSizes;
                    this.chunkOffset = chunkOffset;
                }
                return SampleTableBox;
            })(BoxContainerBox);
            Iso.SampleTableBox = SampleTableBox;
            var MediaInformationBox = (function (_super) {
                __extends(MediaInformationBox, _super);
                function MediaInformationBox(header, info, sampleTable) {
                    _super.call(this, 'minf', [header, info, sampleTable]);
                    this.header = header;
                    this.info = info;
                    this.sampleTable = sampleTable;
                }
                return MediaInformationBox;
            })(BoxContainerBox);
            Iso.MediaInformationBox = MediaInformationBox;
            var MediaBox = (function (_super) {
                __extends(MediaBox, _super);
                function MediaBox(header, handler, info) {
                    _super.call(this, 'mdia', [header, handler, info]);
                    this.header = header;
                    this.handler = handler;
                    this.info = info;
                }
                return MediaBox;
            })(BoxContainerBox);
            Iso.MediaBox = MediaBox;
            var TrackBox = (function (_super) {
                __extends(TrackBox, _super);
                function TrackBox(header, media) {
                    _super.call(this, 'trak', [header, media]);
                    this.header = header;
                    this.media = media;
                }
                return TrackBox;
            })(BoxContainerBox);
            Iso.TrackBox = TrackBox;
            var TrackExtendsBox = (function (_super) {
                __extends(TrackExtendsBox, _super);
                function TrackExtendsBox(trackId, defaultSampleDescriptionIndex, defaultSampleDuration, defaultSampleSize, defaultSampleFlags) {
                    _super.call(this, 'trex', 0, 0);
                    this.trackId = trackId;
                    this.defaultSampleDescriptionIndex = defaultSampleDescriptionIndex;
                    this.defaultSampleDuration = defaultSampleDuration;
                    this.defaultSampleSize = defaultSampleSize;
                    this.defaultSampleFlags = defaultSampleFlags;
                }
                TrackExtendsBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 20;
                    return this.size;
                };
                TrackExtendsBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, this.trackId);
                    writeInt32(data, this.offset + offset + 4, this.defaultSampleDescriptionIndex);
                    writeInt32(data, this.offset + offset + 8, this.defaultSampleDuration);
                    writeInt32(data, this.offset + offset + 12, this.defaultSampleSize);
                    writeInt32(data, this.offset + offset + 16, this.defaultSampleFlags);
                    return offset + 20;
                };
                return TrackExtendsBox;
            })(FullBox);
            Iso.TrackExtendsBox = TrackExtendsBox;
            var MovieExtendsBox = (function (_super) {
                __extends(MovieExtendsBox, _super);
                function MovieExtendsBox(header, tracDefaults, levels) {
                    _super.call(this, 'mvex', concatArrays([header], tracDefaults, [levels]));
                    this.header = header;
                    this.tracDefaults = tracDefaults;
                    this.levels = levels;
                }
                return MovieExtendsBox;
            })(BoxContainerBox);
            Iso.MovieExtendsBox = MovieExtendsBox;
            var MetaBox = (function (_super) {
                __extends(MetaBox, _super);
                function MetaBox(handler, otherBoxes) {
                    _super.call(this, 'meta', 0, 0);
                    this.handler = handler;
                    this.otherBoxes = otherBoxes;
                }
                MetaBox.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset);
                    size += this.handler.layout(offset + size);
                    this.otherBoxes.forEach(function (box) {
                        size += box.layout(offset + size);
                    });
                    return (this.size = size);
                };
                MetaBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    offset += this.handler.write(data);
                    this.otherBoxes.forEach(function (box) {
                        offset += box.write(data);
                    });
                    return offset;
                };
                return MetaBox;
            })(FullBox);
            Iso.MetaBox = MetaBox;
            var MovieFragmentHeaderBox = (function (_super) {
                __extends(MovieFragmentHeaderBox, _super);
                function MovieFragmentHeaderBox(sequenceNumber) {
                    _super.call(this, 'mfhd', 0, 0);
                    this.sequenceNumber = sequenceNumber;
                }
                MovieFragmentHeaderBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 4;
                    return this.size;
                };
                MovieFragmentHeaderBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, this.sequenceNumber);
                    return offset + 4;
                };
                return MovieFragmentHeaderBox;
            })(FullBox);
            Iso.MovieFragmentHeaderBox = MovieFragmentHeaderBox;
            (function (TrackFragmentFlags) {
                TrackFragmentFlags[TrackFragmentFlags["BASE_DATA_OFFSET_PRESENT"] = 0x000001] = "BASE_DATA_OFFSET_PRESENT";
                TrackFragmentFlags[TrackFragmentFlags["SAMPLE_DESCRIPTION_INDEX_PRESENT"] = 0x000002] = "SAMPLE_DESCRIPTION_INDEX_PRESENT";
                TrackFragmentFlags[TrackFragmentFlags["DEFAULT_SAMPLE_DURATION_PRESENT"] = 0x000008] = "DEFAULT_SAMPLE_DURATION_PRESENT";
                TrackFragmentFlags[TrackFragmentFlags["DEFAULT_SAMPLE_SIZE_PRESENT"] = 0x0000010] = "DEFAULT_SAMPLE_SIZE_PRESENT";
                TrackFragmentFlags[TrackFragmentFlags["DEFAULT_SAMPLE_FLAGS_PRESENT"] = 0x000020] = "DEFAULT_SAMPLE_FLAGS_PRESENT";
            })(Iso.TrackFragmentFlags || (Iso.TrackFragmentFlags = {}));
            var TrackFragmentFlags = Iso.TrackFragmentFlags;
            var TrackFragmentHeaderBox = (function (_super) {
                __extends(TrackFragmentHeaderBox, _super);
                function TrackFragmentHeaderBox(flags, trackId, baseDataOffset, sampleDescriptionIndex, defaultSampleDuration, defaultSampleSize, defaultSampleFlags) {
                    _super.call(this, 'tfhd', 0, flags);
                    this.trackId = trackId;
                    this.baseDataOffset = baseDataOffset;
                    this.sampleDescriptionIndex = sampleDescriptionIndex;
                    this.defaultSampleDuration = defaultSampleDuration;
                    this.defaultSampleSize = defaultSampleSize;
                    this.defaultSampleFlags = defaultSampleFlags;
                }
                TrackFragmentHeaderBox.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset) + 4;
                    var flags = this.flags;
                    if (!!(flags & 1 /* BASE_DATA_OFFSET_PRESENT */)) {
                        size += 8;
                    }
                    if (!!(flags & 2 /* SAMPLE_DESCRIPTION_INDEX_PRESENT */)) {
                        size += 4;
                    }
                    if (!!(flags & 8 /* DEFAULT_SAMPLE_DURATION_PRESENT */)) {
                        size += 4;
                    }
                    if (!!(flags & 16 /* DEFAULT_SAMPLE_SIZE_PRESENT */)) {
                        size += 4;
                    }
                    if (!!(flags & 32 /* DEFAULT_SAMPLE_FLAGS_PRESENT */)) {
                        size += 4;
                    }
                    return (this.size = size);
                };
                TrackFragmentHeaderBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    var flags = this.flags;
                    writeInt32(data, this.offset + offset, this.trackId);
                    offset += 4;
                    if (!!(flags & 1 /* BASE_DATA_OFFSET_PRESENT */)) {
                        writeInt32(data, this.offset + offset, 0);
                        writeInt32(data, this.offset + offset + 4, this.baseDataOffset);
                        offset += 8;
                    }
                    if (!!(flags & 2 /* SAMPLE_DESCRIPTION_INDEX_PRESENT */)) {
                        writeInt32(data, this.offset + offset, this.sampleDescriptionIndex);
                        offset += 4;
                    }
                    if (!!(flags & 8 /* DEFAULT_SAMPLE_DURATION_PRESENT */)) {
                        writeInt32(data, this.offset + offset, this.defaultSampleDuration);
                        offset += 4;
                    }
                    if (!!(flags & 16 /* DEFAULT_SAMPLE_SIZE_PRESENT */)) {
                        writeInt32(data, this.offset + offset, this.defaultSampleSize);
                        offset += 4;
                    }
                    if (!!(flags & 32 /* DEFAULT_SAMPLE_FLAGS_PRESENT */)) {
                        writeInt32(data, this.offset + offset, this.defaultSampleFlags);
                        offset += 4;
                    }
                    return offset;
                };
                return TrackFragmentHeaderBox;
            })(FullBox);
            Iso.TrackFragmentHeaderBox = TrackFragmentHeaderBox;
            var TrackFragmentBaseMediaDecodeTimeBox = (function (_super) {
                __extends(TrackFragmentBaseMediaDecodeTimeBox, _super);
                function TrackFragmentBaseMediaDecodeTimeBox(baseMediaDecodeTime) {
                    _super.call(this, 'tfdt', 0, 0);
                    this.baseMediaDecodeTime = baseMediaDecodeTime;
                }
                TrackFragmentBaseMediaDecodeTimeBox.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 4;
                    return this.size;
                };
                TrackFragmentBaseMediaDecodeTimeBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, this.baseMediaDecodeTime);
                    return offset + 4;
                };
                return TrackFragmentBaseMediaDecodeTimeBox;
            })(FullBox);
            Iso.TrackFragmentBaseMediaDecodeTimeBox = TrackFragmentBaseMediaDecodeTimeBox;
            var TrackFragmentBox = (function (_super) {
                __extends(TrackFragmentBox, _super);
                function TrackFragmentBox(header, decodeTime, run) {
                    _super.call(this, 'traf', [header, decodeTime, run]);
                    this.header = header;
                    this.decodeTime = decodeTime;
                    this.run = run;
                }
                return TrackFragmentBox;
            })(BoxContainerBox);
            Iso.TrackFragmentBox = TrackFragmentBox;
            (function (SampleFlags) {
                SampleFlags[SampleFlags["IS_LEADING_MASK"] = 0x0C000000] = "IS_LEADING_MASK";
                SampleFlags[SampleFlags["SAMPLE_DEPENDS_ON_MASK"] = 0x03000000] = "SAMPLE_DEPENDS_ON_MASK";
                SampleFlags[SampleFlags["SAMPLE_DEPENDS_ON_OTHER"] = 0x01000000] = "SAMPLE_DEPENDS_ON_OTHER";
                SampleFlags[SampleFlags["SAMPLE_DEPENDS_ON_NO_OTHERS"] = 0x02000000] = "SAMPLE_DEPENDS_ON_NO_OTHERS";
                SampleFlags[SampleFlags["SAMPLE_IS_DEPENDED_ON_MASK"] = 0x00C00000] = "SAMPLE_IS_DEPENDED_ON_MASK";
                SampleFlags[SampleFlags["SAMPLE_HAS_REDUNDANCY_MASK"] = 0x00300000] = "SAMPLE_HAS_REDUNDANCY_MASK";
                SampleFlags[SampleFlags["SAMPLE_PADDING_VALUE_MASK"] = 0x000E0000] = "SAMPLE_PADDING_VALUE_MASK";
                SampleFlags[SampleFlags["SAMPLE_IS_NOT_SYNC"] = 0x00010000] = "SAMPLE_IS_NOT_SYNC";
                SampleFlags[SampleFlags["SAMPLE_DEGRADATION_PRIORITY_MASK"] = 0x0000FFFF] = "SAMPLE_DEGRADATION_PRIORITY_MASK";
            })(Iso.SampleFlags || (Iso.SampleFlags = {}));
            var SampleFlags = Iso.SampleFlags;
            (function (TrackRunFlags) {
                TrackRunFlags[TrackRunFlags["DATA_OFFSET_PRESENT"] = 0x000001] = "DATA_OFFSET_PRESENT";
                TrackRunFlags[TrackRunFlags["FIRST_SAMPLE_FLAGS_PRESENT"] = 0x000004] = "FIRST_SAMPLE_FLAGS_PRESENT";
                TrackRunFlags[TrackRunFlags["SAMPLE_DURATION_PRESENT"] = 0x000100] = "SAMPLE_DURATION_PRESENT";
                TrackRunFlags[TrackRunFlags["SAMPLE_SIZE_PRESENT"] = 0x000200] = "SAMPLE_SIZE_PRESENT";
                TrackRunFlags[TrackRunFlags["SAMPLE_FLAGS_PRESENT"] = 0x000400] = "SAMPLE_FLAGS_PRESENT";
                TrackRunFlags[TrackRunFlags["SAMPLE_COMPOSITION_TIME_OFFSET"] = 0x000800] = "SAMPLE_COMPOSITION_TIME_OFFSET";
            })(Iso.TrackRunFlags || (Iso.TrackRunFlags = {}));
            var TrackRunFlags = Iso.TrackRunFlags;
            var TrackRunBox = (function (_super) {
                __extends(TrackRunBox, _super);
                function TrackRunBox(flags, samples, dataOffset, firstSampleFlags) {
                    _super.call(this, 'trun', 1, flags);
                    this.samples = samples;
                    this.dataOffset = dataOffset;
                    this.firstSampleFlags = firstSampleFlags;
                }
                TrackRunBox.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset) + 4;
                    var samplesCount = this.samples.length;
                    var flags = this.flags;
                    if (!!(flags & 1 /* DATA_OFFSET_PRESENT */)) {
                        size += 4;
                    }
                    if (!!(flags & 4 /* FIRST_SAMPLE_FLAGS_PRESENT */)) {
                        size += 4;
                    }
                    if (!!(flags & 256 /* SAMPLE_DURATION_PRESENT */)) {
                        size += 4 * samplesCount;
                    }
                    if (!!(flags & 512 /* SAMPLE_SIZE_PRESENT */)) {
                        size += 4 * samplesCount;
                    }
                    if (!!(flags & 1024 /* SAMPLE_FLAGS_PRESENT */)) {
                        size += 4 * samplesCount;
                    }
                    if (!!(flags & 2048 /* SAMPLE_COMPOSITION_TIME_OFFSET */)) {
                        size += 4 * samplesCount;
                    }
                    return (this.size = size);
                };
                TrackRunBox.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    var samplesCount = this.samples.length;
                    var flags = this.flags;
                    writeInt32(data, this.offset + offset, samplesCount);
                    offset += 4;
                    if (!!(flags & 1 /* DATA_OFFSET_PRESENT */)) {
                        writeInt32(data, this.offset + offset, this.dataOffset);
                        offset += 4;
                    }
                    if (!!(flags & 4 /* FIRST_SAMPLE_FLAGS_PRESENT */)) {
                        writeInt32(data, this.offset + offset, this.firstSampleFlags);
                        offset += 4;
                    }
                    for (var i = 0; i < samplesCount; i++) {
                        var sample = this.samples[i];
                        if (!!(flags & 256 /* SAMPLE_DURATION_PRESENT */)) {
                            writeInt32(data, this.offset + offset, sample.duration);
                            offset += 4;
                        }
                        if (!!(flags & 512 /* SAMPLE_SIZE_PRESENT */)) {
                            writeInt32(data, this.offset + offset, sample.size);
                            offset += 4;
                        }
                        if (!!(flags & 1024 /* SAMPLE_FLAGS_PRESENT */)) {
                            writeInt32(data, this.offset + offset, sample.flags);
                            offset += 4;
                        }
                        if (!!(flags & 2048 /* SAMPLE_COMPOSITION_TIME_OFFSET */)) {
                            writeInt32(data, this.offset + offset, sample.compositionTimeOffset);
                            offset += 4;
                        }
                    }
                    return offset;
                };
                return TrackRunBox;
            })(FullBox);
            Iso.TrackRunBox = TrackRunBox;
            var MovieFragmentBox = (function (_super) {
                __extends(MovieFragmentBox, _super);
                function MovieFragmentBox(header, trafs) {
                    _super.call(this, 'moof', concatArrays([header], trafs));
                    this.header = header;
                    this.trafs = trafs;
                }
                return MovieFragmentBox;
            })(BoxContainerBox);
            Iso.MovieFragmentBox = MovieFragmentBox;
            var MediaDataBox = (function (_super) {
                __extends(MediaDataBox, _super);
                function MediaDataBox(chunks) {
                    _super.call(this, 'mdat');
                    this.chunks = chunks;
                }
                MediaDataBox.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset);
                    this.chunks.forEach(function (chunk) {
                        size += chunk.length;
                    });
                    return (this.size = size);
                };
                MediaDataBox.prototype.write = function (data) {
                    var _this = this;
                    var offset = _super.prototype.write.call(this, data);
                    this.chunks.forEach(function (chunk) {
                        data.set(chunk, _this.offset + offset);
                        offset += chunk.length;
                    }, this);
                    return offset;
                };
                return MediaDataBox;
            })(Box);
            Iso.MediaDataBox = MediaDataBox;
            var SampleEntry = (function (_super) {
                __extends(SampleEntry, _super);
                function SampleEntry(format, dataReferenceIndex) {
                    _super.call(this, format);
                    this.dataReferenceIndex = dataReferenceIndex;
                }
                SampleEntry.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + 8;
                    return this.size;
                };
                SampleEntry.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, 0);
                    writeInt32(data, this.offset + offset + 4, this.dataReferenceIndex);
                    return offset + 8;
                };
                return SampleEntry;
            })(Box);
            Iso.SampleEntry = SampleEntry;
            var AudioSampleEntry = (function (_super) {
                __extends(AudioSampleEntry, _super);
                function AudioSampleEntry(codingName, dataReferenceIndex, channelCount, sampleSize, sampleRate, otherBoxes) {
                    if (channelCount === void 0) { channelCount = 2; }
                    if (sampleSize === void 0) { sampleSize = 16; }
                    if (sampleRate === void 0) { sampleRate = 44100; }
                    if (otherBoxes === void 0) { otherBoxes = null; }
                    _super.call(this, codingName, dataReferenceIndex);
                    this.channelCount = channelCount;
                    this.sampleSize = sampleSize;
                    this.sampleRate = sampleRate;
                    this.otherBoxes = otherBoxes;
                }
                AudioSampleEntry.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset) + 20;
                    this.otherBoxes && this.otherBoxes.forEach(function (box) {
                        size += box.layout(offset + size);
                    });
                    return (this.size = size);
                };
                AudioSampleEntry.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, 0);
                    writeInt32(data, this.offset + offset + 4, 0);
                    writeInt32(data, this.offset + offset + 8, (this.channelCount << 16) | this.sampleSize);
                    writeInt32(data, this.offset + offset + 12, 0);
                    writeInt32(data, this.offset + offset + 16, (this.sampleRate << 16));
                    offset += 20;
                    this.otherBoxes && this.otherBoxes.forEach(function (box) {
                        offset += box.write(data);
                    });
                    return offset;
                };
                return AudioSampleEntry;
            })(SampleEntry);
            Iso.AudioSampleEntry = AudioSampleEntry;
            Iso.COLOR_NO_ALPHA_VIDEO_SAMPLE_DEPTH = 0x0018;
            var VideoSampleEntry = (function (_super) {
                __extends(VideoSampleEntry, _super);
                function VideoSampleEntry(codingName, dataReferenceIndex, width, height, compressorName, horizResolution, vertResolution, frameCount, depth, otherBoxes) {
                    if (compressorName === void 0) { compressorName = ''; }
                    if (horizResolution === void 0) { horizResolution = 72; }
                    if (vertResolution === void 0) { vertResolution = 72; }
                    if (frameCount === void 0) { frameCount = 1; }
                    if (depth === void 0) { depth = Iso.COLOR_NO_ALPHA_VIDEO_SAMPLE_DEPTH; }
                    if (otherBoxes === void 0) { otherBoxes = null; }
                    _super.call(this, codingName, dataReferenceIndex);
                    this.width = width;
                    this.height = height;
                    this.compressorName = compressorName;
                    this.horizResolution = horizResolution;
                    this.vertResolution = vertResolution;
                    this.frameCount = frameCount;
                    this.depth = depth;
                    this.otherBoxes = otherBoxes;
                    if (compressorName.length > 31) {
                        throw new Error('invalid compressor name');
                    }
                }
                VideoSampleEntry.prototype.layout = function (offset) {
                    var size = _super.prototype.layout.call(this, offset) + 16 + 12 + 4 + 2 + 32 + 2 + 2;
                    this.otherBoxes && this.otherBoxes.forEach(function (box) {
                        size += box.layout(offset + size);
                    });
                    return (this.size = size);
                };
                VideoSampleEntry.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    writeInt32(data, this.offset + offset, 0);
                    writeInt32(data, this.offset + offset + 4, 0);
                    writeInt32(data, this.offset + offset + 8, 0);
                    writeInt32(data, this.offset + offset + 12, 0);
                    offset += 16;
                    writeInt32(data, this.offset + offset, (this.width << 16) | this.height);
                    writeInt32(data, this.offset + offset + 4, encodeFloat_16_16(this.horizResolution));
                    writeInt32(data, this.offset + offset + 8, encodeFloat_16_16(this.vertResolution));
                    offset += 12;
                    writeInt32(data, this.offset + offset, 0);
                    writeInt32(data, this.offset + offset + 4, (this.frameCount << 16));
                    offset += 6;
                    data[this.offset + offset] = this.compressorName.length;
                    for (var i = 0; i < 31; i++) {
                        data[this.offset + offset + i + 1] = i < this.compressorName.length ? (this.compressorName.charCodeAt(i) & 127) : 0;
                    }
                    offset += 32;
                    writeInt32(data, this.offset + offset, (this.depth << 16) | 0xFFFF);
                    offset += 4;
                    this.otherBoxes && this.otherBoxes.forEach(function (box) {
                        offset += box.write(data);
                    });
                    return offset;
                };
                return VideoSampleEntry;
            })(SampleEntry);
            Iso.VideoSampleEntry = VideoSampleEntry;
            var RawTag = (function (_super) {
                __extends(RawTag, _super);
                function RawTag(type, data) {
                    _super.call(this, type);
                    this.data = data;
                }
                RawTag.prototype.layout = function (offset) {
                    this.size = _super.prototype.layout.call(this, offset) + this.data.length;
                    return this.size;
                };
                RawTag.prototype.write = function (data) {
                    var offset = _super.prototype.write.call(this, data);
                    data.set(this.data, this.offset + offset);
                    return offset + this.data.length;
                };
                return RawTag;
            })(Box);
            Iso.RawTag = RawTag;
        })(Iso = MP4.Iso || (MP4.Iso = {}));
    })(MP4 = RtmpJs.MP4 || (RtmpJs.MP4 = {}));
})(RtmpJs || (RtmpJs = {}));
var RtmpJs;
(function (RtmpJs) {
    var MP4;
    (function (MP4) {
        function hex(s) {
            var len = s.length >> 1;
            var arr = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                arr[i] = parseInt(s.substr(i * 2, 2), 16);
            }
            return arr;
        }
        var SOUNDRATES = [5500, 11025, 22050, 44100];
        var SOUNDFORMATS = ['PCM', 'ADPCM', 'MP3', 'PCM le', 'Nellymouser16', 'Nellymouser8', 'Nellymouser', 'G.711 A-law', 'G.711 mu-law', null, 'AAC', 'Speex', 'MP3 8khz'];
        var MP3_SOUND_CODEC_ID = 2;
        var AAC_SOUND_CODEC_ID = 10;
        var AudioPacketType;
        (function (AudioPacketType) {
            AudioPacketType[AudioPacketType["HEADER"] = 0] = "HEADER";
            AudioPacketType[AudioPacketType["RAW"] = 1] = "RAW";
        })(AudioPacketType || (AudioPacketType = {}));
        function parseAudiodata(data) {
            var i = 0;
            var packetType = 1 /* RAW */;
            var flags = data[i];
            var codecId = flags >> 4;
            var soundRateId = (flags >> 2) & 3;
            var sampleSize = flags & 2 ? 16 : 8;
            var channels = flags & 1 ? 2 : 1;
            var samples;
            i++;
            switch (codecId) {
                case AAC_SOUND_CODEC_ID:
                    var type = data[i++];
                    packetType = type;
                    samples = 1024;
                    break;
                case MP3_SOUND_CODEC_ID:
                    var version = (data[i + 1] >> 3) & 3;
                    var layer = (data[i + 1] >> 1) & 3;
                    samples = layer === 1 ? (version === 3 ? 1152 : 576) : (layer === 3 ? 384 : 1152);
                    break;
            }
            return {
                codecDescription: SOUNDFORMATS[codecId],
                codecId: codecId,
                data: data.subarray(i),
                rate: SOUNDRATES[soundRateId],
                size: sampleSize,
                channels: channels,
                samples: samples,
                packetType: packetType
            };
        }
        var VIDEOCODECS = [null, 'JPEG', 'Sorenson', 'Screen', 'VP6', 'VP6 alpha', 'Screen2', 'AVC'];
        var VP6_VIDEO_CODEC_ID = 4;
        var AVC_VIDEO_CODEC_ID = 7;
        var VideoFrameType;
        (function (VideoFrameType) {
            VideoFrameType[VideoFrameType["KEY"] = 1] = "KEY";
            VideoFrameType[VideoFrameType["INNER"] = 2] = "INNER";
            VideoFrameType[VideoFrameType["DISPOSABLE"] = 3] = "DISPOSABLE";
            VideoFrameType[VideoFrameType["GENERATED"] = 4] = "GENERATED";
            VideoFrameType[VideoFrameType["INFO"] = 5] = "INFO";
        })(VideoFrameType || (VideoFrameType = {}));
        var VideoPacketType;
        (function (VideoPacketType) {
            VideoPacketType[VideoPacketType["HEADER"] = 0] = "HEADER";
            VideoPacketType[VideoPacketType["NALU"] = 1] = "NALU";
            VideoPacketType[VideoPacketType["END"] = 2] = "END";
        })(VideoPacketType || (VideoPacketType = {}));
        function parseVideodata(data) {
            var i = 0;
            var frameType = data[i] >> 4;
            var codecId = data[i] & 15;
            i++;
            var result = {
                frameType: frameType,
                codecId: codecId,
                codecDescription: VIDEOCODECS[codecId]
            };
            switch (codecId) {
                case AVC_VIDEO_CODEC_ID:
                    var type = data[i++];
                    result.packetType = type;
                    result.compositionTime = ((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8)) >> 8;
                    i += 3;
                    break;
                case VP6_VIDEO_CODEC_ID:
                    result.packetType = 1 /* NALU */;
                    result.horizontalOffset = (data[i] >> 4) & 15;
                    result.verticalOffset = data[i] & 15;
                    result.compositionTime = 0;
                    i++;
                    break;
            }
            result.data = data.subarray(i);
            return result;
        }
        var AUDIO_PACKET = 8;
        var VIDEO_PACKET = 9;
        var MAX_PACKETS_IN_CHUNK = 200;
        var SPLIT_AT_KEYFRAMES = false;
        var MP4MuxState;
        (function (MP4MuxState) {
            MP4MuxState[MP4MuxState["CAN_GENERATE_HEADER"] = 0] = "CAN_GENERATE_HEADER";
            MP4MuxState[MP4MuxState["NEED_HEADER_DATA"] = 1] = "NEED_HEADER_DATA";
            MP4MuxState[MP4MuxState["MAIN_PACKETS"] = 2] = "MAIN_PACKETS";
        })(MP4MuxState || (MP4MuxState = {}));
        var MP4Mux = (function () {
            function MP4Mux(metadata) {
                var _this = this;
                this.oncodecinfo = function (codecs) {
                };
                this.ondata = function (data) {
                    throw new Error('MP4Mux.ondata is not set');
                };
                this.metadata = metadata;
                this.trackStates = this.metadata.tracks.map(function (t, index) {
                    var state = {
                        trackId: index + 1,
                        trackInfo: t,
                        cachedDuration: 0,
                        samplesProcessed: 0,
                        initializationData: []
                    };
                    if (_this.metadata.audioTrackId === index) {
                        _this.audioTrackState = state;
                    }
                    if (_this.metadata.videoTrackId === index) {
                        _this.videoTrackState = state;
                    }
                    return state;
                }, this);
                this._checkIfNeedHeaderData();
                this.filePos = 0;
                this.cachedPackets = [];
                this.chunkIndex = 0;
            }
            MP4Mux.prototype.pushPacket = function (type, data, timestamp) {
                if (this.state === 0 /* CAN_GENERATE_HEADER */) {
                    this._tryGenerateHeader();
                }
                switch (type) {
                    case AUDIO_PACKET:
                        var audioTrack = this.audioTrackState;
                        var audioPacket = parseAudiodata(data);
                        if (!audioTrack || audioTrack.trackInfo.codecId !== audioPacket.codecId) {
                            throw new Error('Unexpected audio packet codec: ' + audioPacket.codecDescription);
                        }
                        switch (audioPacket.codecId) {
                            default:
                                throw new Error('Unsupported audio codec: ' + audioPacket.codecDescription);
                            case MP3_SOUND_CODEC_ID:
                                break;
                            case AAC_SOUND_CODEC_ID:
                                if (audioPacket.packetType === 0 /* HEADER */) {
                                    audioTrack.initializationData.push(audioPacket.data);
                                    return;
                                }
                                break;
                        }
                        this.cachedPackets.push({ packet: audioPacket, timestamp: timestamp, trackId: audioTrack.trackId });
                        break;
                    case VIDEO_PACKET:
                        var videoTrack = this.videoTrackState;
                        var videoPacket = parseVideodata(data);
                        if (!videoTrack || videoTrack.trackInfo.codecId !== videoPacket.codecId) {
                            throw new Error('Unexpected video packet codec: ' + videoPacket.codecDescription);
                        }
                        switch (videoPacket.codecId) {
                            default:
                                throw new Error('unsupported video codec: ' + videoPacket.codecDescription);
                            case VP6_VIDEO_CODEC_ID:
                                break;
                            case AVC_VIDEO_CODEC_ID:
                                if (videoPacket.packetType === 0 /* HEADER */) {
                                    videoTrack.initializationData.push(videoPacket.data);
                                    return;
                                }
                                break;
                        }
                        this.cachedPackets.push({ packet: videoPacket, timestamp: timestamp, trackId: videoTrack.trackId });
                        break;
                    default:
                        throw new Error('unknown packet type: ' + type);
                }
                if (this.state === 1 /* NEED_HEADER_DATA */) {
                    this._tryGenerateHeader();
                }
                if (this.cachedPackets.length >= MAX_PACKETS_IN_CHUNK && this.state === 2 /* MAIN_PACKETS */) {
                    this._chunk();
                }
            };
            MP4Mux.prototype.flush = function () {
                if (this.cachedPackets.length > 0) {
                    this._chunk();
                }
            };
            MP4Mux.prototype._checkIfNeedHeaderData = function () {
                if (this.trackStates.some(function (ts) { return ts.trackInfo.codecId === AAC_SOUND_CODEC_ID || ts.trackInfo.codecId === AVC_VIDEO_CODEC_ID; })) {
                    this.state = 1 /* NEED_HEADER_DATA */;
                }
                else {
                    this.state = 0 /* CAN_GENERATE_HEADER */;
                }
            };
            MP4Mux.prototype._tryGenerateHeader = function () {
                var allInitializationDataExists = this.trackStates.every(function (ts) {
                    switch (ts.trackInfo.codecId) {
                        case AAC_SOUND_CODEC_ID:
                        case AVC_VIDEO_CODEC_ID:
                            return ts.initializationData.length > 0;
                        default:
                            return true;
                    }
                });
                if (!allInitializationDataExists) {
                    return;
                }
                var brands = ['isom'];
                var audioDataReferenceIndex = 1, videoDataReferenceIndex = 1;
                var traks = [];
                for (var i = 0; i < this.trackStates.length; i++) {
                    var trackState = this.trackStates[i];
                    var trackInfo = trackState.trackInfo;
                    var sampleEntry;
                    switch (trackInfo.codecId) {
                        case AAC_SOUND_CODEC_ID:
                            var audioSpecificConfig = trackState.initializationData[0];
                            sampleEntry = new MP4.Iso.AudioSampleEntry('mp4a', audioDataReferenceIndex, trackInfo.channels, trackInfo.samplesize, trackInfo.samplerate);
                            var esdsData = new Uint8Array(41 + audioSpecificConfig.length);
                            esdsData.set(hex('0000000003808080'), 0);
                            esdsData[8] = 32 + audioSpecificConfig.length;
                            esdsData.set(hex('00020004808080'), 9);
                            esdsData[16] = 18 + audioSpecificConfig.length;
                            esdsData.set(hex('40150000000000FA000000000005808080'), 17);
                            esdsData[34] = audioSpecificConfig.length;
                            esdsData.set(audioSpecificConfig, 35);
                            esdsData.set(hex('068080800102'), 35 + audioSpecificConfig.length);
                            sampleEntry.otherBoxes = [
                                new MP4.Iso.RawTag('esds', esdsData)
                            ];
                            var objectType = (audioSpecificConfig[0] >> 3);
                            trackState.mimeTypeCodec = 'mp4a.40.' + objectType;
                            break;
                        case MP3_SOUND_CODEC_ID:
                            sampleEntry = new MP4.Iso.AudioSampleEntry('.mp3', audioDataReferenceIndex, trackInfo.channels, trackInfo.samplesize, trackInfo.samplerate);
                            trackState.mimeTypeCodec = 'mp3';
                            break;
                        case AVC_VIDEO_CODEC_ID:
                            var avcC = trackState.initializationData[0];
                            sampleEntry = new MP4.Iso.VideoSampleEntry('avc1', videoDataReferenceIndex, trackInfo.width, trackInfo.height);
                            sampleEntry.otherBoxes = [
                                new MP4.Iso.RawTag('avcC', avcC)
                            ];
                            var codecProfile = (avcC[1] << 16) | (avcC[2] << 8) | avcC[3];
                            trackState.mimeTypeCodec = 'avc1.' + (0x1000000 | codecProfile).toString(16).substr(1);
                            brands.push('iso2', 'avc1', 'mp41');
                            break;
                        case VP6_VIDEO_CODEC_ID:
                            sampleEntry = new MP4.Iso.VideoSampleEntry('VP6F', videoDataReferenceIndex, trackInfo.width, trackInfo.height);
                            sampleEntry.otherBoxes = [
                                new MP4.Iso.RawTag('glbl', hex('00'))
                            ];
                            trackState.mimeTypeCodec = 'avc1.42001E';
                            break;
                        default:
                            throw new Error('not supported track type');
                    }
                    var trak;
                    var trakFlags = 1 /* TRACK_ENABLED */ | 2 /* TRACK_IN_MOVIE */;
                    if (trackState === this.audioTrackState) {
                        trak = new MP4.Iso.TrackBox(new MP4.Iso.TrackHeaderBox(trakFlags, trackState.trackId, -1, 0, 0, 1.0, i), new MP4.Iso.MediaBox(new MP4.Iso.MediaHeaderBox(trackInfo.timescale, -1, trackInfo.language), new MP4.Iso.HandlerBox('soun', 'SoundHandler'), new MP4.Iso.MediaInformationBox(new MP4.Iso.SoundMediaHeaderBox(), new MP4.Iso.DataInformationBox(new MP4.Iso.DataReferenceBox([new MP4.Iso.DataEntryUrlBox(MP4.Iso.SELF_CONTAINED_DATA_REFERENCE_FLAG)])), new MP4.Iso.SampleTableBox(new MP4.Iso.SampleDescriptionBox([sampleEntry]), new MP4.Iso.RawTag('stts', hex('0000000000000000')), new MP4.Iso.RawTag('stsc', hex('0000000000000000')), new MP4.Iso.RawTag('stsz', hex('000000000000000000000000')), new MP4.Iso.RawTag('stco', hex('0000000000000000'))))));
                    }
                    else if (trackState === this.videoTrackState) {
                        trak = new MP4.Iso.TrackBox(new MP4.Iso.TrackHeaderBox(trakFlags, trackState.trackId, -1, trackInfo.width, trackInfo.height, 0, i), new MP4.Iso.MediaBox(new MP4.Iso.MediaHeaderBox(trackInfo.timescale, -1, trackInfo.language), new MP4.Iso.HandlerBox('vide', 'VideoHandler'), new MP4.Iso.MediaInformationBox(new MP4.Iso.VideoMediaHeaderBox(), new MP4.Iso.DataInformationBox(new MP4.Iso.DataReferenceBox([new MP4.Iso.DataEntryUrlBox(MP4.Iso.SELF_CONTAINED_DATA_REFERENCE_FLAG)])), new MP4.Iso.SampleTableBox(new MP4.Iso.SampleDescriptionBox([sampleEntry]), new MP4.Iso.RawTag('stts', hex('0000000000000000')), new MP4.Iso.RawTag('stsc', hex('0000000000000000')), new MP4.Iso.RawTag('stsz', hex('000000000000000000000000')), new MP4.Iso.RawTag('stco', hex('0000000000000000'))))));
                    }
                    traks.push(trak);
                }
                var mvex = new MP4.Iso.MovieExtendsBox(null, [
                    new MP4.Iso.TrackExtendsBox(1, 1, 0, 0, 0),
                    new MP4.Iso.TrackExtendsBox(2, 1, 0, 0, 0)
                ], null);
                var udat = new MP4.Iso.BoxContainerBox('udat', [
                    new MP4.Iso.MetaBox(new MP4.Iso.RawTag('hdlr', hex('00000000000000006D6469726170706C000000000000000000')), [new MP4.Iso.RawTag('ilst', hex('00000025A9746F6F0000001D6461746100000001000000004C61766635342E36332E313034'))])
                ]);
                var mvhd = new MP4.Iso.MovieHeaderBox(1000, 0, this.trackStates.length + 1);
                var moov = new MP4.Iso.MovieBox(mvhd, traks, mvex, udat);
                var ftype = new MP4.Iso.FileTypeBox('isom', 0x00000200, brands);
                var ftypeSize = ftype.layout(0);
                var moovSize = moov.layout(ftypeSize);
                var header = new Uint8Array(ftypeSize + moovSize);
                ftype.write(header);
                moov.write(header);
                this.oncodecinfo(this.trackStates.map(function (ts) { return ts.mimeTypeCodec; }));
                this.ondata(header);
                this.filePos += header.length;
                this.state = 2 /* MAIN_PACKETS */;
            };
            MP4Mux.prototype._chunk = function () {
                var cachedPackets = this.cachedPackets;
                if (SPLIT_AT_KEYFRAMES) {
                    var j = cachedPackets.length - 1;
                    var videoTrackId = this.videoTrackState.trackId;
                    while (j > 0 && (cachedPackets[j].trackId !== videoTrackId || cachedPackets[j].packet.frameType !== 1 /* KEY */)) {
                        j--;
                    }
                    if (j > 0) {
                        cachedPackets = cachedPackets.slice(0, j);
                    }
                }
                if (cachedPackets.length === 0) {
                    return;
                }
                var tdatParts = [];
                var tdatPosition = 0;
                var trafs = [];
                var trafDataStarts = [];
                for (var i = 0; i < this.trackStates.length; i++) {
                    var trackState = this.trackStates[i];
                    var trackInfo = trackState.trackInfo;
                    var trackId = trackState.trackId;
                    var trackPackets = cachedPackets.filter(function (cp) { return cp.trackId === trackId; });
                    if (trackPackets.length === 0) {
                        continue;
                    }
                    var tfdt = new MP4.Iso.TrackFragmentBaseMediaDecodeTimeBox(trackState.cachedDuration);
                    var tfhd;
                    var trun;
                    var trunSamples;
                    trafDataStarts.push(tdatPosition);
                    switch (trackInfo.codecId) {
                        case AAC_SOUND_CODEC_ID:
                        case MP3_SOUND_CODEC_ID:
                            trunSamples = [];
                            for (var j = 0; j < trackPackets.length; j++) {
                                var audioPacket = trackPackets[j].packet;
                                var audioFrameDuration = Math.round(audioPacket.samples * trackInfo.timescale / trackInfo.samplerate);
                                tdatParts.push(audioPacket.data);
                                tdatPosition += audioPacket.data.length;
                                trunSamples.push({ duration: audioFrameDuration, size: audioPacket.data.length });
                                trackState.samplesProcessed += audioPacket.samples;
                            }
                            var tfhdFlags = 32 /* DEFAULT_SAMPLE_FLAGS_PRESENT */;
                            tfhd = new MP4.Iso.TrackFragmentHeaderBox(tfhdFlags, trackId, 0, 0, 0, 0, 33554432 /* SAMPLE_DEPENDS_ON_NO_OTHERS */);
                            var trunFlags = 1 /* DATA_OFFSET_PRESENT */ | 256 /* SAMPLE_DURATION_PRESENT */ | 512 /* SAMPLE_SIZE_PRESENT */;
                            trun = new MP4.Iso.TrackRunBox(trunFlags, trunSamples, 0, 0);
                            trackState.cachedDuration = Math.round(trackState.samplesProcessed * trackInfo.timescale / trackInfo.samplerate);
                            break;
                        case AVC_VIDEO_CODEC_ID:
                        case VP6_VIDEO_CODEC_ID:
                            trunSamples = [];
                            var samplesProcessed = trackState.samplesProcessed;
                            var decodeTime = samplesProcessed * trackInfo.timescale / trackInfo.framerate;
                            var lastTime = Math.round(decodeTime);
                            for (var j = 0; j < trackPackets.length; j++) {
                                var videoPacket = trackPackets[j].packet;
                                samplesProcessed++;
                                var nextTime = Math.round(samplesProcessed * trackInfo.timescale / trackInfo.framerate);
                                var videoFrameDuration = nextTime - lastTime;
                                lastTime = nextTime;
                                var compositionTime = Math.round(samplesProcessed * trackInfo.timescale / trackInfo.framerate + videoPacket.compositionTime * trackInfo.timescale / 1000);
                                tdatParts.push(videoPacket.data);
                                tdatPosition += videoPacket.data.length;
                                var frameFlags = videoPacket.frameType === 1 /* KEY */ ? 33554432 /* SAMPLE_DEPENDS_ON_NO_OTHERS */ : (16777216 /* SAMPLE_DEPENDS_ON_OTHER */ | 65536 /* SAMPLE_IS_NOT_SYNC */);
                                trunSamples.push({ duration: videoFrameDuration, size: videoPacket.data.length, flags: frameFlags, compositionTimeOffset: (compositionTime - nextTime) });
                            }
                            var tfhdFlags = 32 /* DEFAULT_SAMPLE_FLAGS_PRESENT */;
                            tfhd = new MP4.Iso.TrackFragmentHeaderBox(tfhdFlags, trackId, 0, 0, 0, 0, 33554432 /* SAMPLE_DEPENDS_ON_NO_OTHERS */);
                            var trunFlags = 1 /* DATA_OFFSET_PRESENT */ | 256 /* SAMPLE_DURATION_PRESENT */ | 512 /* SAMPLE_SIZE_PRESENT */ | 1024 /* SAMPLE_FLAGS_PRESENT */ | 2048 /* SAMPLE_COMPOSITION_TIME_OFFSET */;
                            trun = new MP4.Iso.TrackRunBox(trunFlags, trunSamples, 0, 0);
                            trackState.cachedDuration = lastTime;
                            trackState.samplesProcessed = samplesProcessed;
                            break;
                        default:
                            throw new Error('Un codec');
                    }
                    var traf = new MP4.Iso.TrackFragmentBox(tfhd, tfdt, trun);
                    trafs.push(traf);
                }
                this.cachedPackets.splice(0, cachedPackets.length);
                var moofHeader = new MP4.Iso.MovieFragmentHeaderBox(++this.chunkIndex);
                var moof = new MP4.Iso.MovieFragmentBox(moofHeader, trafs);
                var moofSize = moof.layout(0);
                var mdat = new MP4.Iso.MediaDataBox(tdatParts);
                var mdatSize = mdat.layout(moofSize);
                var tdatOffset = moofSize + 8;
                for (var i = 0; i < trafs.length; i++) {
                    trafs[i].run.dataOffset = tdatOffset + trafDataStarts[i];
                }
                var chunk = new Uint8Array(moofSize + mdatSize);
                moof.write(chunk);
                mdat.write(chunk);
                this.ondata(chunk);
                this.filePos += chunk.length;
            };
            return MP4Mux;
        })();
        MP4.MP4Mux = MP4Mux;
        function parseFLVMetadata(metadata) {
            var tracks = [];
            var audioTrackId = -1;
            var videoTrackId = -1;
            var duration = +metadata.asGetPublicProperty('duration');
            var audioCodec, audioCodecId;
            var audioCodecCode = metadata.asGetPublicProperty('audiocodecid');
            switch (audioCodecCode) {
                case MP3_SOUND_CODEC_ID:
                case 'mp3':
                    audioCodec = 'mp3';
                    audioCodecId = MP3_SOUND_CODEC_ID;
                    break;
                case AAC_SOUND_CODEC_ID:
                case 'mp4a':
                    audioCodec = 'mp4a';
                    audioCodecId = AAC_SOUND_CODEC_ID;
                    break;
                default:
                    if (!isNaN(audioCodecCode)) {
                        throw new Error('Unsupported audio codec: ' + audioCodecCode);
                    }
                    audioCodec = null;
                    audioCodecId = -1;
                    break;
            }
            var videoCodec, videoCodecId;
            var videoCodecCode = metadata.asGetPublicProperty('videocodecid');
            switch (videoCodecCode) {
                case VP6_VIDEO_CODEC_ID:
                case 'vp6f':
                    videoCodec = 'vp6f';
                    videoCodecId = VP6_VIDEO_CODEC_ID;
                    break;
                case AVC_VIDEO_CODEC_ID:
                case 'avc1':
                    videoCodec = 'avc1';
                    videoCodecId = AVC_VIDEO_CODEC_ID;
                    break;
                default:
                    if (!isNaN(videoCodecCode)) {
                        throw new Error('Unsupported video codec: ' + videoCodecCode);
                    }
                    videoCodec = null;
                    videoCodecId = -1;
                    break;
            }
            var audioTrack = (audioCodec === null) ? null : {
                codecDescription: audioCodec,
                codecId: audioCodecId,
                language: 'und',
                timescale: +metadata.asGetPublicProperty('audiosamplerate') || 44100,
                samplerate: +metadata.asGetPublicProperty('audiosamplerate') || 44100,
                channels: +metadata.asGetPublicProperty('audiochannels') || 2,
                samplesize: 16
            };
            var videoTrack = (videoCodec === null) ? null : {
                codecDescription: videoCodec,
                codecId: videoCodecId,
                language: 'und',
                timescale: 60000,
                framerate: +metadata.asGetPublicProperty('videoframerate') || +metadata.asGetPublicProperty('framerate'),
                width: +metadata.asGetPublicProperty('width'),
                height: +metadata.asGetPublicProperty('height')
            };
            var trackInfos = metadata.asGetPublicProperty('trackinfo');
            if (trackInfos) {
                for (var i = 0; i < trackInfos.length; i++) {
                    var info = trackInfos[i];
                    var sampleDescription = info.asGetPublicProperty('sampledescription')[0];
                    if (sampleDescription.asGetPublicProperty('sampletype') === audioCodecCode) {
                        audioTrack.language = info.asGetPublicProperty('language');
                        audioTrack.timescale = +info.asGetPublicProperty('timescale');
                    }
                    else if (sampleDescription.asGetPublicProperty('sampletype') === videoCodecCode) {
                        videoTrack.language = info.asGetPublicProperty('language');
                        videoTrack.timescale = +info.asGetPublicProperty('timescale');
                    }
                }
            }
            if (videoTrack) {
                videoTrackId = tracks.length;
                tracks.push(videoTrack);
            }
            if (audioTrack) {
                audioTrackId = tracks.length;
                tracks.push(audioTrack);
            }
            return {
                tracks: tracks,
                duration: duration,
                audioTrackId: audioTrackId,
                videoTrackId: videoTrackId
            };
        }
        MP4.parseFLVMetadata = parseFLVMetadata;
    })(MP4 = RtmpJs.MP4 || (RtmpJs.MP4 = {}));
})(RtmpJs || (RtmpJs = {}));
var RtmpJs;
(function (RtmpJs) {
    var FLV;
    (function (FLV) {
        var FLVParser = (function () {
            function FLVParser() {
                this.state = 0;
                this.state = 0;
                this.buffer = new ArrayBuffer(1024);
                this.bufferSize = 0;
                this.previousTagSize = 0;
                this.onError = null;
                this.onHeader = null;
                this.onTag = null;
                this.onClose = null;
            }
            FLVParser.prototype.push = function (data) {
                var parseBuffer;
                if (this.bufferSize > 0) {
                    var needLength = this.bufferSize + data.length;
                    if (this.buffer.byteLength < needLength) {
                        var tmp = new Uint8Array(this.buffer, 0, this.bufferSize);
                        this.buffer = new ArrayBuffer(needLength);
                        parseBuffer = new Uint8Array(this.buffer);
                        parseBuffer.set(tmp);
                    }
                    else {
                        parseBuffer = new Uint8Array(this.buffer, 0, needLength);
                    }
                    parseBuffer.set(data, this.bufferSize);
                }
                else {
                    parseBuffer = data;
                }
                var parsed = 0, end = parseBuffer.length;
                while (parsed < end) {
                    var chunkParsed = 0;
                    switch (this.state) {
                        case 0:
                            if (parsed + 9 > end) {
                                break;
                            }
                            var headerLength = (parseBuffer[parsed + 5] << 24) | (parseBuffer[parsed + 6] << 16) | (parseBuffer[parsed + 7] << 8) | parseBuffer[parsed + 8];
                            if (headerLength < 9) {
                                this._error('Invalid header length');
                                break;
                            }
                            if (parsed + headerLength > end) {
                                break;
                            }
                            if (parseBuffer[parsed] !== 0x46 || parseBuffer[parsed + 1] !== 0x4C || parseBuffer[parsed + 2] !== 0x56 || parseBuffer[parsed + 3] !== 1 || (parseBuffer[parsed + 4] & 0xFA) !== 0) {
                                this._error('Invalid FLV header');
                                break;
                            }
                            var flags = parseBuffer[parsed + 4];
                            var extra = headerLength > 9 ? parseBuffer.subarray(parsed + 9, parsed + headerLength) : null;
                            this.onHeader && this.onHeader({
                                hasAudio: !!(flags & 4),
                                hasVideo: !!(flags & 1),
                                extra: extra
                            });
                            this.state = 2;
                            chunkParsed = headerLength;
                            break;
                        case 2:
                            if (parsed + 4 + 11 > end) {
                                break;
                            }
                            var previousTagSize = (parseBuffer[parsed + 0] << 24) | (parseBuffer[parsed + 1] << 16) | (parseBuffer[parsed + 2] << 8) | parseBuffer[parsed + 3];
                            if (previousTagSize !== this.previousTagSize) {
                                this._error('Invalid PreviousTagSize');
                                break;
                            }
                            var dataSize = (parseBuffer[parsed + 5] << 16) | (parseBuffer[parsed + 6] << 8) | parseBuffer[parsed + 7];
                            var dataOffset = parsed + 4 + 11;
                            if (dataOffset + dataSize > end) {
                                break;
                            }
                            var flags = parseBuffer[parsed + 4];
                            var streamID = (parseBuffer[parsed + 12] << 16) | (parseBuffer[parsed + 13] << 8) | parseBuffer[parsed + 14];
                            if (streamID !== 0 || (flags & 0xC0) !== 0) {
                                this._error('Invalid FLV tag');
                                break;
                            }
                            var dataType = flags & 0x1F;
                            if (dataType !== 8 && dataType !== 9 && dataType !== 18) {
                                this._error('Invalid FLV tag type');
                                break;
                            }
                            var needPreprocessing = !!(flags & 0x20);
                            var timestamp = (parseBuffer[parsed + 8] << 16) | (parseBuffer[parsed + 9] << 8) | parseBuffer[parsed + 10] | (parseBuffer[parseBuffer + 11] << 24);
                            this.onTag && this.onTag({
                                type: dataType,
                                needPreprocessing: needPreprocessing,
                                timestamp: timestamp,
                                data: parseBuffer.subarray(dataOffset, dataOffset + dataSize)
                            });
                            chunkParsed += 4 + 11 + dataSize;
                            this.previousTagSize = dataSize + 11;
                            this.state = 2;
                            break;
                        default:
                            throw new Error('invalid state');
                    }
                    if (chunkParsed === 0) {
                        break;
                    }
                    parsed += chunkParsed;
                }
                if (parsed < parseBuffer.length) {
                    this.bufferSize = parseBuffer.length - parsed;
                    if (this.buffer.byteLength < this.bufferSize) {
                        this.buffer = new ArrayBuffer(this.bufferSize);
                    }
                    new Uint8Array(this.buffer).set(parseBuffer.subarray(parsed));
                }
                else {
                    this.bufferSize = 0;
                }
            };
            FLVParser.prototype._error = function (message) {
                this.state = -1;
                this.onError && this.onError(message);
            };
            FLVParser.prototype.close = function () {
                this.onClose && this.onClose();
            };
            return FLVParser;
        })();
        FLV.FLVParser = FLVParser;
    })(FLV = RtmpJs.FLV || (RtmpJs.FLV = {}));
})(RtmpJs || (RtmpJs = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var PI = Math.PI;
                    var HalfPI = PI / 2;
                    var PacPI = PI + HalfPI;
                    var TwoPI = PI * 2;
                    function cos(angle) {
                        switch (angle) {
                            case HalfPI:
                            case -PacPI: return 0;
                            case PI:
                            case -PI: return -1;
                            case PacPI:
                            case -HalfPI: return 0;
                            default:
                                return Math.cos(angle);
                        }
                    }
                    function sin(angle) {
                        switch (angle) {
                            case HalfPI:
                            case -PacPI: return 1;
                            case PI:
                            case -PI: return 0;
                            case PacPI:
                            case -HalfPI: return -1;
                            default:
                                return Math.sin(angle);
                        }
                    }
                    var Matrix = (function (_super) {
                        __extends(Matrix, _super);
                        function Matrix(a, b, c, d, tx, ty) {
                            if (a === void 0) { a = 1; }
                            if (b === void 0) { b = 0; }
                            if (c === void 0) { c = 0; }
                            if (d === void 0) { d = 1; }
                            if (tx === void 0) { tx = 0; }
                            if (ty === void 0) { ty = 0; }
                            false && _super.call(this);
                            var m = this._data = new Float64Array(6);
                            m[0] = a;
                            m[1] = b;
                            m[2] = c;
                            m[3] = d;
                            m[4] = tx;
                            m[5] = ty;
                        }
                        Matrix.FromUntyped = function (object) {
                            return new flash.geom.Matrix(object.a, object.b, object.c, object.d, object.tx, object.ty);
                        };
                        Matrix.FromDataBuffer = function (input) {
                            return new flash.geom.Matrix(input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat());
                        };
                        Object.defineProperty(Matrix.prototype, "a", {
                            get: function () {
                                return this._data[0];
                            },
                            set: function (a) {
                                this._data[0] = a;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "b", {
                            get: function () {
                                return this._data[1];
                            },
                            set: function (b) {
                                this._data[1] = b;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "c", {
                            get: function () {
                                return this._data[2];
                            },
                            set: function (c) {
                                this._data[2] = c;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "d", {
                            get: function () {
                                return this._data[3];
                            },
                            set: function (d) {
                                this._data[3] = d;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "tx", {
                            get: function () {
                                return this._data[4];
                            },
                            set: function (tx) {
                                this._data[4] = tx;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "ty", {
                            get: function () {
                                return this._data[5];
                            },
                            set: function (ty) {
                                this._data[5] = ty;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Matrix.prototype.concat = function (other) {
                            var m = this._data, n = other._data;
                            var a = m[0] * n[0];
                            var b = 0.0;
                            var c = 0.0;
                            var d = m[3] * n[3];
                            var tx = m[4] * n[0] + n[4];
                            var ty = m[5] * n[3] + n[5];
                            if (m[1] !== 0.0 || m[2] !== 0.0 || n[1] !== 0.0 || n[2] !== 0.0) {
                                a += m[1] * n[2];
                                d += m[2] * n[1];
                                b += m[0] * n[1] + m[1] * n[3];
                                c += m[2] * n[0] + m[3] * n[2];
                                tx += m[5] * n[2];
                                ty += m[4] * n[1];
                            }
                            m[0] = a;
                            m[1] = b;
                            m[2] = c;
                            m[3] = d;
                            m[4] = tx;
                            m[5] = ty;
                        };
                        Matrix.prototype.preMultiply = function (other) {
                            this.preMultiplyInto(other, this);
                        };
                        Matrix.prototype.preMultiplyInto = function (other, target) {
                            var m = this._data, n = other._data, t = target._data;
                            var a = n[0] * m[0];
                            var b = 0.0;
                            var c = 0.0;
                            var d = n[3] * m[3];
                            var tx = n[4] * m[0] + m[4];
                            var ty = n[5] * m[3] + m[5];
                            if (n[1] !== 0.0 || n[2] !== 0.0 || m[1] !== 0.0 || m[2] !== 0.0) {
                                a += n[1] * m[2];
                                d += n[2] * m[1];
                                b += n[0] * m[1] + n[1] * m[3];
                                c += n[2] * m[0] + n[3] * m[2];
                                tx += n[5] * m[2];
                                ty += n[4] * m[1];
                            }
                            t[0] = a;
                            t[1] = b;
                            t[2] = c;
                            t[3] = d;
                            t[4] = tx;
                            t[5] = ty;
                        };
                        Matrix.prototype.invert = function () {
                            this.invertInto(this);
                        };
                        Matrix.prototype.invertInto = function (target) {
                            var m = this._data, t = target._data;
                            var b = m[1];
                            var c = m[2];
                            var tx = m[4];
                            var ty = m[5];
                            if (b === 0 && c === 0) {
                                var a = t[0] = 1 / m[0];
                                var d = t[3] = 1 / m[3];
                                t[1] = t[2] = 0;
                                t[4] = -a * tx;
                                t[5] = -d * ty;
                                return;
                            }
                            var a = m[0];
                            var d = m[3];
                            var determinant = a * d - b * c;
                            if (determinant === 0) {
                                target.identity();
                                return;
                            }
                            determinant = 1 / determinant;
                            var k = 0;
                            k = t[0] = d * determinant;
                            b = t[1] = -b * determinant;
                            c = t[2] = -c * determinant;
                            d = t[3] = a * determinant;
                            t[4] = -(k * tx + c * ty);
                            t[5] = -(b * tx + d * ty);
                        };
                        Matrix.prototype.identity = function () {
                            var m = this._data;
                            m[0] = m[3] = 1;
                            m[1] = m[2] = m[4] = m[5] = 0;
                        };
                        Matrix.prototype.createBox = function (scaleX, scaleY, rotation, tx, ty) {
                            if (rotation === void 0) { rotation = 0; }
                            if (tx === void 0) { tx = 0; }
                            if (ty === void 0) { ty = 0; }
                            var m = this._data;
                            if (rotation !== 0) {
                                var u = cos(rotation);
                                var v = sin(rotation);
                                m[0] = u * scaleX;
                                m[1] = v * scaleY;
                                m[2] = -v * scaleX;
                                m[3] = u * scaleY;
                            }
                            else {
                                m[0] = scaleX;
                                m[1] = 0;
                                m[2] = 0;
                                m[3] = scaleY;
                            }
                            m[4] = tx;
                            m[5] = ty;
                        };
                        Matrix.prototype.createGradientBox = function (width, height, rotation, tx, ty) {
                            if (rotation === void 0) { rotation = 0; }
                            if (tx === void 0) { tx = 0; }
                            if (ty === void 0) { ty = 0; }
                            this.createBox(width / 1638.4, height / 1638.4, rotation, tx + width / 2, ty + height / 2);
                        };
                        Matrix.prototype.rotate = function (angle) {
                            angle = +angle;
                            if (angle !== 0) {
                                var m = this._data;
                                var u = cos(angle);
                                var v = sin(angle);
                                var ta = m[0];
                                var tb = m[1];
                                var tc = m[2];
                                var td = m[3];
                                var ttx = m[4];
                                var tty = m[5];
                                m[0] = ta * u - tb * v;
                                m[1] = ta * v + tb * u;
                                m[2] = tc * u - td * v;
                                m[3] = tc * v + td * u;
                                m[4] = ttx * u - tty * v;
                                m[5] = ttx * v + tty * u;
                            }
                        };
                        Matrix.prototype.translate = function (dx, dy) {
                            var m = this._data;
                            m[4] += dx;
                            m[5] += dy;
                        };
                        Matrix.prototype.scale = function (sx, sy) {
                            var m = this._data;
                            if (sx !== 1) {
                                m[0] *= sx;
                                m[2] *= sx;
                                m[4] *= sx;
                            }
                            if (sy !== 1) {
                                m[1] *= sy;
                                m[3] *= sy;
                                m[5] *= sy;
                            }
                        };
                        Matrix.prototype.deltaTransformPoint = function (point) {
                            return new geom.Point(this._data[0] * point.x + this._data[2] * point.y, this._data[1] * point.x + this._data[3] * point.y);
                        };
                        Matrix.prototype.transformX = function (x, y) {
                            var m = this._data;
                            return m[0] * x + m[2] * y + m[4];
                        };
                        Matrix.prototype.transformY = function (x, y) {
                            var m = this._data;
                            return m[1] * x + m[3] * y + m[5];
                        };
                        Matrix.prototype.transformPoint = function (point) {
                            var m = this._data;
                            return new geom.Point(m[0] * point.x + m[2] * point.y + m[4], m[1] * point.x + m[3] * point.y + m[5]);
                        };
                        Matrix.prototype.transformPointInPlace = function (point) {
                            var m = this._data;
                            point.setTo(m[0] * point.x + m[2] * point.y + m[4], m[1] * point.x + m[3] * point.y + m[5]);
                            return point;
                        };
                        Matrix.prototype.transformBounds = function (bounds) {
                            var m = this._data;
                            var a = m[0];
                            var b = m[1];
                            var c = m[2];
                            var d = m[3];
                            var tx = m[4];
                            var ty = m[5];
                            var x = bounds.xMin;
                            var y = bounds.yMin;
                            var w = bounds.width;
                            var h = bounds.height;
                            var x0 = Math.round(a * x + c * y + tx);
                            var y0 = Math.round(b * x + d * y + ty);
                            var x1 = Math.round(a * (x + w) + c * y + tx);
                            var y1 = Math.round(b * (x + w) + d * y + ty);
                            var x2 = Math.round(a * (x + w) + c * (y + h) + tx);
                            var y2 = Math.round(b * (x + w) + d * (y + h) + ty);
                            var x3 = Math.round(a * x + c * (y + h) + tx);
                            var y3 = Math.round(b * x + d * (y + h) + ty);
                            var tmp = 0;
                            if (x0 > x1) {
                                tmp = x0;
                                x0 = x1;
                                x1 = tmp;
                            }
                            if (x2 > x3) {
                                tmp = x2;
                                x2 = x3;
                                x3 = tmp;
                            }
                            bounds.xMin = x0 < x2 ? x0 : x2;
                            bounds.xMax = x1 > x3 ? x1 : x3;
                            if (y0 > y1) {
                                tmp = y0;
                                y0 = y1;
                                y1 = tmp;
                            }
                            if (y2 > y3) {
                                tmp = y2;
                                y2 = y3;
                                y3 = tmp;
                            }
                            bounds.yMin = y0 < y2 ? y0 : y2;
                            bounds.yMax = y1 > y3 ? y1 : y3;
                        };
                        Matrix.prototype.getDeterminant = function () {
                            var m = this._data;
                            return m[0] * m[3] - m[1] * m[2];
                        };
                        Matrix.prototype.getScaleX = function () {
                            var m = this._data;
                            if (m[0] === 1 && m[1] === 0) {
                                return 1;
                            }
                            var result = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
                            return this.getDeterminant() < 0 ? -result : result;
                        };
                        Matrix.prototype.getScaleY = function () {
                            var m = this._data;
                            if (m[2] === 0 && m[3] === 1) {
                                return 1;
                            }
                            var result = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
                            return this.getDeterminant() < 0 ? -result : result;
                        };
                        Matrix.prototype.getAbsoluteScaleX = function () {
                            return Math.abs(this.getScaleX());
                        };
                        Matrix.prototype.getAbsoluteScaleY = function () {
                            return Math.abs(this.getScaleY());
                        };
                        Matrix.prototype.getSkewX = function () {
                            return Math.atan2(this._data[3], this._data[2]) - (Math.PI / 2);
                        };
                        Matrix.prototype.getSkewY = function () {
                            return Math.atan2(this._data[1], this._data[0]);
                        };
                        Matrix.prototype.copyFrom = function (other) {
                            var m = this._data, n = other._data;
                            m[0] = n[0];
                            m[1] = n[1];
                            m[2] = n[2];
                            m[3] = n[3];
                            m[4] = n[4];
                            m[5] = n[5];
                        };
                        Matrix.prototype.copyFromUntyped = function (object) {
                            var m = this._data;
                            m[0] = object.a;
                            m[1] = object.b;
                            m[2] = object.c;
                            m[3] = object.d;
                            m[4] = object.tx;
                            m[5] = object.ty;
                        };
                        Matrix.prototype.setTo = function (a, b, c, d, tx, ty) {
                            var m = this._data;
                            m[0] = a;
                            m[1] = b;
                            m[2] = c;
                            m[3] = d;
                            m[4] = tx;
                            m[5] = ty;
                        };
                        Matrix.prototype.toTwipsInPlace = function () {
                            var m = this._data;
                            m[4] = (m[4] * 20) | 0;
                            m[5] = (m[5] * 20) | 0;
                            return this;
                        };
                        Matrix.prototype.toPixelsInPlace = function () {
                            var m = this._data;
                            m[4] /= 20;
                            m[5] /= 20;
                            return this;
                        };
                        Matrix.prototype.copyRowTo = function (row, vector3D) {
                            var m = this._data;
                            row = row >>> 0;
                            if (row === 0) {
                                vector3D.x = m[0];
                                vector3D.y = m[2];
                                vector3D.z = m[4];
                            }
                            else if (row === 1) {
                                vector3D.x = m[1];
                                vector3D.y = m[3];
                                vector3D.z = m[5];
                            }
                            else if (row === 2) {
                                vector3D.x = 0;
                                vector3D.y = 0;
                                vector3D.z = 1;
                            }
                        };
                        Matrix.prototype.copyColumnTo = function (column, vector3D) {
                            var m = this._data;
                            column = column >>> 0;
                            if (column === 0) {
                                vector3D.x = m[0];
                                vector3D.y = m[1];
                                vector3D.z = 0;
                            }
                            else if (column === 1) {
                                vector3D.x = m[2];
                                vector3D.y = m[3];
                                vector3D.z = 0;
                            }
                            else if (column === 2) {
                                vector3D.x = m[4];
                                vector3D.y = m[5];
                                vector3D.z = 1;
                            }
                        };
                        Matrix.prototype.copyRowFrom = function (row, vector3D) {
                            var m = this._data;
                            row = row >>> 0;
                            if (row === 0) {
                                m[0] = vector3D.x;
                                m[2] = vector3D.y;
                                m[4] = vector3D.z;
                            }
                            else if (row === 1) {
                                m[1] = vector3D.x;
                                m[3] = vector3D.y;
                                m[5] = vector3D.z;
                            }
                        };
                        Matrix.prototype.copyColumnFrom = function (column, vector3D) {
                            var m = this._data;
                            column = column >>> 0;
                            if (column === 0) {
                                m[0] = vector3D.x;
                                m[2] = vector3D.y;
                                m[4] = vector3D.z;
                            }
                            else if (column === 1) {
                                m[1] = vector3D.x;
                                m[3] = vector3D.y;
                                m[5] = vector3D.z;
                            }
                        };
                        Matrix.prototype.updateScaleAndRotation = function (scaleX, scaleY, skewX, skewY) {
                            var m = this._data;
                            if ((skewX === 0 || skewX === TwoPI) && (skewY === 0 || skewY === TwoPI)) {
                                m[0] = scaleX;
                                m[1] = m[2] = 0;
                                m[3] = scaleY;
                                return;
                            }
                            var u = cos(skewX);
                            var v = sin(skewX);
                            if (skewX === skewY) {
                                m[0] = u * scaleX;
                                m[1] = v * scaleX;
                            }
                            else {
                                m[0] = cos(skewY) * scaleX;
                                m[1] = sin(skewY) * scaleX;
                            }
                            m[2] = -v * scaleY;
                            m[3] = u * scaleY;
                        };
                        Matrix.prototype.clone = function () {
                            var m = this._data;
                            return new flash.geom.Matrix(m[0], m[1], m[2], m[3], m[4], m[5]);
                        };
                        Matrix.prototype.equals = function (other) {
                            var m = this._data, n = other._data;
                            return m[0] === n[0] && m[1] === n[1] && m[2] === n[2] && m[3] === n[3] && m[4] === n[4] && m[5] === n[5];
                        };
                        Matrix.prototype.toString = function () {
                            var m = this._data;
                            return "(a=" + m[0] + ", b=" + m[1] + ", c=" + m[2] + ", d=" + m[3] + ", tx=" + m[4] + ", ty=" + m[5] + ")";
                        };
                        Matrix.prototype.writeExternal = function (output) {
                            var m = this._data;
                            output.writeFloat(m[0]);
                            output.writeFloat(m[1]);
                            output.writeFloat(m[2]);
                            output.writeFloat(m[3]);
                            output.writeFloat(m[4]);
                            output.writeFloat(m[5]);
                        };
                        Matrix.classInitializer = null;
                        Matrix.initializer = null;
                        Matrix.classSymbols = null;
                        Matrix.instanceSymbols = null;
                        Matrix.FROZEN_IDENTITY_MATRIX = Object.freeze(new Matrix());
                        Matrix.TEMP_MATRIX = new Matrix();
                        return Matrix;
                    })(AS.ASNative);
                    geom.Matrix = Matrix;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var precision = 1e-7;
                    var transposeTransform = new Uint32Array([
                        0,
                        4,
                        8,
                        12,
                        1,
                        5,
                        9,
                        13,
                        2,
                        6,
                        10,
                        14,
                        3,
                        7,
                        11,
                        15
                    ]);
                    function getRotationMatrix(theta, u, v, w, a, b, c) {
                        var u2 = u * u, v2 = v * v, w2 = w * w;
                        var L2 = u2 + v2 + w2, L = Math.sqrt(L2);
                        u /= L;
                        v /= L;
                        w /= L;
                        u2 /= L2;
                        v2 /= L2;
                        w2 /= L2;
                        var cos = Math.cos(theta), sin = Math.sin(theta);
                        return new flash.geom.Matrix3D([
                            u2 + (v2 + w2) * cos,
                            u * v * (1 - cos) + w * sin,
                            u * w * (1 - cos) - v * sin,
                            0,
                            u * v * (1 - cos) - w * sin,
                            v2 + (u2 + w2) * cos,
                            v * w * (1 - cos) + u * sin,
                            0,
                            u * w * (1 - cos) + v * sin,
                            v * w * (1 - cos) - u * sin,
                            w2 + (u2 + v2) * cos,
                            0,
                            (a * (v2 + w2) - u * (b * v + c * w)) * (1 - cos) + (b * w - c * v) * sin,
                            (b * (u2 + w2) - v * (a * u + c * w)) * (1 - cos) + (c * u - a * w) * sin,
                            (c * (u2 + v2) - w * (a * u + b * v)) * (1 - cos) + (a * v - b * u) * sin,
                            1
                        ]);
                    }
                    var Matrix3D = (function (_super) {
                        __extends(Matrix3D, _super);
                        function Matrix3D(v) {
                            if (v === void 0) { v = null; }
                            false && _super.call(this);
                            this._matrix = new Float32Array(16);
                            if (v && v.length >= 16) {
                                this.copyRawDataFrom(v, 0, false);
                            }
                            else {
                                this.identity();
                            }
                        }
                        Matrix3D.interpolate = function (thisMat, toMat, percent) {
                            thisMat = thisMat;
                            toMat = toMat;
                            percent = +percent;
                            notImplemented("public flash.geom.Matrix3D::static interpolate");
                            return;
                        };
                        Object.defineProperty(Matrix3D.prototype, "rawData", {
                            get: function () {
                                var result = new AS.Float64Vector();
                                this.copyRawDataTo(result, 0, false);
                                return result;
                            },
                            set: function (v) {
                                this.copyRawDataFrom(v, 0, false);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix3D.prototype, "position", {
                            get: function () {
                                var m = this._matrix;
                                return new flash.geom.Vector3D(m[12], m[13], m[14]);
                            },
                            set: function (pos) {
                                var m = this._matrix;
                                m[12] = pos.x;
                                m[13] = pos.y;
                                m[14] = pos.z;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix3D.prototype, "determinant", {
                            get: function () {
                                var m = this._matrix;
                                var m11 = m[0], m12 = m[4], m13 = m[8], m14 = m[12], m21 = m[1], m22 = m[5], m23 = m[9], m24 = m[13], m31 = m[2], m32 = m[6], m33 = m[10], m34 = m[14], m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
                                var d;
                                d = m11 * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)) - m21 * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)) + m31 * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)) - m41 * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
                                return d;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Matrix3D.prototype.clone = function () {
                            return new flash.geom.Matrix3D(this._matrix);
                        };
                        Matrix3D.prototype.copyToMatrix3D = function (dest) {
                            dest = dest;
                            dest._matrix.set(this._matrix);
                        };
                        Matrix3D.prototype.append = function (lhs) {
                            var ma = lhs._matrix, mb = this._matrix, m = this._matrix;
                            var ma11 = ma[0], ma12 = ma[4], ma13 = ma[8], ma14 = ma[12], ma21 = ma[1], ma22 = ma[5], ma23 = ma[9], ma24 = ma[13], ma31 = ma[2], ma32 = ma[6], ma33 = ma[10], ma34 = ma[14], ma41 = ma[3], ma42 = ma[7], ma43 = ma[11], ma44 = ma[15];
                            var mb11 = mb[0], mb12 = mb[4], mb13 = mb[8], mb14 = mb[12], mb21 = mb[1], mb22 = mb[5], mb23 = mb[9], mb24 = mb[13], mb31 = mb[2], mb32 = mb[6], mb33 = mb[10], mb34 = mb[14], mb41 = mb[3], mb42 = mb[7], mb43 = mb[11], mb44 = mb[15];
                            m[0] = ma11 * mb11 + ma12 * mb21 + ma13 * mb31 + ma14 * mb41;
                            m[1] = ma21 * mb11 + ma22 * mb21 + ma23 * mb31 + ma24 * mb41;
                            m[2] = ma31 * mb11 + ma32 * mb21 + ma33 * mb31 + ma34 * mb41;
                            m[3] = ma41 * mb11 + ma42 * mb21 + ma43 * mb31 + ma44 * mb41;
                            m[4] = ma11 * mb12 + ma12 * mb22 + ma13 * mb32 + ma14 * mb42;
                            m[5] = ma21 * mb12 + ma22 * mb22 + ma23 * mb32 + ma24 * mb42;
                            m[6] = ma31 * mb12 + ma32 * mb22 + ma33 * mb32 + ma34 * mb42;
                            m[7] = ma41 * mb12 + ma42 * mb22 + ma43 * mb32 + ma44 * mb42;
                            m[8] = ma11 * mb13 + ma12 * mb23 + ma13 * mb33 + ma14 * mb43;
                            m[9] = ma21 * mb13 + ma22 * mb23 + ma23 * mb33 + ma24 * mb43;
                            m[10] = ma31 * mb13 + ma32 * mb23 + ma33 * mb33 + ma34 * mb43;
                            m[11] = ma41 * mb13 + ma42 * mb23 + ma43 * mb33 + ma44 * mb43;
                            m[12] = ma11 * mb14 + ma12 * mb24 + ma13 * mb34 + ma14 * mb44;
                            m[13] = ma21 * mb14 + ma22 * mb24 + ma23 * mb34 + ma24 * mb44;
                            m[14] = ma31 * mb14 + ma32 * mb24 + ma33 * mb34 + ma34 * mb44;
                            m[15] = ma41 * mb14 + ma42 * mb24 + ma43 * mb34 + ma44 * mb44;
                        };
                        Matrix3D.prototype.prepend = function (rhs) {
                            var ma = this._matrix, mb = rhs._matrix, m = this._matrix;
                            var ma11 = ma[0], ma12 = ma[4], ma13 = ma[8], ma14 = ma[12], ma21 = ma[1], ma22 = ma[5], ma23 = ma[9], ma24 = ma[13], ma31 = ma[2], ma32 = ma[6], ma33 = ma[10], ma34 = ma[14], ma41 = ma[3], ma42 = ma[7], ma43 = ma[11], ma44 = ma[15];
                            var mb11 = mb[0], mb12 = mb[4], mb13 = mb[8], mb14 = mb[12], mb21 = mb[1], mb22 = mb[5], mb23 = mb[9], mb24 = mb[13], mb31 = mb[2], mb32 = mb[6], mb33 = mb[10], mb34 = mb[14], mb41 = mb[3], mb42 = mb[7], mb43 = mb[11], mb44 = mb[15];
                            m[0] = ma11 * mb11 + ma12 * mb21 + ma13 * mb31 + ma14 * mb41;
                            m[1] = ma21 * mb11 + ma22 * mb21 + ma23 * mb31 + ma24 * mb41;
                            m[2] = ma31 * mb11 + ma32 * mb21 + ma33 * mb31 + ma34 * mb41;
                            m[3] = ma41 * mb11 + ma42 * mb21 + ma43 * mb31 + ma44 * mb41;
                            m[4] = ma11 * mb12 + ma12 * mb22 + ma13 * mb32 + ma14 * mb42;
                            m[5] = ma21 * mb12 + ma22 * mb22 + ma23 * mb32 + ma24 * mb42;
                            m[6] = ma31 * mb12 + ma32 * mb22 + ma33 * mb32 + ma34 * mb42;
                            m[7] = ma41 * mb12 + ma42 * mb22 + ma43 * mb32 + ma44 * mb42;
                            m[8] = ma11 * mb13 + ma12 * mb23 + ma13 * mb33 + ma14 * mb43;
                            m[9] = ma21 * mb13 + ma22 * mb23 + ma23 * mb33 + ma24 * mb43;
                            m[10] = ma31 * mb13 + ma32 * mb23 + ma33 * mb33 + ma34 * mb43;
                            m[11] = ma41 * mb13 + ma42 * mb23 + ma43 * mb33 + ma44 * mb43;
                            m[12] = ma11 * mb14 + ma12 * mb24 + ma13 * mb34 + ma14 * mb44;
                            m[13] = ma21 * mb14 + ma22 * mb24 + ma23 * mb34 + ma24 * mb44;
                            m[14] = ma31 * mb14 + ma32 * mb24 + ma33 * mb34 + ma34 * mb44;
                            m[15] = ma41 * mb14 + ma42 * mb24 + ma43 * mb34 + ma44 * mb44;
                        };
                        Matrix3D.prototype.invert = function () {
                            var d = this.determinant;
                            if (Math.abs(d) < precision) {
                                return false;
                            }
                            d = 1 / d;
                            var m = this._matrix;
                            var m11 = m[0], m12 = m[1], m13 = m[2], m14 = m[3], m21 = m[4], m22 = m[5], m23 = m[6], m24 = m[7], m31 = m[8], m32 = m[9], m33 = m[10], m34 = m[11], m41 = m[12], m42 = m[13], m43 = m[14], m44 = m[15];
                            m[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
                            m[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
                            m[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
                            m[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
                            m[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
                            m[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
                            m[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
                            m[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
                            m[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
                            m[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
                            m[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
                            m[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
                            m[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
                            m[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
                            m[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
                            m[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
                            return true;
                        };
                        Matrix3D.prototype.identity = function () {
                            var m = this._matrix;
                            m[0] = m[5] = m[10] = m[15] = 1;
                            m[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0;
                        };
                        Matrix3D.prototype.decompose = function (orientationStyle) {
                            if (orientationStyle === void 0) { orientationStyle = "eulerAngles"; }
                            orientationStyle = asCoerceString(orientationStyle);
                            notImplemented("public flash.geom.Matrix3D::decompose");
                            return;
                        };
                        Matrix3D.prototype.recompose = function (components, orientationStyle) {
                            if (orientationStyle === void 0) { orientationStyle = "eulerAngles"; }
                            orientationStyle = asCoerceString(orientationStyle);
                            notImplemented("public flash.geom.Matrix3D::recompose");
                            return;
                        };
                        Matrix3D.prototype.appendTranslation = function (x, y, z) {
                            x = +x;
                            y = +y;
                            z = +z;
                            var m = this._matrix;
                            var m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
                            m[0] += x * m41;
                            m[1] += y * m41;
                            m[2] += z * m41;
                            m[4] += x * m42;
                            m[5] += y * m42;
                            m[6] += z * m42;
                            m[8] += x * m43;
                            m[9] += y * m43;
                            m[10] += z * m43;
                            m[12] += x * m44;
                            m[13] += y * m44;
                            m[14] += z * m44;
                        };
                        Matrix3D.prototype.appendRotation = function (degrees, axis, pivotPoint) {
                            if (pivotPoint === void 0) { pivotPoint = null; }
                            degrees = +degrees;
                            axis = axis;
                            pivotPoint = pivotPoint;
                            this.append(getRotationMatrix(degrees / 180 * Math.PI, axis.x, axis.y, axis.z, pivotPoint ? pivotPoint.x : 0, pivotPoint ? pivotPoint.y : 0, pivotPoint ? pivotPoint.z : 0));
                        };
                        Matrix3D.prototype.appendScale = function (xScale, yScale, zScale) {
                            xScale = +xScale;
                            yScale = +yScale;
                            zScale = +zScale;
                            var m = this._matrix;
                            m[0] *= xScale;
                            m[1] *= yScale;
                            m[2] *= zScale;
                            m[4] *= xScale;
                            m[5] *= yScale;
                            m[6] *= zScale;
                            m[8] *= xScale;
                            m[9] *= yScale;
                            m[10] *= zScale;
                            m[12] *= xScale;
                            m[13] *= yScale;
                            m[14] *= zScale;
                        };
                        Matrix3D.prototype.prependTranslation = function (x, y, z) {
                            x = +x;
                            y = +y;
                            z = +z;
                            var m = this._matrix;
                            var m11 = m[0], m12 = m[4], m13 = m[8], m14 = m[12], m21 = m[1], m22 = m[5], m23 = m[9], m24 = m[13], m31 = m[2], m32 = m[6], m33 = m[10], m34 = m[14], m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
                            m[12] += m11 * x + m12 * y + m13 * z;
                            m[13] += m21 * x + m22 * y + m23 * z;
                            m[14] += m31 * x + m32 * y + m33 * z;
                            m[15] += m41 * x + m42 * y + m43 * z;
                        };
                        Matrix3D.prototype.prependRotation = function (degrees, axis, pivotPoint) {
                            if (pivotPoint === void 0) { pivotPoint = null; }
                            degrees = +degrees;
                            axis = axis;
                            pivotPoint = pivotPoint;
                            this.prepend(getRotationMatrix(degrees / 180 * Math.PI, axis.x, axis.y, axis.z, pivotPoint ? pivotPoint.x : 0, pivotPoint ? pivotPoint.y : 0, pivotPoint ? pivotPoint.z : 0));
                        };
                        Matrix3D.prototype.prependScale = function (xScale, yScale, zScale) {
                            xScale = +xScale;
                            yScale = +yScale;
                            zScale = +zScale;
                            var m = this._matrix;
                            m[0] *= xScale;
                            m[1] *= xScale;
                            m[2] *= xScale;
                            m[3] *= xScale;
                            m[4] *= yScale;
                            m[5] *= yScale;
                            m[6] *= yScale;
                            m[7] *= yScale;
                            m[8] *= zScale;
                            m[9] *= zScale;
                            m[10] *= zScale;
                            m[11] *= zScale;
                        };
                        Matrix3D.prototype.transformVector = function (v) {
                            var m = this._matrix;
                            var x = v.x, y = v.y, z = v.z;
                            return new flash.geom.Vector3D(m[0] * x + m[4] * y + m[8] * z + m[12], m[1] * x + m[5] * y + m[9] * z + m[13], m[2] * x + m[6] * y + m[10] * z + m[14]);
                        };
                        Matrix3D.prototype.deltaTransformVector = function (v) {
                            var m = this._matrix;
                            var x = v.x, y = v.y, z = v.z;
                            return new flash.geom.Vector3D(m[0] * x + m[4] * y + m[8] * z, m[1] * x + m[5] * y + m[9] * z, m[2] * x + m[6] * y + m[10] * z);
                        };
                        Matrix3D.prototype.transformVectors = function (vin, vout) {
                            var m = this._matrix;
                            var m11 = m[0], m12 = m[4], m13 = m[8], m14 = m[12], m21 = m[1], m22 = m[5], m23 = m[9], m24 = m[13], m31 = m[2], m32 = m[6], m33 = m[10], m34 = m[14], m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
                            for (var i = 0; i < vin.length - 2; i += 3) {
                                var x = vin.asGetNumericProperty(i), y = vin.asGetNumericProperty(i + 1), z = vin.asGetNumericProperty(i + 2);
                                vout.push(m11 * x + m12 * y + m13 * z + m14);
                                vout.push(m21 * x + m22 * y + m23 * z + m24);
                                vout.push(m31 * x + m32 * y + m33 * z + m34);
                            }
                        };
                        Matrix3D.prototype.transpose = function () {
                            var m = this._matrix;
                            var tmp;
                            tmp = m[1];
                            m[1] = m[4];
                            m[4] = tmp;
                            tmp = m[2];
                            m[2] = m[8];
                            m[5] = tmp;
                            tmp = m[3];
                            m[3] = m[12];
                            m[12] = tmp;
                            tmp = m[6];
                            m[6] = m[9];
                            m[9] = tmp;
                            tmp = m[7];
                            m[7] = m[13];
                            m[13] = tmp;
                            tmp = m[11];
                            m[11] = m[14];
                            m[14] = tmp;
                        };
                        Matrix3D.prototype.pointAt = function (pos, at, up) {
                            if (at === void 0) { at = null; }
                            if (up === void 0) { up = null; }
                            pos = pos;
                            at = at;
                            up = up;
                            notImplemented("public flash.geom.Matrix3D::pointAt");
                            return;
                        };
                        Matrix3D.prototype.interpolateTo = function (toMat, percent) {
                            toMat = toMat;
                            percent = +percent;
                            notImplemented("public flash.geom.Matrix3D::interpolateTo");
                            return;
                        };
                        Matrix3D.prototype.copyFrom = function (sourceMatrix3D) {
                            sourceMatrix3D = sourceMatrix3D;
                            this._matrix.set(sourceMatrix3D._matrix);
                        };
                        Matrix3D.prototype.copyRawDataTo = function (vector, index, transpose) {
                            if (index === void 0) { index = 0; }
                            if (transpose === void 0) { transpose = false; }
                            vector = vector;
                            index = index >>> 0;
                            transpose = !!transpose;
                            var m = this._matrix;
                            if (transpose) {
                                for (var i = 0, j = index | 0; i < 16; i++, j++) {
                                    vector.asSetNumericProperty(j, m[transposeTransform[i]]);
                                }
                            }
                            else {
                                for (var i = 0, j = index | 0; i < 16; i++, j++) {
                                    vector.asSetNumericProperty(j, m[i]);
                                }
                            }
                        };
                        Matrix3D.prototype.copyRawDataFrom = function (vector, index, transpose) {
                            if (index === void 0) { index = 0; }
                            if (transpose === void 0) { transpose = false; }
                            vector = vector;
                            index = index >>> 0;
                            transpose = !!transpose;
                            var m = this._matrix;
                            if (transpose) {
                                for (var i = 0, j = index | 0; i < 16; i++, j++) {
                                    m[transposeTransform[i]] = vector.asGetNumericProperty(j) || 0;
                                }
                            }
                            else {
                                for (var i = 0, j = index | 0; i < 16; i++, j++) {
                                    m[i] = vector.asGetNumericProperty(j) || 0;
                                }
                            }
                        };
                        Matrix3D.prototype.copyRowTo = function (row, vector3D) {
                            row = row >>> 0;
                            vector3D = vector3D;
                            var offset = row | 0;
                            var m = this._matrix;
                            vector3D.x = m[offset];
                            vector3D.y = m[offset + 4];
                            vector3D.z = m[offset + 8];
                            vector3D.w = m[offset + 12];
                        };
                        Matrix3D.prototype.copyColumnTo = function (column, vector3D) {
                            column = column >>> 0;
                            vector3D = vector3D;
                            var offset = column << 2;
                            var m = this._matrix;
                            vector3D.x = m[offset];
                            vector3D.y = m[offset + 1];
                            vector3D.z = m[offset + 2];
                            vector3D.w = m[offset + 3];
                        };
                        Matrix3D.prototype.copyRowFrom = function (row, vector3D) {
                            row = row >>> 0;
                            vector3D = vector3D;
                            var offset = row | 0;
                            var m = this._matrix;
                            m[offset] = vector3D.x;
                            m[offset + 4] = vector3D.y;
                            m[offset + 8] = vector3D.z;
                            m[offset + 12] = vector3D.w;
                        };
                        Matrix3D.prototype.copyColumnFrom = function (column, vector3D) {
                            column = column >>> 0;
                            vector3D = vector3D;
                            var offset = column << 2;
                            var m = this._matrix;
                            m[offset] = vector3D.x;
                            m[offset + 1] = vector3D.y;
                            m[offset + 2] = vector3D.z;
                            m[offset + 3] = vector3D.w;
                        };
                        Matrix3D.classInitializer = null;
                        Matrix3D.initializer = null;
                        Matrix3D.classSymbols = null;
                        Matrix3D.instanceSymbols = null;
                        return Matrix3D;
                    })(AS.ASNative);
                    geom.Matrix3D = Matrix3D;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Orientation3D = (function (_super) {
                        __extends(Orientation3D, _super);
                        function Orientation3D() {
                            false && _super.call(this);
                            dummyConstructor("public flash.geom.Orientation3D");
                        }
                        Orientation3D.classInitializer = null;
                        Orientation3D.initializer = null;
                        Orientation3D.classSymbols = null;
                        Orientation3D.instanceSymbols = null;
                        Orientation3D.EULER_ANGLES = "eulerAngles";
                        Orientation3D.AXIS_ANGLE = "axisAngle";
                        Orientation3D.QUATERNION = "quaternion";
                        return Orientation3D;
                    })(AS.ASNative);
                    geom.Orientation3D = Orientation3D;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var PerspectiveProjection = (function (_super) {
                        __extends(PerspectiveProjection, _super);
                        function PerspectiveProjection() {
                            false && _super.call(this);
                            dummyConstructor("public flash.geom.PerspectiveProjection");
                        }
                        Object.defineProperty(PerspectiveProjection.prototype, "fieldOfView", {
                            get: function () {
                                notImplemented("public flash.geom.PerspectiveProjection::get fieldOfView");
                                return;
                            },
                            set: function (fieldOfViewAngleInDegrees) {
                                fieldOfViewAngleInDegrees = +fieldOfViewAngleInDegrees;
                                notImplemented("public flash.geom.PerspectiveProjection::set fieldOfView");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(PerspectiveProjection.prototype, "projectionCenter", {
                            get: function () {
                                notImplemented("public flash.geom.PerspectiveProjection::get projectionCenter");
                                return;
                            },
                            set: function (p) {
                                p = p;
                                notImplemented("public flash.geom.PerspectiveProjection::set projectionCenter");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(PerspectiveProjection.prototype, "focalLength", {
                            get: function () {
                                notImplemented("public flash.geom.PerspectiveProjection::get focalLength");
                                return;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public flash.geom.PerspectiveProjection::set focalLength");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        PerspectiveProjection.prototype.toMatrix3D = function () {
                            notImplemented("public flash.geom.PerspectiveProjection::toMatrix3D");
                            return;
                        };
                        PerspectiveProjection.classInitializer = null;
                        PerspectiveProjection.initializer = null;
                        PerspectiveProjection.classSymbols = null;
                        PerspectiveProjection.instanceSymbols = null;
                        return PerspectiveProjection;
                    })(AS.ASNative);
                    geom.PerspectiveProjection = PerspectiveProjection;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var Point = (function (_super) {
                        __extends(Point, _super);
                        function Point(x, y) {
                            if (x === void 0) { x = 0; }
                            if (y === void 0) { y = 0; }
                            false && _super.call(this);
                            this.x = +x;
                            this.y = +y;
                        }
                        Object.defineProperty(Point.prototype, "native_x", {
                            get: function () {
                                return this.x;
                            },
                            set: function (x) {
                                this.x = x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Point.prototype, "native_y", {
                            get: function () {
                                return this.y;
                            },
                            set: function (y) {
                                this.y = y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Point.prototype.Point = function (x, y) {
                            if (x === void 0) { x = 0; }
                            if (y === void 0) { y = 0; }
                            this.x = x;
                            this.y = y;
                        };
                        Object.defineProperty(Point.prototype, "length", {
                            get: function () {
                                return Math.sqrt(this.x * this.x + this.y * this.y);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Point.interpolate = function (p1, p2, f) {
                            var f1 = 1 - f;
                            return new Point(p1.x * f + p2.x * f1, p1.y * f + p2.y * f1);
                        };
                        Point.distance = function (p1, p2) {
                            var dx = p2.x - p1.x;
                            var dy = p2.y - p1.y;
                            return (dx === 0) ? Math.abs(dy) : (dy === 0) ? Math.abs(dx) : Math.sqrt(dx * dx + dy * dy);
                        };
                        Point.polar = function (length, angle) {
                            length = +length;
                            angle = +angle;
                            return new Point(length * Math.cos(angle), length * Math.sin(angle));
                        };
                        Point.prototype.clone = function () {
                            return new Point(this.x, this.y);
                        };
                        Point.prototype.offset = function (dx, dy) {
                            this.x += +dx;
                            this.y += +dy;
                        };
                        Point.prototype.equals = function (toCompare) {
                            return this.x === toCompare.x && this.y === toCompare.y;
                        };
                        Point.prototype.subtract = function (v) {
                            return new Point(this.x - v.x, this.y - v.y);
                        };
                        Point.prototype.add = function (v) {
                            return new Point(this.x + v.x, this.y + v.y);
                        };
                        Point.prototype.normalize = function (thickness) {
                            if (this.x !== 0 || this.y !== 0) {
                                var relativeThickness = +thickness / this.length;
                                this.x *= relativeThickness;
                                this.y *= relativeThickness;
                            }
                        };
                        Point.prototype.copyFrom = function (sourcePoint) {
                            this.x = sourcePoint.x;
                            this.y = sourcePoint.y;
                        };
                        Point.prototype.setTo = function (x, y) {
                            this.x = +x;
                            this.y = +y;
                        };
                        Point.prototype.toTwips = function () {
                            this.x = (this.x * 20) | 0;
                            this.y = (this.y * 20) | 0;
                            return this;
                        };
                        Point.prototype.toPixels = function () {
                            this.x /= 20;
                            this.y /= 20;
                            return this;
                        };
                        Point.prototype.round = function () {
                            this.x = Math.round(this.x);
                            this.y = Math.round(this.y);
                            return this;
                        };
                        Point.prototype.toString = function () {
                            return "(x=" + this.x + ", y=" + this.y + ")";
                        };
                        Point.classInitializer = null;
                        Point.initializer = null;
                        Point.classSymbols = null;
                        Point.instanceSymbols = null;
                        return Point;
                    })(AS.ASNative);
                    geom.Point = Point;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var Rectangle = (function (_super) {
                        __extends(Rectangle, _super);
                        function Rectangle(x, y, width, height) {
                            if (x === void 0) { x = 0; }
                            if (y === void 0) { y = 0; }
                            if (width === void 0) { width = 0; }
                            if (height === void 0) { height = 0; }
                            false && _super.call(this);
                            x = +x;
                            y = +y;
                            width = +width;
                            height = +height;
                            this.x = x;
                            this.y = y;
                            this.width = width;
                            this.height = height;
                        }
                        Rectangle.FromBounds = function (bounds) {
                            var xMin = bounds.xMin;
                            var yMin = bounds.yMin;
                            return new Rectangle(xMin / 20, yMin / 20, (bounds.xMax - xMin) / 20, (bounds.yMax - yMin) / 20);
                        };
                        Object.defineProperty(Rectangle.prototype, "native_x", {
                            get: function () {
                                return this.x;
                            },
                            set: function (x) {
                                this.x = x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "native_y", {
                            get: function () {
                                return this.y;
                            },
                            set: function (y) {
                                this.y = y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "native_width", {
                            get: function () {
                                return this.width;
                            },
                            set: function (width) {
                                this.width = +width;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "native_height", {
                            get: function () {
                                return this.height;
                            },
                            set: function (height) {
                                this.height = +height;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "left", {
                            get: function () {
                                return this.x;
                            },
                            set: function (value) {
                                value = +value;
                                this.width += this.x - value;
                                this.x = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "right", {
                            get: function () {
                                return this.x + this.width;
                            },
                            set: function (value) {
                                value = +value;
                                this.width = value - this.x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "top", {
                            get: function () {
                                return this.y;
                            },
                            set: function (value) {
                                value = +value;
                                this.height += this.y - value;
                                this.y = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "bottom", {
                            get: function () {
                                return this.y + this.height;
                            },
                            set: function (value) {
                                value = +value;
                                this.height = value - this.y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "topLeft", {
                            get: function () {
                                return new geom.Point(this.left, this.top);
                            },
                            set: function (value) {
                                this.top = value.y;
                                this.left = value.x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "bottomRight", {
                            get: function () {
                                return new geom.Point(this.right, this.bottom);
                            },
                            set: function (value) {
                                this.bottom = value.y;
                                this.right = value.x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "size", {
                            get: function () {
                                return new geom.Point(this.width, this.height);
                            },
                            set: function (value) {
                                this.width = value.x;
                                this.height = value.y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "area", {
                            get: function () {
                                return this.width * this.height;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Rectangle.prototype.clone = function () {
                            return new Rectangle(this.x, this.y, this.width, this.height);
                        };
                        Rectangle.prototype.isEmpty = function () {
                            return this.width <= 0 || this.height <= 0;
                        };
                        Rectangle.prototype.setEmpty = function () {
                            this.x = 0;
                            this.y = 0;
                            this.width = 0;
                            this.height = 0;
                        };
                        Rectangle.prototype.inflate = function (dx, dy) {
                            dx = +dx;
                            dy = +dy;
                            this.x -= dx;
                            this.y -= dy;
                            this.width += (dx * 2);
                            this.height += (dy * 2);
                        };
                        Rectangle.prototype.inflatePoint = function (point) {
                            this.inflate(point.x, point.y);
                        };
                        Rectangle.prototype.offset = function (dx, dy) {
                            this.x += +dx;
                            this.y += +dy;
                        };
                        Rectangle.prototype.offsetPoint = function (point) {
                            this.offset(point.x, point.y);
                        };
                        Rectangle.prototype.contains = function (x, y) {
                            x = +x;
                            y = +y;
                            return x >= this.x && x < this.right && y >= this.y && y < this.bottom;
                        };
                        Rectangle.prototype.containsPoint = function (point) {
                            return this.contains(point.x, point.y);
                        };
                        Rectangle.prototype.containsRect = function (rect) {
                            var r1 = rect.x + rect.width;
                            var b1 = rect.y + rect.height;
                            var r2 = this.x + this.width;
                            var b2 = this.y + this.height;
                            return (rect.x >= this.x) && (rect.x < r2) && (rect.y >= this.y) && (rect.y < b2) && (r1 > this.x) && (r1 <= r2) && (b1 > this.y) && (b1 <= b2);
                        };
                        Rectangle.prototype.intersection = function (toIntersect) {
                            return this.clone().intersectInPlace(toIntersect);
                        };
                        Rectangle.prototype.intersects = function (toIntersect) {
                            return Math.max(this.x, toIntersect.x) <= Math.min(this.right, toIntersect.right) && Math.max(this.y, toIntersect.y) <= Math.min(this.bottom, toIntersect.bottom);
                        };
                        Rectangle.prototype.intersectInPlace = function (clipRect) {
                            var x0 = this.x;
                            var y0 = this.y;
                            var x1 = clipRect.x;
                            var y1 = clipRect.y;
                            var l = Math.max(x0, x1);
                            var r = Math.min(x0 + this.width, x1 + clipRect.width);
                            if (l <= r) {
                                var t = Math.max(y0, y1);
                                var b = Math.min(y0 + this.height, y1 + clipRect.height);
                                if (t <= b) {
                                    this.setTo(l, t, r - l, b - t);
                                    return this;
                                }
                            }
                            this.setEmpty();
                            return this;
                        };
                        Rectangle.prototype.intersectInPlaceInt32 = function (clipRect) {
                            var x0 = this.x | 0;
                            var y0 = this.y | 0;
                            var w0 = this.width | 0;
                            var h0 = this.height | 0;
                            var x1 = clipRect.x | 0;
                            var w1 = clipRect.width | 0;
                            var l = Math.max(x0, x1) | 0;
                            var r = Math.min(x0 + w0 | 0, x1 + w1 | 0) | 0;
                            if (l <= r) {
                                var y1 = clipRect.y | 0;
                                var h1 = clipRect.height | 0;
                                var t = Math.max(y0, y1) | 0;
                                var b = Math.min(y0 + h0 | 0, y1 + h1 | 0);
                                if (t <= b) {
                                    this.setTo(l, t, r - l, b - t);
                                    return this;
                                }
                            }
                            this.setEmpty();
                            return this;
                        };
                        Rectangle.prototype.union = function (toUnion) {
                            return this.clone().unionInPlace(toUnion);
                        };
                        Rectangle.prototype.unionInPlace = function (toUnion) {
                            if (toUnion.isEmpty()) {
                                return this;
                            }
                            if (this.isEmpty()) {
                                this.copyFrom(toUnion);
                                return this;
                            }
                            var l = Math.min(this.x, toUnion.x);
                            var t = Math.min(this.y, toUnion.y);
                            this.setTo(l, t, Math.max(this.right, toUnion.right) - l, Math.max(this.bottom, toUnion.bottom) - t);
                            return this;
                        };
                        Rectangle.prototype.equals = function (toCompare) {
                            return this === toCompare || this.x === toCompare.x && this.y === toCompare.y && this.width === toCompare.width && this.height === toCompare.height;
                        };
                        Rectangle.prototype.copyFrom = function (sourceRect) {
                            this.x = sourceRect.x;
                            this.y = sourceRect.y;
                            this.width = sourceRect.width;
                            this.height = sourceRect.height;
                        };
                        Rectangle.prototype.setTo = function (x, y, width, height) {
                            this.x = +x;
                            this.y = +y;
                            this.width = +width;
                            this.height = +height;
                        };
                        Rectangle.prototype.toTwips = function () {
                            this.x = (this.x * 20) | 0;
                            this.y = (this.y * 20) | 0;
                            this.width = (this.width * 20) | 0;
                            this.height = (this.height * 20) | 0;
                            return this;
                        };
                        Rectangle.prototype.getBaseWidth = function (angle) {
                            var u = Math.abs(Math.cos(angle));
                            var v = Math.abs(Math.sin(angle));
                            return u * this.width + v * this.height;
                        };
                        Rectangle.prototype.getBaseHeight = function (angle) {
                            var u = Math.abs(Math.cos(angle));
                            var v = Math.abs(Math.sin(angle));
                            return v * this.width + u * this.height;
                        };
                        Rectangle.prototype.toPixels = function () {
                            this.x /= 20;
                            this.y /= 20;
                            this.width /= 20;
                            this.height /= 20;
                            return this;
                        };
                        Rectangle.prototype.snapInPlace = function () {
                            var x1 = Math.ceil(this.x + this.width);
                            var y1 = Math.ceil(this.y + this.height);
                            this.x = Math.floor(this.x);
                            this.y = Math.floor(this.y);
                            this.width = x1 - this.x;
                            this.height = y1 - this.y;
                            return this;
                        };
                        Rectangle.prototype.roundInPlace = function () {
                            var x1 = Math.round(this.x + this.width);
                            var y1 = Math.round(this.y + this.height);
                            this.x = Math.round(this.x);
                            this.y = Math.round(this.y);
                            this.width = x1 - this.x;
                            this.height = y1 - this.y;
                            return this;
                        };
                        Rectangle.prototype.toString = function () {
                            return "(x=" + this.x + ", y=" + this.y + ", w=" + this.width + ", h=" + this.height + ")";
                        };
                        Rectangle.prototype.writeExternal = function (output) {
                            output.writeFloat(this.x);
                            output.writeFloat(this.y);
                            output.writeFloat(this.width);
                            output.writeFloat(this.height);
                        };
                        Rectangle.prototype.readExternal = function (input) {
                            this.x = input.readFloat();
                            this.y = input.readFloat();
                            this.width = input.readFloat();
                            this.height = input.readFloat();
                        };
                        Rectangle.classInitializer = null;
                        Rectangle.initializer = null;
                        Rectangle.classSymbols = null;
                        Rectangle.instanceSymbols = null;
                        return Rectangle;
                    })(AS.ASNative);
                    geom.Rectangle = Rectangle;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Errors = Shumway.AVM2.Errors;
                    var Transform = (function (_super) {
                        __extends(Transform, _super);
                        function Transform(displayObject) {
                            false && _super.call(this);
                            if (!displayObject) {
                                throwError("ArgumentError", Errors.NullPointerError, "displayObject");
                            }
                            this._displayObject = displayObject;
                        }
                        Object.defineProperty(Transform.prototype, "matrix", {
                            get: function () {
                                return this._displayObject._getMatrix().clone().toPixelsInPlace();
                            },
                            set: function (value) {
                                this._displayObject._setMatrix(value, true);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "colorTransform", {
                            get: function () {
                                return this._displayObject._colorTransform.clone();
                            },
                            set: function (value) {
                                this._displayObject._setColorTransform(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "concatenatedMatrix", {
                            get: function () {
                                var matrix = this._displayObject._getConcatenatedMatrix().clone().toPixelsInPlace();
                                if (!this._displayObject._stage) {
                                    matrix.scale(5, 5);
                                }
                                return matrix;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "concatenatedColorTransform", {
                            get: function () {
                                return this._displayObject._getConcatenatedColorTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "pixelBounds", {
                            get: function () {
                                notImplemented("public flash.geom.Transform::get pixelBounds");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "matrix3D", {
                            get: function () {
                                var m = this._displayObject._matrix3D;
                                return m && m.clone();
                            },
                            set: function (m) {
                                if (!(geom.Matrix3D.isType(m))) {
                                    throwError('TypeError', Errors.CheckTypeFailedError, m, 'flash.geom.Matrix3D');
                                }
                                var raw = m.rawData;
                                this.matrix = new flash.geom.Matrix(raw.asGetPublicProperty(0), raw.asGetPublicProperty(1), raw.asGetPublicProperty(4), raw.asGetPublicProperty(5), raw.asGetPublicProperty(12), raw.asGetPublicProperty(13));
                                somewhatImplemented("public flash.geom.Transform::set matrix3D");
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Transform.prototype.getRelativeMatrix3D = function (relativeTo) {
                            relativeTo = relativeTo;
                            notImplemented("public flash.geom.Transform::getRelativeMatrix3D");
                            return;
                        };
                        Object.defineProperty(Transform.prototype, "perspectiveProjection", {
                            get: function () {
                                notImplemented("public flash.geom.Transform::get perspectiveProjection");
                                return;
                            },
                            set: function (pm) {
                                pm = pm;
                                notImplemented("public flash.geom.Transform::set perspectiveProjection");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Transform.classInitializer = null;
                        Transform.initializer = null;
                        Transform.classSymbols = null;
                        Transform.instanceSymbols = null;
                        return Transform;
                    })(AS.ASNative);
                    geom.Transform = Transform;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Utils3D = (function (_super) {
                        __extends(Utils3D, _super);
                        function Utils3D() {
                            false && _super.call(this);
                            dummyConstructor("public flash.geom.Utils3D");
                        }
                        Utils3D.projectVector = function (m, v) {
                            m = m;
                            v = v;
                            notImplemented("public flash.geom.Utils3D::static projectVector");
                            return;
                        };
                        Utils3D.projectVectors = function (m, verts, projectedVerts, uvts) {
                            m = m;
                            verts = verts;
                            projectedVerts = projectedVerts;
                            uvts = uvts;
                            notImplemented("public flash.geom.Utils3D::static projectVectors");
                            return;
                        };
                        Utils3D.pointTowards = function (percent, mat, pos, at, up) {
                            if (at === void 0) { at = null; }
                            if (up === void 0) { up = null; }
                            percent = +percent;
                            mat = mat;
                            pos = pos;
                            at = at;
                            up = up;
                            notImplemented("public flash.geom.Utils3D::static pointTowards");
                            return;
                        };
                        Utils3D.classInitializer = null;
                        Utils3D.initializer = null;
                        Utils3D.classSymbols = null;
                        Utils3D.instanceSymbols = null;
                        return Utils3D;
                    })(AS.ASNative);
                    geom.Utils3D = Utils3D;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var Vector3D = (function (_super) {
                        __extends(Vector3D, _super);
                        function Vector3D(x, y, z, w) {
                            if (x === void 0) { x = 0; }
                            if (y === void 0) { y = 0; }
                            if (z === void 0) { z = 0; }
                            if (w === void 0) { w = 0; }
                            false && _super.call(this);
                            this.x = +x;
                            this.y = +y;
                            this.z = +z;
                            this.w = +w;
                        }
                        Object.defineProperty(Vector3D.prototype, "native_x", {
                            get: function () {
                                return this.x;
                            },
                            set: function (x) {
                                this.x = x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "native_y", {
                            get: function () {
                                return this.y;
                            },
                            set: function (y) {
                                this.y = y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "native_z", {
                            get: function () {
                                return this.z;
                            },
                            set: function (z) {
                                this.z = z;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "native_w", {
                            get: function () {
                                return this.w;
                            },
                            set: function (w) {
                                this.w = w;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "length", {
                            get: function () {
                                return Math.sqrt(this.lengthSquared);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "lengthSquared", {
                            get: function () {
                                return this.x * this.x + this.y * this.y + this.z * this.z;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Vector3D.angleBetween = function (a, b) {
                            return Math.acos(a.dotProduct(b) / (a.length * b.length));
                        };
                        Vector3D.distance = function (pt1, pt2) {
                            return pt1.subtract(pt2).length;
                        };
                        Vector3D.prototype.dotProduct = function (a) {
                            return this.x * a.x + this.y * a.y + this.z * a.z;
                        };
                        Vector3D.prototype.crossProduct = function (a) {
                            return new Vector3D(this.y * a.z - this.z * a.y, this.z * a.x - this.x * a.z, this.x * a.y - this.y * a.x, 1.0);
                        };
                        Vector3D.prototype.normalize = function () {
                            var length = this.length;
                            if (length !== 0) {
                                this.x /= length;
                                this.y /= length;
                                this.z /= length;
                            }
                            else {
                                this.x = this.y = this.z = 0;
                            }
                            return length;
                        };
                        Vector3D.prototype.scaleBy = function (s) {
                            s = +s;
                            this.x *= s;
                            this.y *= s;
                            this.z *= s;
                        };
                        Vector3D.prototype.incrementBy = function (a) {
                            this.x += a.x;
                            this.y += a.y;
                            this.z += a.z;
                        };
                        Vector3D.prototype.decrementBy = function (a) {
                            this.x -= a.x;
                            this.y -= a.y;
                            this.z -= a.z;
                        };
                        Vector3D.prototype.add = function (a) {
                            return new Vector3D(this.x + a.x, this.y + a.y, this.z + a.z);
                        };
                        Vector3D.prototype.subtract = function (a) {
                            return new Vector3D(this.x - a.x, this.y - a.y, this.z - a.z);
                        };
                        Vector3D.prototype.negate = function () {
                            this.x = -this.x;
                            this.y = -this.y;
                            this.z = -this.z;
                        };
                        Vector3D.prototype.equals = function (toCompare, allFour) {
                            return (this.x === toCompare.x) && (this.y === toCompare.y) && (this.z === toCompare.z) && (!allFour || (this.w === toCompare.w));
                        };
                        Vector3D.prototype.nearEquals = function (toCompare, tolerance, allFour) {
                            return (Math.abs(this.x - toCompare.x) < tolerance) && (Math.abs(this.y - toCompare.y) < tolerance) && (Math.abs(this.z - toCompare.z) < tolerance) && (!allFour || (Math.abs(this.w - toCompare.w) < tolerance));
                        };
                        Vector3D.prototype.project = function () {
                            this.x /= this.w;
                            this.y /= this.w;
                            this.z /= this.w;
                        };
                        Vector3D.prototype.copyFrom = function (sourceVector3D) {
                            this.x = sourceVector3D.x;
                            this.y = sourceVector3D.y;
                            this.z = sourceVector3D.z;
                        };
                        Vector3D.prototype.setTo = function (xa, ya, za) {
                            this.x = +xa;
                            this.y = +ya;
                            this.z = +za;
                        };
                        Vector3D.prototype.clone = function () {
                            return new Vector3D(this.x, this.y, this.z, this.w);
                        };
                        Vector3D.prototype.toString = function () {
                            return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
                        };
                        Vector3D.classInitializer = null;
                        Vector3D.initializer = null;
                        Vector3D.classSymbols = null;
                        Vector3D.instanceSymbols = null;
                        Vector3D.X_AXIS = Object.freeze(new Vector3D(1, 0, 0));
                        Vector3D.Y_AXIS = Object.freeze(new Vector3D(0, 1, 0));
                        Vector3D.Z_AXIS = Object.freeze(new Vector3D(0, 0, 1));
                        return Vector3D;
                    })(AS.ASNative);
                    geom.Vector3D = Vector3D;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var accessibility;
                (function (accessibility) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var Accessibility = (function (_super) {
                        __extends(Accessibility, _super);
                        function Accessibility() {
                            false && _super.call(this);
                            dummyConstructor("public flash.accessibility.Accessibility");
                        }
                        Object.defineProperty(Accessibility, "active", {
                            get: function () {
                                somewhatImplemented("public flash.accessibility.Accessibility::get active");
                                return Accessibility._active;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Accessibility.sendEvent = function (source, childID, eventType, nonHTML) {
                            if (nonHTML === void 0) { nonHTML = false; }
                            source = source;
                            childID = childID >>> 0;
                            eventType = eventType >>> 0;
                            nonHTML = !!nonHTML;
                            notImplemented("public flash.accessibility.Accessibility::static sendEvent");
                            return;
                        };
                        Accessibility.updateProperties = function () {
                            notImplemented("public flash.accessibility.Accessibility::static updateProperties");
                            return;
                        };
                        Accessibility.classInitializer = null;
                        Accessibility.initializer = null;
                        Accessibility.classSymbols = null;
                        Accessibility.instanceSymbols = null;
                        Accessibility._active = false;
                        return Accessibility;
                    })(AS.ASNative);
                    accessibility.Accessibility = Accessibility;
                })(accessibility = flash.accessibility || (flash.accessibility = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var accessibility;
                (function (accessibility) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var AccessibilityImplementation = (function (_super) {
                        __extends(AccessibilityImplementation, _super);
                        function AccessibilityImplementation() {
                            false && _super.call(this);
                            dummyConstructor("public flash.accessibility.AccessibilityImplementation");
                        }
                        AccessibilityImplementation.classInitializer = null;
                        AccessibilityImplementation.initializer = null;
                        AccessibilityImplementation.classSymbols = null;
                        AccessibilityImplementation.instanceSymbols = null;
                        return AccessibilityImplementation;
                    })(AS.ASNative);
                    accessibility.AccessibilityImplementation = AccessibilityImplementation;
                })(accessibility = flash.accessibility || (flash.accessibility = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var accessibility;
                (function (accessibility) {
                    var AccessibilityProperties = (function (_super) {
                        __extends(AccessibilityProperties, _super);
                        function AccessibilityProperties() {
                            false && _super.call(this);
                        }
                        AccessibilityProperties.classInitializer = null;
                        AccessibilityProperties.initializer = null;
                        AccessibilityProperties.classSymbols = null;
                        AccessibilityProperties.instanceSymbols = null;
                        return AccessibilityProperties;
                    })(AS.ASNative);
                    accessibility.AccessibilityProperties = AccessibilityProperties;
                })(accessibility = flash.accessibility || (flash.accessibility = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var assert = Shumway.Debug.assert;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Event = (function (_super) {
                        __extends(Event, _super);
                        function Event(type, bubbles, cancelable) {
                            false && _super.call(this);
                            this._type = asCoerceString(type);
                            this._bubbles = !!bubbles;
                            this._cancelable = !!cancelable;
                            this._target = null;
                            this._currentTarget = null;
                            this._eventPhase = events.EventPhase.AT_TARGET;
                            this._stopPropagation = false;
                            this._stopImmediatePropagation = false;
                            this._isDefaultPrevented = false;
                        }
                        Event.getInstance = function (type, bubbles, cancelable) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            var instance = Event._instances[type];
                            if (!instance) {
                                instance = new Event(type, bubbles, cancelable);
                                Event._instances[type] = instance;
                            }
                            instance._bubbles = bubbles;
                            instance._cancelable = cancelable;
                            return instance;
                        };
                        Event.getBroadcastInstance = function (type, bubbles, cancelable) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            var instance = Event._instances[type];
                            if (!instance) {
                                instance = new Event(type, bubbles, cancelable);
                                Event._instances[type] = instance;
                                release || assert(Event.isBroadcastEventType(type));
                            }
                            instance._isBroadcastEvent = true;
                            instance._bubbles = bubbles;
                            instance._cancelable = cancelable;
                            return instance;
                        };
                        Event.isBroadcastEventType = function (type) {
                            switch (type) {
                                case Event.ENTER_FRAME:
                                case Event.EXIT_FRAME:
                                case Event.FRAME_CONSTRUCTED:
                                case Event.RENDER:
                                case Event.ACTIVATE:
                                case Event.DEACTIVATE:
                                    return true;
                            }
                            return false;
                        };
                        Object.defineProperty(Event.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "bubbles", {
                            get: function () {
                                return this._bubbles;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "cancelable", {
                            get: function () {
                                return this._cancelable;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "target", {
                            get: function () {
                                return this._target;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "currentTarget", {
                            get: function () {
                                return this._currentTarget;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "eventPhase", {
                            get: function () {
                                return this._eventPhase;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Event.prototype.stopPropagation = function () {
                            this._stopPropagation = true;
                        };
                        Event.prototype.stopImmediatePropagation = function () {
                            this._stopImmediatePropagation = this._stopPropagation = true;
                        };
                        Event.prototype.preventDefault = function () {
                            if (this._cancelable) {
                                this._isDefaultPrevented = true;
                            }
                        };
                        Event.prototype.isDefaultPrevented = function () {
                            return this._isDefaultPrevented;
                        };
                        Event.prototype.isBroadcastEvent = function () {
                            return !!this._isBroadcastEvent;
                        };
                        Event.prototype.clone = function () {
                            return new Event(this._type, this._bubbles, this._cancelable);
                        };
                        Event.prototype.toString = function () {
                            return this.formatToString('Event', 'type', 'bubbles', 'cancelable', 'eventPhase');
                        };
                        Event.prototype.formatToString = function (className) {
                            var args = [];
                            for (var _i = 1; _i < arguments.length; _i++) {
                                args[_i - 1] = arguments[_i];
                            }
                            var str = '[' + className;
                            for (var i = 0; i < args.length; i++) {
                                var field = args[i];
                                var value = this.asGetPublicProperty(field);
                                if (typeof value === 'string') {
                                    value = '"' + value + '"';
                                }
                                str += ' ' + field + '=' + value;
                            }
                            return str + ']';
                        };
                        Event.classInitializer = function () {
                            Event._instances = Shumway.ObjectUtilities.createMap();
                        };
                        Event.initializer = null;
                        Event.classSymbols = null;
                        Event.instanceSymbols = null;
                        Event.ACTIVATE = "activate";
                        Event.ADDED = "added";
                        Event.ADDED_TO_STAGE = "addedToStage";
                        Event.CANCEL = "cancel";
                        Event.CHANGE = "change";
                        Event.CLEAR = "clear";
                        Event.CLOSE = "close";
                        Event.COMPLETE = "complete";
                        Event.CONNECT = "connect";
                        Event.COPY = "copy";
                        Event.CUT = "cut";
                        Event.DEACTIVATE = "deactivate";
                        Event.ENTER_FRAME = "enterFrame";
                        Event.FRAME_CONSTRUCTED = "frameConstructed";
                        Event.EXIT_FRAME = "exitFrame";
                        Event.FRAME_LABEL = "frameLabel";
                        Event.ID3 = "id3";
                        Event.INIT = "init";
                        Event.MOUSE_LEAVE = "mouseLeave";
                        Event.OPEN = "open";
                        Event.PASTE = "paste";
                        Event.REMOVED = "removed";
                        Event.REMOVED_FROM_STAGE = "removedFromStage";
                        Event.RENDER = "render";
                        Event.RESIZE = "resize";
                        Event.SCROLL = "scroll";
                        Event.TEXT_INTERACTION_MODE_CHANGE = "textInteractionModeChange";
                        Event.SELECT = "select";
                        Event.SELECT_ALL = "selectAll";
                        Event.SOUND_COMPLETE = "soundComplete";
                        Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
                        Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
                        Event.TAB_INDEX_CHANGE = "tabIndexChange";
                        Event.UNLOAD = "unload";
                        Event.FULLSCREEN = "fullScreen";
                        Event.CONTEXT3D_CREATE = "context3DCreate";
                        Event.TEXTURE_READY = "textureReady";
                        Event.VIDEO_FRAME = "videoFrame";
                        Event.SUSPEND = "suspend";
                        Event.AVM1_INIT = "initialize";
                        Event.AVM1_CONSTRUCT = "construct";
                        Event.AVM1_LOAD = "load";
                        return Event;
                    })(AS.ASNative);
                    events.Event = Event;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var isFunction = Shumway.isFunction;
                    var isNullOrUndefined = Shumway.isNullOrUndefined;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var assert = Shumway.Debug.assert;
                    var traceEventsOption = Shumway.AVM2.AS.traceEventsOption;
                    var EventListenerEntry = (function () {
                        function EventListenerEntry(listener, useCapture, priority) {
                            this.listener = listener;
                            this.useCapture = useCapture;
                            this.priority = priority;
                        }
                        return EventListenerEntry;
                    })();
                    var EventListenerList = (function () {
                        function EventListenerList() {
                            this._aliasCount = 0;
                            this._entries = [];
                        }
                        EventListenerList.prototype.isEmpty = function () {
                            return this._entries.length === 0;
                        };
                        EventListenerList.prototype.insert = function (listener, useCapture, priority) {
                            var entries = this._entries;
                            var index = entries.length;
                            for (var i = index - 1; i >= 0; i--) {
                                var entry = entries[i];
                                if (entry.listener === listener) {
                                    return;
                                }
                                if (priority > entry.priority) {
                                    index = i;
                                }
                                else {
                                    break;
                                }
                            }
                            entries = this.ensureNonAliasedEntries();
                            entries.splice(index, 0, new EventListenerEntry(listener, useCapture, priority));
                        };
                        EventListenerList.prototype.ensureNonAliasedEntries = function () {
                            var entries = this._entries;
                            if (this._aliasCount > 0) {
                                entries = this._entries = entries.slice();
                                this._aliasCount = 0;
                            }
                            return entries;
                        };
                        EventListenerList.prototype.remove = function (listener) {
                            var entries = this._entries;
                            for (var i = 0; i < entries.length; i++) {
                                var item = entries[i];
                                if (item.listener === listener) {
                                    this.ensureNonAliasedEntries().splice(i, 1);
                                    return;
                                }
                            }
                        };
                        EventListenerList.prototype.snapshot = function () {
                            this._aliasCount++;
                            return this._entries;
                        };
                        EventListenerList.prototype.releaseSnapshot = function (snapshot) {
                            if (this._entries !== snapshot) {
                                return;
                            }
                            if (this._aliasCount > 0) {
                                this._aliasCount--;
                            }
                        };
                        return EventListenerList;
                    })();
                    var BroadcastEventDispatchQueue = (function () {
                        function BroadcastEventDispatchQueue() {
                            this.reset();
                        }
                        BroadcastEventDispatchQueue.prototype.reset = function () {
                            this._queues = Object.create(null);
                        };
                        BroadcastEventDispatchQueue.prototype.add = function (type, target) {
                            release || assert(events.Event.isBroadcastEventType(type), "Can only register broadcast events.");
                            var queue = this._queues[type] || (this._queues[type] = []);
                            if (queue.indexOf(target) >= 0) {
                                return;
                            }
                            queue.push(target);
                        };
                        BroadcastEventDispatchQueue.prototype.remove = function (type, target) {
                            release || assert(events.Event.isBroadcastEventType(type), "Can only unregister broadcast events.");
                            var queue = this._queues[type];
                            release || assert(queue, "There should already be a queue for this.");
                            var index = queue.indexOf(target);
                            release || assert(index >= 0, "Target should be somewhere in this queue.");
                            queue[index] = null;
                            release || assert(queue.indexOf(target) < 0, "Target shouldn't be in this queue anymore.");
                        };
                        BroadcastEventDispatchQueue.prototype.dispatchEvent = function (event) {
                            release || assert(event.isBroadcastEvent(), "Cannot dispatch non-broadcast events.");
                            var queue = this._queues[event.type];
                            if (!queue) {
                                return;
                            }
                            if (!release && traceEventsOption.value) {
                                console.log('Broadcast event of type ' + event._type + ' to ' + queue.length + ' listeners');
                            }
                            var nullCount = 0;
                            for (var i = 0; i < queue.length; i++) {
                                var target = queue[i];
                                if (target === null) {
                                    nullCount++;
                                }
                                else {
                                    try {
                                        target.dispatchEvent(event);
                                    }
                                    catch (e) {
                                        console.warn('caught error under broadcast event ' + event.type + ': ', e);
                                    }
                                }
                            }
                            if (nullCount > 16 && nullCount > (queue.length >> 1)) {
                                var compactedQueue = [];
                                for (var i = 0; i < queue.length; i++) {
                                    if (queue[i]) {
                                        compactedQueue.push(queue[i]);
                                    }
                                }
                                this._queues[event.type] = compactedQueue;
                            }
                        };
                        BroadcastEventDispatchQueue.prototype.getQueueLength = function (type) {
                            return this._queues[type] ? this._queues[type].length : 0;
                        };
                        return BroadcastEventDispatchQueue;
                    })();
                    events.BroadcastEventDispatchQueue = BroadcastEventDispatchQueue;
                    var EventDispatcher = (function (_super) {
                        __extends(EventDispatcher, _super);
                        function EventDispatcher(target) {
                            if (target === void 0) { target = null; }
                            false && _super.call(this);
                            this._target = target || this;
                        }
                        EventDispatcher.prototype.toString = function () {
                            return AS.ASObject.dynamicPrototype['$BgtoString'].call(this);
                        };
                        EventDispatcher.prototype._getListenersForType = function (useCapture, type) {
                            var listeners = useCapture ? this._captureListeners : this._targetOrBubblingListeners;
                            if (listeners) {
                                return listeners[type];
                            }
                            return null;
                        };
                        EventDispatcher.prototype._getListeners = function (useCapture) {
                            if (useCapture) {
                                return this._captureListeners || (this._captureListeners = Object.create(null));
                            }
                            return this._targetOrBubblingListeners || (this._targetOrBubblingListeners = Object.create(null));
                        };
                        EventDispatcher.prototype.addEventListener = function (type, listener, useCapture, priority, useWeakReference) {
                            if (useCapture === void 0) { useCapture = false; }
                            if (priority === void 0) { priority = 0; }
                            if (useWeakReference === void 0) { useWeakReference = false; }
                            if (arguments.length < 2 || arguments.length > 5) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/addEventListener()", 2, arguments.length);
                            }
                            if (!isFunction(listener)) {
                                throwError("TypeError", AVM2.Errors.CheckTypeFailedError, listener, "Function");
                            }
                            if (isNullOrUndefined(type)) {
                                throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                            }
                            type = asCoerceString(type);
                            useCapture = !!useCapture;
                            priority |= 0;
                            useWeakReference = !!useWeakReference;
                            var listeners = this._getListeners(useCapture);
                            var list = listeners[type] || (listeners[type] = new EventListenerList());
                            list.insert(listener, useCapture, priority);
                            if (!useCapture && events.Event.isBroadcastEventType(type)) {
                                EventDispatcher.broadcastEventDispatchQueue.add(type, this);
                            }
                        };
                        EventDispatcher.prototype.removeEventListener = function (type, listener, useCapture) {
                            if (useCapture === void 0) { useCapture = false; }
                            if (arguments.length < 2 || arguments.length > 3) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/removeEventListener()", 2, arguments.length);
                            }
                            if (!isFunction(listener)) {
                                throwError("TypeError", AVM2.Errors.CheckTypeFailedError, listener, "Function");
                            }
                            if (isNullOrUndefined(type)) {
                                throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                            }
                            type = asCoerceString(type);
                            var listeners = this._getListeners(!!useCapture);
                            var list = listeners[type];
                            if (list) {
                                list.remove(listener);
                                if (list.isEmpty()) {
                                    if (!useCapture && events.Event.isBroadcastEventType(type)) {
                                        EventDispatcher.broadcastEventDispatchQueue.remove(type, this);
                                    }
                                    listeners[type] = null;
                                }
                            }
                        };
                        EventDispatcher.prototype._hasTargetOrBubblingEventListener = function (type) {
                            return !!(this._targetOrBubblingListeners && this._targetOrBubblingListeners[type]);
                        };
                        EventDispatcher.prototype._hasCaptureEventListener = function (type) {
                            return !!(this._captureListeners && this._captureListeners[type]);
                        };
                        EventDispatcher.prototype._hasEventListener = function (type) {
                            return this._hasTargetOrBubblingEventListener(type) || this._hasCaptureEventListener(type);
                        };
                        EventDispatcher.prototype.hasEventListener = function (type) {
                            if (arguments.length !== 1) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/hasEventListener()", 1, arguments.length);
                            }
                            if (isNullOrUndefined(type)) {
                                throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                            }
                            type = asCoerceString(type);
                            return this._hasEventListener(type);
                        };
                        EventDispatcher.prototype.willTrigger = function (type) {
                            if (arguments.length !== 1) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/hasEventListener()", 1, arguments.length);
                            }
                            if (isNullOrUndefined(type)) {
                                throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                            }
                            type = asCoerceString(type);
                            if (this._hasEventListener(type)) {
                                return true;
                            }
                            if (flash.display.DisplayObject.isType(this)) {
                                var node = this._parent;
                                do {
                                    if (node._hasEventListener(type)) {
                                        return true;
                                    }
                                } while ((node = node._parent));
                            }
                            return false;
                        };
                        EventDispatcher.prototype._skipDispatchEvent = function (event) {
                            if (this._hasEventListener(event.type)) {
                                return false;
                            }
                            if (event.isBroadcastEvent()) {
                                return true;
                            }
                            else if (event._bubbles && flash.display.DisplayObject.isType(this)) {
                                for (var node = this._parent; node; node = node._parent) {
                                    if (node._hasEventListener(event.type)) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        };
                        EventDispatcher.prototype.dispatchEvent = function (event) {
                            if (arguments.length !== 1) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/dispatchEvent()", 1, arguments.length);
                            }
                            if (this._skipDispatchEvent(event)) {
                                return true;
                            }
                            if (!release && traceEventsOption.value) {
                                console.log('Dispatch event of type ' + event._type);
                            }
                            release || AVM2.counter.count("EventDispatcher::dispatchEvent");
                            var type = event._type;
                            var target = this._target;
                            release || AVM2.counter.count("EventDispatcher::dispatchEvent(" + type + ")");
                            var keepPropagating = true;
                            var ancestors = [];
                            if (!event.isBroadcastEvent() && flash.display.DisplayObject.isType(this)) {
                                var node = this._parent;
                                while (node) {
                                    if (node._hasEventListener(type)) {
                                        ancestors.push(node);
                                    }
                                    node = node._parent;
                                }
                                for (var i = ancestors.length - 1; i >= 0 && keepPropagating; i--) {
                                    var ancestor = ancestors[i];
                                    if (!ancestor._hasCaptureEventListener(type)) {
                                        continue;
                                    }
                                    var list = ancestor._getListenersForType(true, type);
                                    release || assert(list);
                                    keepPropagating = EventDispatcher.callListeners(list, event, target, ancestor, events.EventPhase.CAPTURING_PHASE);
                                }
                            }
                            if (keepPropagating) {
                                var list = this._getListenersForType(false, type);
                                if (list) {
                                    keepPropagating = EventDispatcher.callListeners(list, event, target, target, events.EventPhase.AT_TARGET);
                                }
                            }
                            if (!event.isBroadcastEvent() && keepPropagating && event.bubbles) {
                                for (var i = 0; i < ancestors.length && keepPropagating; i++) {
                                    var ancestor = ancestors[i];
                                    if (!ancestor._hasTargetOrBubblingEventListener(type)) {
                                        continue;
                                    }
                                    var list = ancestor._getListenersForType(false, type);
                                    keepPropagating = EventDispatcher.callListeners(list, event, target, ancestor, events.EventPhase.BUBBLING_PHASE);
                                }
                            }
                            return !event._isDefaultPrevented;
                        };
                        EventDispatcher.callListeners = function (list, event, target, currentTarget, eventPhase) {
                            if (list.isEmpty()) {
                                return true;
                            }
                            if (event._target) {
                                event = event.asCallPublicProperty('clone', null);
                            }
                            var snapshot = list.snapshot();
                            for (var i = 0; i < snapshot.length; i++) {
                                var entry = snapshot[i];
                                event._target = target;
                                event._currentTarget = currentTarget;
                                event._eventPhase = eventPhase;
                                entry.listener(event);
                                if (event._stopImmediatePropagation) {
                                    break;
                                }
                            }
                            list.releaseSnapshot(snapshot);
                            return !event._stopPropagation;
                        };
                        EventDispatcher.classInitializer = function () {
                            EventDispatcher.broadcastEventDispatchQueue = new BroadcastEventDispatchQueue();
                        };
                        EventDispatcher.initializer = function () {
                            var self = this;
                            self._target = this;
                            self._captureListeners = null;
                            self._targetOrBubblingListeners = null;
                        };
                        EventDispatcher.classSymbols = null;
                        EventDispatcher.instanceSymbols = null;
                        return EventDispatcher;
                    })(AS.ASNative);
                    events.EventDispatcher = EventDispatcher;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var EventPhase = (function (_super) {
                        __extends(EventPhase, _super);
                        function EventPhase() {
                            _super.call(this);
                            dummyConstructor("public flash.events.EventPhase");
                        }
                        EventPhase.classInitializer = null;
                        EventPhase.initializer = null;
                        EventPhase.classSymbols = null;
                        EventPhase.instanceSymbols = null;
                        EventPhase.CAPTURING_PHASE = 1;
                        EventPhase.AT_TARGET = 2;
                        EventPhase.BUBBLING_PHASE = 3;
                        return EventPhase;
                    })(AS.ASNative);
                    events.EventPhase = EventPhase;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var TextEvent = (function (_super) {
                        __extends(TextEvent, _super);
                        function TextEvent(type, bubbles, cancelable, text) {
                            _super.call(this, type, bubbles, cancelable);
                            this._text = text;
                        }
                        Object.defineProperty(TextEvent.prototype, "text", {
                            get: function () {
                                return this._text;
                            },
                            set: function (value) {
                                this._text = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextEvent.prototype.clone = function () {
                            var textEvent = new TextEvent(this.type, this.bubbles, this.cancelable, this.text);
                            this.copyNativeData(textEvent);
                            return textEvent;
                        };
                        TextEvent.prototype.toString = function () {
                            return this.formatToString('TextEvent', 'type', 'bubbles', 'cancelable', 'text');
                        };
                        TextEvent.prototype.copyNativeData = function (event) {
                            notImplemented("public flash.events.TextEvent::copyNativeData");
                        };
                        TextEvent.classInitializer = null;
                        TextEvent.initializer = null;
                        TextEvent.classSymbols = null;
                        TextEvent.instanceSymbols = null;
                        TextEvent.LINK = "link";
                        TextEvent.TEXT_INPUT = "textInput";
                        return TextEvent;
                    })(flash.events.Event);
                    events.TextEvent = TextEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var ErrorEvent = (function (_super) {
                        __extends(ErrorEvent, _super);
                        function ErrorEvent(type, bubbles, cancelable, text, id) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (text === void 0) { text = ""; }
                            if (id === void 0) { id = 0; }
                            _super.call(this, type, bubbles, cancelable, text);
                            this.setID(id);
                        }
                        ErrorEvent.prototype.setID = function (id) {
                            this._id = id;
                        };
                        Object.defineProperty(ErrorEvent.prototype, "errorID", {
                            get: function () {
                                return this._id;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ErrorEvent.prototype.clone = function () {
                            return new ErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
                        };
                        ErrorEvent.prototype.toString = function () {
                            return this.formatToString('ErrorEvent', 'type', 'bubbles', 'cancelable', 'text', 'errorID');
                        };
                        ErrorEvent.classInitializer = null;
                        ErrorEvent.initializer = null;
                        ErrorEvent.classSymbols = null;
                        ErrorEvent.instanceSymbols = null;
                        ErrorEvent.ERROR = "error";
                        return ErrorEvent;
                    })(flash.events.TextEvent);
                    events.ErrorEvent = ErrorEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputEvent = (function (_super) {
                        __extends(GameInputEvent, _super);
                        function GameInputEvent(type, bubbles, cancelable, device) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (device === void 0) { device = null; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.GameInputEvent");
                        }
                        GameInputEvent.classInitializer = null;
                        GameInputEvent.initializer = null;
                        GameInputEvent.classSymbols = null;
                        GameInputEvent.instanceSymbols = null;
                        GameInputEvent.DEVICE_ADDED = "deviceAdded";
                        GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
                        return GameInputEvent;
                    })(flash.events.Event);
                    events.GameInputEvent = GameInputEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var GestureEvent = (function (_super) {
                        __extends(GestureEvent, _super);
                        function GestureEvent(type, bubbles, cancelable, phase, localX, localY, ctrlKey, altKey, shiftKey) {
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (phase === void 0) { phase = null; }
                            if (localX === void 0) { localX = 0; }
                            if (localY === void 0) { localY = 0; }
                            if (ctrlKey === void 0) { ctrlKey = false; }
                            if (altKey === void 0) { altKey = false; }
                            if (shiftKey === void 0) { shiftKey = false; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.GestureEvent");
                        }
                        Object.defineProperty(GestureEvent.prototype, "localX", {
                            get: function () {
                                return this._localX;
                            },
                            set: function (value) {
                                this._localX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "localY", {
                            get: function () {
                                return this._localY;
                            },
                            set: function (value) {
                                this._localY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "stageX", {
                            get: function () {
                                somewhatImplemented("public flash.events.GestureEvent::stageX");
                                return 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "stageY", {
                            get: function () {
                                somewhatImplemented("public flash.events.GestureEvent::stageY");
                                return 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "ctrlKey", {
                            get: function () {
                                return this._ctrlKey;
                            },
                            set: function (value) {
                                this._ctrlKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "altKey", {
                            get: function () {
                                return this._altKey;
                            },
                            set: function (value) {
                                this._altKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "shiftKey", {
                            get: function () {
                                return this._shiftKey;
                            },
                            set: function (value) {
                                this._shiftKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "phase", {
                            get: function () {
                                return this._phase;
                            },
                            set: function (value) {
                                this._phase = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GestureEvent.prototype.updateAfterEvent = function () {
                            somewhatImplemented("public flash.events.GestureEvent::updateAfterEvent");
                        };
                        GestureEvent.prototype.NativeCtor = function (phase, localX, localY, ctrlKey, altKey, shiftKey) {
                            this._phase = asCoerceString(phase);
                            this._localX = +localX;
                            this._localY = +localY;
                            this._ctrlKey = !!ctrlKey;
                            this._altKey = !!altKey;
                            this._shiftKey = !!shiftKey;
                        };
                        GestureEvent.prototype.clone = function () {
                            return new flash.events.GestureEvent(this.type, this.bubbles, this.cancelable, this.phase, this.localX, this.localY, this.ctrlKey, this.altKey, this.shiftKey);
                        };
                        GestureEvent.prototype.toString = function () {
                            return this.formatToString('GestureEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'localX', 'localY', 'ctrlKey', 'altKey', 'shiftKey');
                        };
                        GestureEvent.classInitializer = null;
                        GestureEvent.initializer = null;
                        GestureEvent.classSymbols = null;
                        GestureEvent.instanceSymbols = null;
                        GestureEvent.GESTURE_TWO_FINGER_TAP = "gestureTwoFingerTap";
                        return GestureEvent;
                    })(flash.events.Event);
                    events.GestureEvent = GestureEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var HTTPStatusEvent = (function (_super) {
                        __extends(HTTPStatusEvent, _super);
                        function HTTPStatusEvent(type, bubbles, cancelable, status) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (status === void 0) { status = 0; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.HTTPStatusEvent");
                        }
                        HTTPStatusEvent.prototype._setStatus = function (value) {
                            this._status = value;
                        };
                        Object.defineProperty(HTTPStatusEvent.prototype, "status", {
                            get: function () {
                                return this._status;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(HTTPStatusEvent.prototype, "responseURL", {
                            get: function () {
                                return this._responseURL;
                            },
                            set: function (value) {
                                this._responseURL = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(HTTPStatusEvent.prototype, "responseHeaders", {
                            get: function () {
                                return this._responseHeaders;
                            },
                            set: function (value) {
                                this._responseHeaders = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        HTTPStatusEvent.prototype.clone = function () {
                            var event = new events.HTTPStatusEvent(this.type, this.bubbles, this.cancelable, this.status);
                            event.responseURL = this.responseURL;
                            event.responseHeaders = this.responseHeaders;
                            return event;
                        };
                        HTTPStatusEvent.prototype.toString = function () {
                            return this.formatToString('HTTPStatusEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'status', 'responseURL', 'responseHeaders');
                        };
                        HTTPStatusEvent.classInitializer = null;
                        HTTPStatusEvent.initializer = null;
                        HTTPStatusEvent.classSymbols = null;
                        HTTPStatusEvent.instanceSymbols = null;
                        HTTPStatusEvent.HTTP_STATUS = "httpStatus";
                        HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
                        return HTTPStatusEvent;
                    })(flash.events.Event);
                    events.HTTPStatusEvent = HTTPStatusEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var IOErrorEvent = (function (_super) {
                        __extends(IOErrorEvent, _super);
                        function IOErrorEvent(type, bubbles, cancelable, text, id) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (text === void 0) { text = ""; }
                            if (id === void 0) { id = 0; }
                            _super.call(this, type, bubbles, cancelable, text, id);
                        }
                        IOErrorEvent.prototype.clone = function () {
                            var event = new IOErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
                            this.copyNativeData(event);
                            return event;
                        };
                        IOErrorEvent.prototype.toString = function () {
                            return this.formatToString('IOErrorEvent', 'type', 'bubbles', 'cancelable', 'text', 'errorID');
                        };
                        IOErrorEvent.classInitializer = null;
                        IOErrorEvent.initializer = null;
                        IOErrorEvent.classSymbols = null;
                        IOErrorEvent.instanceSymbols = null;
                        IOErrorEvent.IO_ERROR = "ioError";
                        IOErrorEvent.NETWORK_ERROR = "networkError";
                        IOErrorEvent.DISK_ERROR = "diskError";
                        IOErrorEvent.VERIFY_ERROR = "verifyError";
                        return IOErrorEvent;
                    })(flash.events.ErrorEvent);
                    events.IOErrorEvent = IOErrorEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var KeyboardEvent = (function (_super) {
                        __extends(KeyboardEvent, _super);
                        function KeyboardEvent(type, bubbles, cancelable, charCodeValue, keyCodeValue, keyLocationValue, ctrlKeyValue, altKeyValue, shiftKeyValue) {
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (charCodeValue === void 0) { charCodeValue = 0; }
                            if (keyCodeValue === void 0) { keyCodeValue = 0; }
                            if (keyLocationValue === void 0) { keyLocationValue = 0; }
                            if (ctrlKeyValue === void 0) { ctrlKeyValue = false; }
                            if (altKeyValue === void 0) { altKeyValue = false; }
                            if (shiftKeyValue === void 0) { shiftKeyValue = false; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.KeyboardEvent");
                        }
                        Object.defineProperty(KeyboardEvent.prototype, "charCode", {
                            get: function () {
                                return this._charCode;
                            },
                            set: function (value) {
                                this._charCode = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "keyCode", {
                            get: function () {
                                return this._keyCode;
                            },
                            set: function (value) {
                                this._keyCode = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "keyLocation", {
                            get: function () {
                                return this._keyLocation;
                            },
                            set: function (value) {
                                this._keyLocation = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "ctrlKey", {
                            get: function () {
                                return this._ctrlKey;
                            },
                            set: function (value) {
                                this._ctrlKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "altKey", {
                            get: function () {
                                return this._altKey;
                            },
                            set: function (value) {
                                this._altKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "shiftKey", {
                            get: function () {
                                return this._shiftKey;
                            },
                            set: function (value) {
                                this._shiftKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        KeyboardEvent.prototype.clone = function () {
                            return new events.KeyboardEvent(this.type, this.bubbles, this.cancelable, this.charCode, this.keyCode, this.keyLocation, this.ctrlKey, this.altKey, this.shiftKey);
                        };
                        KeyboardEvent.prototype.toString = function () {
                            return this.formatToString('KeyboardEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'charCode', 'keyCode', 'keyLocation', 'ctrlKey', 'altKey', 'shiftKey');
                        };
                        KeyboardEvent.prototype.updateAfterEvent = function () {
                            Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'].requestRendering();
                        };
                        KeyboardEvent.classInitializer = null;
                        KeyboardEvent.initializer = null;
                        KeyboardEvent.classSymbols = null;
                        KeyboardEvent.instanceSymbols = null;
                        KeyboardEvent.KEY_DOWN = "keyDown";
                        KeyboardEvent.KEY_UP = "keyUp";
                        return KeyboardEvent;
                    })(flash.events.Event);
                    events.KeyboardEvent = KeyboardEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MouseEvent = (function (_super) {
                        __extends(MouseEvent, _super);
                        function MouseEvent(type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta) {
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (localX === void 0) { localX = undefined; }
                            if (localY === void 0) { localY = undefined; }
                            if (relatedObject === void 0) { relatedObject = null; }
                            if (ctrlKey === void 0) { ctrlKey = false; }
                            if (altKey === void 0) { altKey = false; }
                            if (shiftKey === void 0) { shiftKey = false; }
                            if (buttonDown === void 0) { buttonDown = false; }
                            if (delta === void 0) { delta = 0; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.MouseEvent");
                        }
                        MouseEvent.typeFromDOMType = function (name) {
                            switch (name) {
                                case "click":
                                    return MouseEvent.CLICK;
                                case "dblclick":
                                    return MouseEvent.DOUBLE_CLICK;
                                case "mousedown":
                                    return MouseEvent.MOUSE_DOWN;
                                case "mouseout":
                                case "mouseover":
                                case "mousemove":
                                    return MouseEvent.MOUSE_MOVE;
                                case "mouseup":
                                    return MouseEvent.MOUSE_UP;
                                default:
                                    notImplemented(name);
                            }
                        };
                        Object.defineProperty(MouseEvent.prototype, "localX", {
                            get: function () {
                                return (this._localX / 20) | 0;
                            },
                            set: function (value) {
                                this._localX = (value * 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "localY", {
                            get: function () {
                                return (this._localY / 20) | 0;
                            },
                            set: function (value) {
                                this._localY = (value * 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "stageX", {
                            get: function () {
                                if (isNaN(this.localX + this.localY)) {
                                    return Number.NaN;
                                }
                                return (this._getGlobalPoint().x / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "stageY", {
                            get: function () {
                                if (isNaN(this.localX + this.localY)) {
                                    return Number.NaN;
                                }
                                return (this._getGlobalPoint().y / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "movementX", {
                            get: function () {
                                return this._movementX || 0;
                            },
                            set: function (value) {
                                this._movementX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "movementY", {
                            get: function () {
                                return this._movementY || 0;
                            },
                            set: function (value) {
                                this._movementY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "delta", {
                            get: function () {
                                return this._delta;
                            },
                            set: function (value) {
                                this._delta = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "ctrlKey", {
                            get: function () {
                                return this._ctrlKey;
                            },
                            set: function (value) {
                                this._ctrlKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "altKey", {
                            get: function () {
                                return this._altKey;
                            },
                            set: function (value) {
                                this._altKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "shiftKey", {
                            get: function () {
                                return this._shiftKey;
                            },
                            set: function (value) {
                                this._shiftKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "buttonDown", {
                            get: function () {
                                return this._buttonDown;
                            },
                            set: function (value) {
                                this._buttonDown = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "relatedObject", {
                            get: function () {
                                return this._relatedObject;
                            },
                            set: function (value) {
                                this._relatedObject = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "isRelatedObjectInaccessible", {
                            get: function () {
                                return this._isRelatedObjectInaccessible;
                            },
                            set: function (value) {
                                this._isRelatedObjectInaccessible = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MouseEvent.prototype.updateAfterEvent = function () {
                            Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'].requestRendering();
                        };
                        MouseEvent.prototype._getGlobalPoint = function () {
                            var point = this._position;
                            if (!point) {
                                point = this._position = new flash.geom.Point();
                            }
                            if (this.target) {
                                point.setTo(this._localX, this._localY);
                                var m = this._target._getConcatenatedMatrix();
                                m.transformPointInPlace(point);
                            }
                            else {
                                point.setTo(0, 0);
                            }
                            return point;
                        };
                        MouseEvent.prototype.clone = function () {
                            return new flash.events.MouseEvent(this.type, this.bubbles, this.cancelable, this.localX, this.localY, this.relatedObject, this.ctrlKey, this.altKey, this.shiftKey, this.buttonDown, this.delta);
                        };
                        MouseEvent.prototype.toString = function () {
                            return this.formatToString('MouseEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'localX', "localY", 'relatedObject', 'ctrlKey', 'altKey', 'shiftKey', 'buttonDown', 'delta');
                        };
                        MouseEvent.classInitializer = null;
                        MouseEvent.initializer = null;
                        MouseEvent.classSymbols = null;
                        MouseEvent.instanceSymbols = null;
                        MouseEvent.CLICK = "click";
                        MouseEvent.DOUBLE_CLICK = "doubleClick";
                        MouseEvent.MOUSE_DOWN = "mouseDown";
                        MouseEvent.MOUSE_MOVE = "mouseMove";
                        MouseEvent.MOUSE_OUT = "mouseOut";
                        MouseEvent.MOUSE_OVER = "mouseOver";
                        MouseEvent.MOUSE_UP = "mouseUp";
                        MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
                        MouseEvent.MOUSE_WHEEL = "mouseWheel";
                        MouseEvent.ROLL_OUT = "rollOut";
                        MouseEvent.ROLL_OVER = "rollOver";
                        MouseEvent.MIDDLE_CLICK = "middleClick";
                        MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
                        MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
                        MouseEvent.RIGHT_CLICK = "rightClick";
                        MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
                        MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
                        MouseEvent.CONTEXT_MENU = "contextMenu";
                        return MouseEvent;
                    })(flash.events.Event);
                    events.MouseEvent = MouseEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var NetStatusEvent = (function (_super) {
                        __extends(NetStatusEvent, _super);
                        function NetStatusEvent(type, bubbles, cancelable, info) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (info === void 0) { info = null; }
                            false && _super.call(this, undefined, undefined, undefined);
                        }
                        Object.defineProperty(NetStatusEvent.prototype, "info", {
                            get: function () {
                                return this._info;
                            },
                            set: function (value) {
                                this._info = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetStatusEvent.prototype.clone = function () {
                            return new flash.events.NetStatusEvent(this.type, this.bubbles, this.cancelable, this.info);
                        };
                        NetStatusEvent.prototype.toString = function () {
                            return this.formatToString('NetStatusEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'info');
                        };
                        NetStatusEvent.classInitializer = null;
                        NetStatusEvent.initializer = null;
                        NetStatusEvent.classSymbols = null;
                        NetStatusEvent.instanceSymbols = null;
                        NetStatusEvent.NET_STATUS = "netStatus";
                        return NetStatusEvent;
                    })(flash.events.Event);
                    events.NetStatusEvent = NetStatusEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ProgressEvent = (function (_super) {
                        __extends(ProgressEvent, _super);
                        function ProgressEvent(type, bubbles, cancelable, bytesLoaded, bytesTotal) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (bytesLoaded === void 0) { bytesLoaded = 0; }
                            if (bytesTotal === void 0) { bytesTotal = 0; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.ProgressEvent");
                        }
                        Object.defineProperty(ProgressEvent.prototype, "bytesLoaded", {
                            get: function () {
                                return this._bytesLoaded;
                            },
                            set: function (value) {
                                this._bytesLoaded = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ProgressEvent.prototype, "bytesTotal", {
                            get: function () {
                                return this._bytesTotal;
                            },
                            set: function (value) {
                                this._bytesTotal = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ProgressEvent.prototype.clone = function () {
                            return new flash.events.ProgressEvent(this._type, this._bubbles, this._cancelable, this._bytesLoaded, this._bytesTotal);
                        };
                        ProgressEvent.prototype.toString = function () {
                            return this.formatToString('ProgressEvent', 'bubbles', 'cancelable', 'eventPhase', 'bytesLoaded', 'bytesTotal');
                        };
                        ProgressEvent.classInitializer = null;
                        ProgressEvent.initializer = null;
                        ProgressEvent.classSymbols = null;
                        ProgressEvent.instanceSymbols = null;
                        ProgressEvent.PROGRESS = "progress";
                        ProgressEvent.SOCKET_DATA = "socketData";
                        return ProgressEvent;
                    })(flash.events.Event);
                    events.ProgressEvent = ProgressEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SecurityErrorEvent = (function (_super) {
                        __extends(SecurityErrorEvent, _super);
                        function SecurityErrorEvent(type, bubbles, cancelable, text, id) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (text === void 0) { text = ""; }
                            if (id === void 0) { id = 0; }
                            _super.call(this, undefined, undefined, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.SecurityErrorEvent");
                        }
                        SecurityErrorEvent.classInitializer = null;
                        SecurityErrorEvent.initializer = null;
                        SecurityErrorEvent.classSymbols = null;
                        SecurityErrorEvent.instanceSymbols = null;
                        SecurityErrorEvent.SECURITY_ERROR = "securityError";
                        return SecurityErrorEvent;
                    })(flash.events.ErrorEvent);
                    events.SecurityErrorEvent = SecurityErrorEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TimerEvent = (function (_super) {
                        __extends(TimerEvent, _super);
                        function TimerEvent(type, bubbles, cancelable) {
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.TimerEvent");
                        }
                        TimerEvent.prototype.clone = function () {
                            return new events.TimerEvent(this.type, this.bubbles, this.cancelable);
                        };
                        TimerEvent.prototype.toString = function () {
                            return this.formatToString('TimerEvent', 'type', 'bubbles', 'cancelable', 'eventPhase');
                        };
                        TimerEvent.prototype.updateAfterEvent = function () {
                            Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'].requestRendering();
                        };
                        TimerEvent.classInitializer = null;
                        TimerEvent.initializer = null;
                        TimerEvent.classSymbols = null;
                        TimerEvent.instanceSymbols = null;
                        TimerEvent.TIMER = "timer";
                        TimerEvent.TIMER_COMPLETE = "timerComplete";
                        return TimerEvent;
                    })(flash.events.Event);
                    events.TimerEvent = TimerEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TouchEvent = (function (_super) {
                        __extends(TouchEvent, _super);
                        function TouchEvent(type, bubbles, cancelable, touchPointID, isPrimaryTouchPoint, localX, localY, sizeX, sizeY, pressure, relatedObject, ctrlKey, altKey, shiftKey) {
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (touchPointID === void 0) { touchPointID = 0; }
                            if (isPrimaryTouchPoint === void 0) { isPrimaryTouchPoint = false; }
                            if (localX === void 0) { localX = NaN; }
                            if (localY === void 0) { localY = NaN; }
                            if (sizeX === void 0) { sizeX = NaN; }
                            if (sizeY === void 0) { sizeY = NaN; }
                            if (pressure === void 0) { pressure = NaN; }
                            if (relatedObject === void 0) { relatedObject = null; }
                            if (ctrlKey === void 0) { ctrlKey = false; }
                            if (altKey === void 0) { altKey = false; }
                            if (shiftKey === void 0) { shiftKey = false; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.TouchEvent");
                        }
                        Object.defineProperty(TouchEvent.prototype, "touchPointID", {
                            get: function () {
                                return this._touchPointID;
                            },
                            set: function (value) {
                                this._touchPointID = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "isPrimaryTouchPoint", {
                            get: function () {
                                return this._isPrimaryTouchPoint;
                            },
                            set: function (value) {
                                this._isPrimaryTouchPoint = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "localX", {
                            get: function () {
                                return this._localX;
                            },
                            set: function (value) {
                                this._localX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "localY", {
                            get: function () {
                                return this._localY;
                            },
                            set: function (value) {
                                this._localY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "sizeX", {
                            get: function () {
                                return this._sizeX;
                            },
                            set: function (value) {
                                this._sizeX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "sizeY", {
                            get: function () {
                                return this._sizeY;
                            },
                            set: function (value) {
                                this._sizeY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "pressure", {
                            get: function () {
                                return this._pressure;
                            },
                            set: function (value) {
                                this._pressure = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "relatedObject", {
                            get: function () {
                                return this._relatedObject;
                            },
                            set: function (value) {
                                this._relatedObject = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "ctrlKey", {
                            get: function () {
                                return this._ctrlKey;
                            },
                            set: function (value) {
                                this._ctrlKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "altKey", {
                            get: function () {
                                return this._altKey;
                            },
                            set: function (value) {
                                this._altKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "shiftKey", {
                            get: function () {
                                return this._shiftKey;
                            },
                            set: function (value) {
                                this._shiftKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "stageX", {
                            get: function () {
                                somewhatImplemented('TouchEvent::get stageX');
                                return this._localX;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "stageY", {
                            get: function () {
                                somewhatImplemented('TouchEvent::get stageY');
                                return this._localY;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "isRelatedObjectInaccessible", {
                            get: function () {
                                return this._isRelatedObjectInaccessible;
                            },
                            set: function (value) {
                                this._isRelatedObjectInaccessible = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TouchEvent.prototype.clone = function () {
                            return new events.TouchEvent(this.type, this.bubbles, this.cancelable, this.touchPointID, this.isPrimaryTouchPoint, this.localX, this.localY, this.sizeX, this.sizeY, this.pressure, this.relatedObject, this.ctrlKey, this.altKey, this.shiftKey);
                        };
                        TouchEvent.prototype.toString = function () {
                            return this.formatToString('TouchEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'touchPointID', 'isPrimaryTouchPoint', 'localX', 'localY', 'sizeX', 'sizeY', 'pressure', 'relatedObject', 'ctrlKey', 'altKey', 'shiftKey');
                        };
                        TouchEvent.prototype.updateAfterEvent = function () {
                            Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'].requestRendering();
                        };
                        TouchEvent.classInitializer = null;
                        TouchEvent.initializer = null;
                        TouchEvent.classSymbols = null;
                        TouchEvent.instanceSymbols = null;
                        TouchEvent.TOUCH_BEGIN = "touchBegin";
                        TouchEvent.TOUCH_END = "touchEnd";
                        TouchEvent.TOUCH_MOVE = "touchMove";
                        TouchEvent.TOUCH_OVER = "touchOver";
                        TouchEvent.TOUCH_OUT = "touchOut";
                        TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
                        TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
                        TouchEvent.TOUCH_TAP = "touchTap";
                        TouchEvent.PROXIMITY_BEGIN = "proximityBegin";
                        TouchEvent.PROXIMITY_END = "proximityEnd";
                        TouchEvent.PROXIMITY_MOVE = "proximityMove";
                        TouchEvent.PROXIMITY_OUT = "proximityOut";
                        TouchEvent.PROXIMITY_OVER = "proximityOver";
                        TouchEvent.PROXIMITY_ROLL_OUT = "proximityRollOut";
                        TouchEvent.PROXIMITY_ROLL_OVER = "proximityRollOver";
                        return TouchEvent;
                    })(flash.events.Event);
                    events.TouchEvent = TouchEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var UncaughtErrorEvent = (function (_super) {
                        __extends(UncaughtErrorEvent, _super);
                        function UncaughtErrorEvent(type, bubbles, cancelable, error_in) {
                            if (type === void 0) { type = "uncaughtError"; }
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = true; }
                            if (error_in === void 0) { error_in = null; }
                            _super.call(this, undefined, undefined, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.UncaughtErrorEvent");
                        }
                        UncaughtErrorEvent.classInitializer = null;
                        UncaughtErrorEvent.initializer = null;
                        UncaughtErrorEvent.classSymbols = null;
                        UncaughtErrorEvent.instanceSymbols = null;
                        UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
                        return UncaughtErrorEvent;
                    })(flash.events.ErrorEvent);
                    events.UncaughtErrorEvent = UncaughtErrorEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var UncaughtErrorEvents = (function (_super) {
                        __extends(UncaughtErrorEvents, _super);
                        function UncaughtErrorEvents() {
                            false && _super.call(this);
                            events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                        }
                        UncaughtErrorEvents.classInitializer = null;
                        UncaughtErrorEvents.initializer = null;
                        UncaughtErrorEvents.classSymbols = null;
                        UncaughtErrorEvents.instanceSymbols = null;
                        return UncaughtErrorEvents;
                    })(flash.events.EventDispatcher);
                    events.UncaughtErrorEvents = UncaughtErrorEvents;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var isNullOrUndefined = Shumway.isNullOrUndefined;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var checkNullParameter = Shumway.AVM2.Runtime.checkNullParameter;
                    var assert = Shumway.Debug.assert;
                    var Bounds = Shumway.Bounds;
                    var geom = flash.geom;
                    var events = flash.events;
                    var PlaceObjectFlags = Shumway.SWF.Parser.PlaceObjectFlags;
                    (function (DisplayObjectFlags) {
                        DisplayObjectFlags[DisplayObjectFlags["None"] = 0x0000] = "None";
                        DisplayObjectFlags[DisplayObjectFlags["Visible"] = 0x0001] = "Visible";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidLineBounds"] = 0x0002] = "InvalidLineBounds";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidFillBounds"] = 0x0004] = "InvalidFillBounds";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidMatrix"] = 0x0008] = "InvalidMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidInvertedMatrix"] = 0x0010] = "InvalidInvertedMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidConcatenatedMatrix"] = 0x0020] = "InvalidConcatenatedMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidInvertedConcatenatedMatrix"] = 0x0040] = "InvalidInvertedConcatenatedMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidConcatenatedColorTransform"] = 0x0080] = "InvalidConcatenatedColorTransform";
                        DisplayObjectFlags[DisplayObjectFlags["Constructed"] = 0x0100] = "Constructed";
                        DisplayObjectFlags[DisplayObjectFlags["Destroyed"] = 0x0200] = "Destroyed";
                        DisplayObjectFlags[DisplayObjectFlags["NeedsLoadEvent"] = 0x0400] = "NeedsLoadEvent";
                        DisplayObjectFlags[DisplayObjectFlags["OwnedByTimeline"] = 0x0800] = "OwnedByTimeline";
                        DisplayObjectFlags[DisplayObjectFlags["AnimatedByTimeline"] = 0x1000] = "AnimatedByTimeline";
                        DisplayObjectFlags[DisplayObjectFlags["HasFrameScriptPending"] = 0x2000] = "HasFrameScriptPending";
                        DisplayObjectFlags[DisplayObjectFlags["ContainsFrameScriptPendingChildren"] = 0x4000] = "ContainsFrameScriptPendingChildren";
                        DisplayObjectFlags[DisplayObjectFlags["ContainsMorph"] = 0x8000] = "ContainsMorph";
                        DisplayObjectFlags[DisplayObjectFlags["CacheAsBitmap"] = 0x010000] = "CacheAsBitmap";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyMatrix"] = 0x100000] = "DirtyMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyChildren"] = 0x200000] = "DirtyChildren";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyGraphics"] = 0x400000] = "DirtyGraphics";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyTextContent"] = 0x800000] = "DirtyTextContent";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyBitmapData"] = 0x1000000] = "DirtyBitmapData";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyNetStream"] = 0x2000000] = "DirtyNetStream";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyColorTransform"] = 0x4000000] = "DirtyColorTransform";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyMask"] = 0x8000000] = "DirtyMask";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyClipDepth"] = 0x10000000] = "DirtyClipDepth";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyDescendents"] = 0x20000000] = "DirtyDescendents";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyMiscellaneousProperties"] = 0x40000000] = "DirtyMiscellaneousProperties";
                        DisplayObjectFlags[DisplayObjectFlags["Dirty"] = DisplayObjectFlags.DirtyMatrix | DisplayObjectFlags.DirtyChildren | DisplayObjectFlags.DirtyGraphics | DisplayObjectFlags.DirtyTextContent | DisplayObjectFlags.DirtyBitmapData | DisplayObjectFlags.DirtyNetStream | DisplayObjectFlags.DirtyColorTransform | DisplayObjectFlags.DirtyMask | DisplayObjectFlags.DirtyClipDepth | DisplayObjectFlags.DirtyMiscellaneousProperties] = "Dirty";
                        DisplayObjectFlags[DisplayObjectFlags["Bubbling"] = DisplayObjectFlags.ContainsFrameScriptPendingChildren | DisplayObjectFlags.ContainsMorph] = "Bubbling";
                    })(display.DisplayObjectFlags || (display.DisplayObjectFlags = {}));
                    var DisplayObjectFlags = display.DisplayObjectFlags;
                    (function (VisitorFlags) {
                        VisitorFlags[VisitorFlags["None"] = 0] = "None";
                        VisitorFlags[VisitorFlags["Continue"] = 0] = "Continue";
                        VisitorFlags[VisitorFlags["Stop"] = 0x01] = "Stop";
                        VisitorFlags[VisitorFlags["Skip"] = 0x02] = "Skip";
                        VisitorFlags[VisitorFlags["FrontToBack"] = 0x08] = "FrontToBack";
                        VisitorFlags[VisitorFlags["Filter"] = 0x10] = "Filter";
                    })(display.VisitorFlags || (display.VisitorFlags = {}));
                    var VisitorFlags = display.VisitorFlags;
                    (function (HitTestingType) {
                        HitTestingType[HitTestingType["HitTestBounds"] = 0] = "HitTestBounds";
                        HitTestingType[HitTestingType["HitTestBoundsAndMask"] = 1] = "HitTestBoundsAndMask";
                        HitTestingType[HitTestingType["HitTestShape"] = 2] = "HitTestShape";
                        HitTestingType[HitTestingType["Mouse"] = 3] = "Mouse";
                        HitTestingType[HitTestingType["ObjectsUnderPoint"] = 4] = "ObjectsUnderPoint";
                        HitTestingType[HitTestingType["Drop"] = 5] = "Drop";
                    })(display.HitTestingType || (display.HitTestingType = {}));
                    var HitTestingType = display.HitTestingType;
                    (function (HitTestingResult) {
                        HitTestingResult[HitTestingResult["None"] = 0] = "None";
                        HitTestingResult[HitTestingResult["Bounds"] = 1] = "Bounds";
                        HitTestingResult[HitTestingResult["Shape"] = 2] = "Shape";
                    })(display.HitTestingResult || (display.HitTestingResult = {}));
                    var HitTestingResult = display.HitTestingResult;
                    var DisplayObject = (function (_super) {
                        __extends(DisplayObject, _super);
                        function DisplayObject() {
                            false && _super.call(this, undefined);
                            events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._addReference();
                            this._setFlags(256 /* Constructed */);
                        }
                        DisplayObject.getNextSyncID = function () {
                            return this._syncID++;
                        };
                        DisplayObject.reset = function () {
                            this._advancableInstances = new Shumway.WeakList();
                        };
                        DisplayObject.prototype.createAnimatedDisplayObject = function (symbol, placeObjectTag, callConstructor) {
                            var symbolClass = symbol.symbolClass;
                            var instance;
                            if (symbolClass.isSubtypeOf(flash.display.BitmapData)) {
                                instance = flash.display.Bitmap.initializeFrom(symbol);
                            }
                            else {
                                instance = symbolClass.initializeFrom(symbol);
                            }
                            if (placeObjectTag.flags & 32 /* HasName */) {
                                instance._name = placeObjectTag.name;
                            }
                            instance._setFlags(4096 /* AnimatedByTimeline */);
                            instance._animate(placeObjectTag);
                            if (callConstructor) {
                                symbolClass.instanceConstructorNoInitialize.call(instance);
                            }
                            return instance;
                        };
                        DisplayObject.performFrameNavigation = function (mainLoop, runScripts) {
                            if (mainLoop) {
                                DisplayObject._runScripts = runScripts;
                            }
                            else {
                                runScripts = DisplayObject._runScripts;
                            }
                            release || assert(display.DisplayObject._advancableInstances.length < 1024 * 16, "Too many advancable instances.");
                            AVM2.enterTimeline("DisplayObject.InitFrame");
                            display.DisplayObject._advancableInstances.forEach(function (value) {
                                value._initFrame(mainLoop);
                            });
                            AVM2.leaveTimeline();
                            AVM2.enterTimeline("DisplayObject.EnterFrame");
                            if (mainLoop && runScripts) {
                                DisplayObject._broadcastFrameEvent(events.Event.ENTER_FRAME);
                            }
                            AVM2.leaveTimeline();
                            AVM2.enterTimeline("DisplayObject.ConstructFrame");
                            display.DisplayObject._advancableInstances.forEach(function (value) {
                                value._constructFrame();
                            });
                            AVM2.leaveTimeline();
                            if (runScripts) {
                                AVM2.enterTimeline("DisplayObject.FrameConstructed");
                                DisplayObject._broadcastFrameEvent(events.Event.FRAME_CONSTRUCTED);
                                AVM2.leaveTimeline();
                                AVM2.enterTimeline("DisplayObject.EnqueueFrameScripts");
                                display.DisplayObject._advancableInstances.forEach(function (value) {
                                    var container = value;
                                    if (display.DisplayObjectContainer.isInstanceOf(container) && !container.parent) {
                                        container._enqueueFrameScripts();
                                    }
                                });
                                flash.display.DisplayObject._stage._enqueueFrameScripts();
                                AVM2.leaveTimeline();
                                AVM2.enterTimeline("DisplayObject.RunFrameScript");
                                display.MovieClip.runFrameScripts();
                                AVM2.leaveTimeline();
                                AVM2.enterTimeline("DisplayObject.ExitFrame");
                                DisplayObject._broadcastFrameEvent(events.Event.EXIT_FRAME);
                                AVM2.leaveTimeline();
                            }
                            else {
                                display.MovieClip.reset();
                            }
                            if (mainLoop) {
                                DisplayObject._runScripts = true;
                            }
                        };
                        DisplayObject._broadcastFrameEvent = function (type) {
                            var event;
                            switch (type) {
                                case events.Event.ENTER_FRAME:
                                case events.Event.FRAME_CONSTRUCTED:
                                case events.Event.EXIT_FRAME:
                                case events.Event.RENDER:
                                    event = events.Event.getBroadcastInstance(type);
                            }
                            release || assert(event, "Invalid frame event.");
                            events.EventDispatcher.broadcastEventDispatchQueue.dispatchEvent(event);
                        };
                        DisplayObject.prototype._setInitialName = function () {
                            this._name = 'instance' + (flash.display.DisplayObject._instanceID++);
                        };
                        DisplayObject.prototype._setParent = function (parent, depth) {
                            var oldParent = this._parent;
                            release || assert(parent !== this);
                            this._parent = parent;
                            this._setDepth(depth);
                            if (parent) {
                                this._addReference();
                                var bubblingFlags = 0 /* None */;
                                if (this._hasFlags(8192 /* HasFrameScriptPending */)) {
                                    bubblingFlags |= 16384 /* ContainsFrameScriptPendingChildren */;
                                }
                                if (this._hasAnyFlags(DisplayObjectFlags.Bubbling)) {
                                    bubblingFlags |= this._displayObjectFlags & DisplayObjectFlags.Bubbling;
                                }
                                if (bubblingFlags) {
                                    parent._propagateFlagsUp(bubblingFlags);
                                }
                            }
                            if (oldParent) {
                                this._removeReference();
                            }
                        };
                        DisplayObject.prototype._setDepth = function (value) {
                            if (value > -1) {
                                this._setFlags(2048 /* OwnedByTimeline */);
                            }
                            else {
                                this._removeFlags(2048 /* OwnedByTimeline */);
                            }
                            this._depth = value;
                        };
                        DisplayObject.prototype._setFillAndLineBoundsFromWidthAndHeight = function (width, height) {
                            this._fillBounds.width = width;
                            this._fillBounds.height = height;
                            this._lineBounds.width = width;
                            this._lineBounds.height = height;
                            this._removeFlags(2 /* InvalidLineBounds */ | 4 /* InvalidFillBounds */);
                            this._invalidateParentFillAndLineBounds(true, true);
                        };
                        DisplayObject.prototype._setFillAndLineBoundsFromSymbol = function (symbol) {
                            release || assert(symbol.fillBounds || symbol.lineBounds, "Fill or Line bounds are not defined in the symbol.");
                            if (symbol.fillBounds) {
                                this._fillBounds.copyFrom(symbol.fillBounds);
                                this._removeFlags(4 /* InvalidFillBounds */);
                            }
                            if (symbol.lineBounds) {
                                this._lineBounds.copyFrom(symbol.lineBounds);
                                this._removeFlags(2 /* InvalidLineBounds */);
                            }
                            this._invalidateParentFillAndLineBounds(!!symbol.fillBounds, !!symbol.lineBounds);
                        };
                        DisplayObject.prototype._setFlags = function (flags) {
                            this._displayObjectFlags |= flags;
                        };
                        DisplayObject.prototype._setDirtyFlags = function (flags) {
                            this._displayObjectFlags |= flags;
                            if (this._parent) {
                                this._parent._propagateFlagsUp(536870912 /* DirtyDescendents */);
                            }
                        };
                        DisplayObject.prototype._toggleFlags = function (flags, on) {
                            if (on) {
                                this._displayObjectFlags |= flags;
                            }
                            else {
                                this._displayObjectFlags &= ~flags;
                            }
                        };
                        DisplayObject.prototype._removeFlags = function (flags) {
                            this._displayObjectFlags &= ~flags;
                        };
                        DisplayObject.prototype._hasFlags = function (flags) {
                            return (this._displayObjectFlags & flags) === flags;
                        };
                        DisplayObject.prototype._hasAnyFlags = function (flags) {
                            return !!(this._displayObjectFlags & flags);
                        };
                        DisplayObject.prototype._propagateFlagsUp = function (flags) {
                            if (this._hasFlags(flags)) {
                                return;
                            }
                            this._setFlags(flags);
                            var parent = this._parent;
                            if (parent) {
                                parent._propagateFlagsUp(flags);
                            }
                        };
                        DisplayObject.prototype._propagateFlagsDown = function (flags) {
                            this._setFlags(flags);
                        };
                        DisplayObject.prototype._findNearestAncestor = function (flags, on) {
                            var node = this;
                            while (node) {
                                if (node._hasFlags(flags) === on) {
                                    return node;
                                }
                                node = node._parent;
                            }
                            return null;
                        };
                        DisplayObject.prototype._findFurthestAncestorOrSelf = function () {
                            var node = this;
                            while (node) {
                                if (!node._parent) {
                                    return node;
                                }
                                node = node._parent;
                            }
                        };
                        DisplayObject.prototype._isAncestor = function (child) {
                            var node = child;
                            while (node) {
                                if (node === this) {
                                    return true;
                                }
                                node = node._parent;
                            }
                            return false;
                        };
                        DisplayObject._clampRotation = function (value) {
                            value %= 360;
                            if (value > 180) {
                                value -= 360;
                            }
                            else if (value < -180) {
                                value += 360;
                            }
                            return value;
                        };
                        DisplayObject._getAncestors = function (node, last) {
                            var path = DisplayObject._path;
                            path.length = 0;
                            while (node && node !== last) {
                                path.push(node);
                                node = node._parent;
                            }
                            release || assert(node === last, "Last ancestor is not an ancestor.");
                            return path;
                        };
                        DisplayObject.prototype._getConcatenatedMatrix = function () {
                            if (this._hasFlags(32 /* InvalidConcatenatedMatrix */)) {
                                if (this._parent) {
                                    this._parent._getConcatenatedMatrix().preMultiplyInto(this._getMatrix(), this._concatenatedMatrix);
                                }
                                else {
                                    this._concatenatedMatrix.copyFrom(this._getMatrix());
                                }
                                this._removeFlags(32 /* InvalidConcatenatedMatrix */);
                            }
                            return this._concatenatedMatrix;
                        };
                        DisplayObject.prototype._getInvertedConcatenatedMatrix = function () {
                            if (this._hasFlags(64 /* InvalidInvertedConcatenatedMatrix */)) {
                                this._getConcatenatedMatrix().invertInto(this._invertedConcatenatedMatrix);
                                this._removeFlags(64 /* InvalidInvertedConcatenatedMatrix */);
                            }
                            return this._invertedConcatenatedMatrix;
                        };
                        DisplayObject.prototype._setMatrix = function (matrix, toTwips) {
                            if (!toTwips && this._matrix.equals(matrix)) {
                                return;
                            }
                            var m = this._matrix;
                            m.copyFrom(matrix);
                            if (toTwips) {
                                m.toTwipsInPlace();
                            }
                            this._scaleX = m.getScaleX();
                            this._scaleY = m.getScaleY();
                            this._skewX = matrix.getSkewX();
                            this._skewY = matrix.getSkewY();
                            this._rotation = DisplayObject._clampRotation(this._skewY * 180 / Math.PI);
                            this._removeFlags(8 /* InvalidMatrix */);
                            this._setFlags(16 /* InvalidInvertedMatrix */);
                            this._setDirtyFlags(1048576 /* DirtyMatrix */);
                            this._invalidatePosition();
                        };
                        DisplayObject.prototype._getMatrix = function () {
                            if (this._hasFlags(8 /* InvalidMatrix */)) {
                                this._matrix.updateScaleAndRotation(this._scaleX, this._scaleY, this._skewX, this._skewY);
                                this._removeFlags(8 /* InvalidMatrix */);
                            }
                            return this._matrix;
                        };
                        DisplayObject.prototype._getInvertedMatrix = function () {
                            if (this._hasFlags(16 /* InvalidInvertedMatrix */)) {
                                this._getMatrix().invertInto(this._invertedMatrix);
                                this._removeFlags(16 /* InvalidInvertedMatrix */);
                            }
                            return this._invertedMatrix;
                        };
                        DisplayObject.prototype._getConcatenatedColorTransform = function () {
                            if (!this.stage) {
                                return this._colorTransform.clone();
                            }
                            if (this._hasFlags(128 /* InvalidConcatenatedColorTransform */)) {
                                var ancestor = this._findNearestAncestor(128 /* InvalidConcatenatedColorTransform */, false);
                                var path = DisplayObject._getAncestors(this, ancestor);
                                var i = path.length - 1;
                                if (flash.display.Stage.isType(path[i])) {
                                    i--;
                                }
                                var m = ancestor && !flash.display.Stage.isType(ancestor) ? ancestor._concatenatedColorTransform.clone() : new geom.ColorTransform();
                                while (i >= 0) {
                                    ancestor = path[i--];
                                    release || assert(ancestor._hasFlags(128 /* InvalidConcatenatedColorTransform */));
                                    m.preMultiply(ancestor._colorTransform);
                                    m.convertToFixedPoint();
                                    ancestor._concatenatedColorTransform.copyFrom(m);
                                    ancestor._removeFlags(128 /* InvalidConcatenatedColorTransform */);
                                }
                            }
                            return this._concatenatedColorTransform;
                        };
                        DisplayObject.prototype._setColorTransform = function (colorTransform) {
                            this._colorTransform.copyFrom(colorTransform);
                            this._colorTransform.convertToFixedPoint();
                            this._propagateFlagsDown(128 /* InvalidConcatenatedColorTransform */);
                            this._setDirtyFlags(67108864 /* DirtyColorTransform */);
                        };
                        DisplayObject.prototype._invalidateFillAndLineBounds = function (fill, line) {
                            this._propagateFlagsUp((line ? 2 /* InvalidLineBounds */ : 0) | (fill ? 4 /* InvalidFillBounds */ : 0));
                        };
                        DisplayObject.prototype._invalidateParentFillAndLineBounds = function (fill, line) {
                            if (this._parent) {
                                this._parent._invalidateFillAndLineBounds(fill, line);
                            }
                        };
                        DisplayObject.prototype._getContentBounds = function (includeStrokes) {
                            if (includeStrokes === void 0) { includeStrokes = true; }
                            var invalidFlag;
                            var bounds;
                            if (includeStrokes) {
                                invalidFlag = 2 /* InvalidLineBounds */;
                                bounds = this._lineBounds;
                            }
                            else {
                                invalidFlag = 4 /* InvalidFillBounds */;
                                bounds = this._fillBounds;
                            }
                            if (this._hasFlags(invalidFlag)) {
                                var graphics = this._getGraphics();
                                if (graphics) {
                                    bounds.copyFrom(graphics._getContentBounds(includeStrokes));
                                }
                                else {
                                    bounds.setToSentinels();
                                }
                                this._getChildBounds(bounds, includeStrokes);
                                this._removeFlags(invalidFlag);
                            }
                            return bounds;
                        };
                        DisplayObject.prototype._getChildBounds = function (bounds, includeStrokes) {
                        };
                        DisplayObject.prototype._getTransformedBounds = function (targetCoordinateSpace, includeStroke) {
                            var bounds = this._getContentBounds(includeStroke).clone();
                            if (targetCoordinateSpace === this || bounds.isEmpty()) {
                                return bounds;
                            }
                            var m;
                            if (targetCoordinateSpace) {
                                m = geom.Matrix.TEMP_MATRIX;
                                var invertedTargetMatrix = targetCoordinateSpace._getInvertedConcatenatedMatrix();
                                invertedTargetMatrix.preMultiplyInto(this._getConcatenatedMatrix(), m);
                            }
                            else {
                                m = this._getConcatenatedMatrix();
                            }
                            m.transformBounds(bounds);
                            return bounds;
                        };
                        DisplayObject.prototype._stopTimelineAnimation = function () {
                            this._removeFlags(4096 /* AnimatedByTimeline */);
                        };
                        DisplayObject.prototype._invalidateMatrix = function () {
                            this._setDirtyFlags(1048576 /* DirtyMatrix */);
                            this._setFlags(8 /* InvalidMatrix */ | 16 /* InvalidInvertedMatrix */);
                            this._invalidatePosition();
                        };
                        DisplayObject.prototype._invalidatePosition = function () {
                            this._propagateFlagsDown(32 /* InvalidConcatenatedMatrix */ | 64 /* InvalidInvertedConcatenatedMatrix */);
                            this._invalidateParentFillAndLineBounds(true, true);
                        };
                        DisplayObject.prototype._animate = function (placeObjectTag) {
                            release || assert(this._hasFlags(4096 /* AnimatedByTimeline */));
                            var reset = !(placeObjectTag.flags & 1 /* Move */) && placeObjectTag.flags & 2 /* HasCharacter */;
                            if (placeObjectTag.flags & 4 /* HasMatrix */) {
                                geom.Matrix.TEMP_MATRIX.copyFromUntyped(placeObjectTag.matrix);
                                this._setMatrix(geom.Matrix.TEMP_MATRIX, false);
                            }
                            else if (reset) {
                                this._setMatrix(geom.Matrix.FROZEN_IDENTITY_MATRIX, false);
                            }
                            if (placeObjectTag.flags & 8 /* HasColorTransform */) {
                                geom.ColorTransform.TEMP_COLOR_TRANSFORM.copyFromUntyped(placeObjectTag.cxform);
                                this._setColorTransform(geom.ColorTransform.TEMP_COLOR_TRANSFORM);
                            }
                            else if (reset) {
                                this._setColorTransform(geom.ColorTransform.FROZEN_IDENTITY_COLOR_TRANSFORM);
                            }
                            if (placeObjectTag.flags & 16 /* HasRatio */ || reset) {
                                var ratio = placeObjectTag.ratio | 0;
                                if (ratio !== this._ratio) {
                                    release || assert(ratio >= 0 && ratio <= 0xffff);
                                    this._ratio = ratio;
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            }
                            if (placeObjectTag.flags & 64 /* HasClipDepth */ || reset) {
                                var clipDepth = placeObjectTag.clipDepth === undefined ? -1 : placeObjectTag.clipDepth;
                                if (clipDepth !== this._clipDepth) {
                                    this._clipDepth = clipDepth;
                                    this._setDirtyFlags(268435456 /* DirtyClipDepth */);
                                }
                            }
                            if (placeObjectTag.flags & 256 /* HasFilterList */) {
                                var filters = [];
                                var swfFilters = placeObjectTag.filters;
                                for (var i = 0; i < swfFilters.length; i++) {
                                    var obj = swfFilters[i];
                                    var filter;
                                    switch (obj.type) {
                                        case 0:
                                            filter = flash.filters.DropShadowFilter.FromUntyped(obj);
                                            break;
                                        case 1:
                                            filter = flash.filters.BlurFilter.FromUntyped(obj);
                                            break;
                                        case 2:
                                            filter = flash.filters.GlowFilter.FromUntyped(obj);
                                            break;
                                        case 3:
                                            filter = flash.filters.BevelFilter.FromUntyped(obj);
                                            break;
                                        case 4:
                                            filter = flash.filters.GradientGlowFilter.FromUntyped(obj);
                                            break;
                                        case 5:
                                            filter = flash.filters.ConvolutionFilter.FromUntyped(obj);
                                            break;
                                        case 6:
                                            filter = flash.filters.ColorMatrixFilter.FromUntyped(obj);
                                            break;
                                        case 7:
                                            filter = flash.filters.GradientBevelFilter.FromUntyped(obj);
                                            break;
                                        default:
                                            release || assert(filter, "Unknown filter type.");
                                    }
                                    filters.push(filter);
                                }
                                this._filters = filters;
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            }
                            else if (reset) {
                                this._filters = null;
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            }
                            if (placeObjectTag.flags & 512 /* HasBlendMode */ || reset) {
                                var blendMode = flash.display.BlendMode.fromNumber(placeObjectTag.blendMode === undefined ? 1 : placeObjectTag.blendMode);
                                if (blendMode !== this._blendMode) {
                                    this._blendMode = blendMode;
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            }
                            if (placeObjectTag.flags & 1024 /* HasCacheAsBitmap */ || reset) {
                                var cacheAsBitmap = placeObjectTag.bmpCache > 0;
                                if (cacheAsBitmap !== this._hasFlags(65536 /* CacheAsBitmap */)) {
                                    this._toggleFlags(65536 /* CacheAsBitmap */, cacheAsBitmap);
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            }
                            if (placeObjectTag.flags & 8192 /* HasVisible */ || reset) {
                                var visible = placeObjectTag.visibility !== 0;
                                if (visible !== this._hasFlags(1 /* Visible */)) {
                                    this._toggleFlags(1 /* Visible */, visible);
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            }
                        };
                        DisplayObject.prototype._propagateEvent = function (event) {
                            this.visit(function (node) {
                                node.dispatchEvent(event);
                                return 0 /* Continue */;
                            }, 0 /* None */);
                        };
                        Object.defineProperty(DisplayObject.prototype, "x", {
                            get: function () {
                                return this._getX();
                            },
                            set: function (value) {
                                value = (value * 20) | 0;
                                this._stopTimelineAnimation();
                                if (this._canHaveTextContent()) {
                                    var bounds = this._getContentBounds();
                                    value -= bounds.xMin;
                                }
                                if (value === this._matrix.tx) {
                                    return;
                                }
                                this._matrix.tx = value;
                                this._invertedMatrix.tx = -value;
                                this._invalidatePosition();
                                this._setDirtyFlags(1048576 /* DirtyMatrix */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getX = function () {
                            var value = this._matrix.tx;
                            if (this._canHaveTextContent()) {
                                var bounds = this._getContentBounds();
                                value += bounds.xMin;
                            }
                            return value / 20;
                        };
                        Object.defineProperty(DisplayObject.prototype, "y", {
                            get: function () {
                                return this._getY();
                            },
                            set: function (value) {
                                value = (value * 20) | 0;
                                this._stopTimelineAnimation();
                                if (this._canHaveTextContent()) {
                                    var bounds = this._getContentBounds();
                                    value -= bounds.yMin;
                                }
                                if (value === this._matrix.ty) {
                                    return;
                                }
                                this._matrix.ty = value;
                                this._invertedMatrix.ty = -value;
                                this._invalidatePosition();
                                this._setDirtyFlags(1048576 /* DirtyMatrix */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getY = function () {
                            var value = this._matrix.ty;
                            if (this._canHaveTextContent()) {
                                var bounds = this._getContentBounds();
                                value += bounds.yMin;
                            }
                            return value / 20;
                        };
                        Object.defineProperty(DisplayObject.prototype, "scaleX", {
                            get: function () {
                                return Math.abs(this._scaleX);
                            },
                            set: function (value) {
                                value = +value;
                                this._stopTimelineAnimation();
                                if (value === this._scaleX) {
                                    return;
                                }
                                this._scaleX = value;
                                this._invalidateMatrix();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "scaleY", {
                            get: function () {
                                return this._scaleY;
                            },
                            set: function (value) {
                                value = +value;
                                this._stopTimelineAnimation();
                                if (value === this._scaleY) {
                                    return;
                                }
                                this._scaleY = value;
                                this._invalidateMatrix();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "scaleZ", {
                            get: function () {
                                return this._scaleZ;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public DisplayObject::set scaleZ");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "rotation", {
                            get: function () {
                                return this._rotation;
                            },
                            set: function (value) {
                                value = +value;
                                this._stopTimelineAnimation();
                                value = DisplayObject._clampRotation(value);
                                if (value === this._rotation) {
                                    return;
                                }
                                var delta = value - this._rotation;
                                var angle = delta / 180 * Math.PI;
                                this._skewX += angle;
                                this._skewY += angle;
                                this._rotation = value;
                                this._invalidateMatrix();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "rotationX", {
                            get: function () {
                                return this._rotationX;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public DisplayObject::set rotationX");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "rotationY", {
                            get: function () {
                                return this._rotationY;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public DisplayObject::set rotationY");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "rotationZ", {
                            get: function () {
                                return this._rotationZ;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public DisplayObject::set rotationZ");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "width", {
                            get: function () {
                                return this._getWidth();
                            },
                            set: function (value) {
                                this._setWidth(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getWidth = function () {
                            return this._getTransformedBounds(this._parent, true).width / 20;
                        };
                        DisplayObject.prototype._setWidth = function (value) {
                            value = (value * 20) | 0;
                            this._stopTimelineAnimation();
                            if (value < 0) {
                                return;
                            }
                            var contentBounds = this._getContentBounds(true);
                            if (this._canHaveTextContent()) {
                                var bounds = this._getContentBounds();
                                this._setFillAndLineBoundsFromWidthAndHeight(value, contentBounds.height);
                                return;
                            }
                            var bounds = this._getTransformedBounds(this._parent, true);
                            var angle = this._rotation / 180 * Math.PI;
                            var baseWidth = contentBounds.getBaseWidth(angle);
                            if (!baseWidth) {
                                return;
                            }
                            var baseHeight = contentBounds.getBaseHeight(angle);
                            this._scaleY = bounds.height / baseHeight;
                            this._scaleX = value / baseWidth;
                            this._invalidateMatrix();
                        };
                        Object.defineProperty(DisplayObject.prototype, "height", {
                            get: function () {
                                return this._getHeight();
                            },
                            set: function (value) {
                                this._setHeight(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getHeight = function () {
                            var bounds = this._getTransformedBounds(this._parent, true);
                            return bounds.height / 20;
                        };
                        DisplayObject.prototype._setHeight = function (value) {
                            value = (value * 20) | 0;
                            this._stopTimelineAnimation();
                            if (value < 0) {
                                return;
                            }
                            var contentBounds = this._getContentBounds(true);
                            if (this._canHaveTextContent()) {
                                var bounds = this._getContentBounds();
                                this._setFillAndLineBoundsFromWidthAndHeight(contentBounds.width, value);
                                return;
                            }
                            var bounds = this._getTransformedBounds(this._parent, true);
                            var angle = this._rotation / 180 * Math.PI;
                            var baseHeight = contentBounds.getBaseHeight(angle);
                            if (!baseHeight) {
                                return;
                            }
                            var baseWidth = contentBounds.getBaseWidth(angle);
                            this._scaleY = value / baseHeight;
                            this._scaleX = bounds.width / baseWidth;
                            this._invalidateMatrix();
                        };
                        Object.defineProperty(DisplayObject.prototype, "mask", {
                            get: function () {
                                return this._mask;
                            },
                            set: function (value) {
                                if (this._mask === value || value === this) {
                                    return;
                                }
                                if (value && value._maskedObject) {
                                    value._maskedObject.mask = null;
                                }
                                this._mask = value;
                                if (value) {
                                    value._maskedObject = this;
                                }
                                this._setDirtyFlags(134217728 /* DirtyMask */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "transform", {
                            get: function () {
                                return this._getTransform();
                            },
                            set: function (value) {
                                this._stopTimelineAnimation();
                                if (value.matrix3D) {
                                    this._matrix3D = value.matrix3D;
                                }
                                else {
                                    this._setMatrix(value.matrix, true);
                                }
                                this._setColorTransform(value.colorTransform);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getTransform = function () {
                            return new flash.geom.Transform(this);
                        };
                        DisplayObject.prototype.destroy = function () {
                            this._setFlags(512 /* Destroyed */);
                        };
                        Object.defineProperty(DisplayObject.prototype, "root", {
                            get: function () {
                                var node = this;
                                do {
                                    if (node._root === node) {
                                        return node;
                                    }
                                    node = node._parent;
                                } while (node);
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "stage", {
                            get: function () {
                                var node = this;
                                do {
                                    if (node._stage === node) {
                                        release || assert(flash.display.Stage.isType(node));
                                        return node;
                                    }
                                    node = node._parent;
                                } while (node);
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "name", {
                            get: function () {
                                return this._name;
                            },
                            set: function (value) {
                                checkNullParameter(value, "name");
                                this._name = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "parent", {
                            get: function () {
                                return this._parent;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "alpha", {
                            get: function () {
                                return this._colorTransform.alphaMultiplier;
                            },
                            set: function (value) {
                                this._stopTimelineAnimation();
                                value = +value;
                                if (value === this._colorTransform.alphaMultiplier) {
                                    return;
                                }
                                this._colorTransform.alphaMultiplier = value;
                                this._colorTransform.convertToFixedPoint();
                                this._propagateFlagsDown(128 /* InvalidConcatenatedColorTransform */);
                                this._setDirtyFlags(67108864 /* DirtyColorTransform */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "blendMode", {
                            get: function () {
                                return this._blendMode;
                            },
                            set: function (value) {
                                this._stopTimelineAnimation();
                                value = asCoerceString(value);
                                if (value === this._blendMode) {
                                    return;
                                }
                                if (display.BlendMode.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidEnumError, "blendMode");
                                }
                                this._blendMode = value;
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "scale9Grid", {
                            get: function () {
                                return this._getScale9Grid();
                            },
                            set: function (innerRectangle) {
                                this._stopTimelineAnimation();
                                this._scale9Grid = Bounds.FromRectangle(innerRectangle);
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getScale9Grid = function () {
                            return this._scale9Grid ? flash.geom.Rectangle.FromBounds(this._scale9Grid) : null;
                        };
                        Object.defineProperty(DisplayObject.prototype, "cacheAsBitmap", {
                            get: function () {
                                return this._getCacheAsBitmap();
                            },
                            set: function (value) {
                                if (this._hasFlags(65536 /* CacheAsBitmap */)) {
                                    return;
                                }
                                this._toggleFlags(65536 /* CacheAsBitmap */, !!value);
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getCacheAsBitmap = function () {
                            return (this._filters && this._filters.length > 0) || this._hasFlags(65536 /* CacheAsBitmap */);
                        };
                        Object.defineProperty(DisplayObject.prototype, "filters", {
                            get: function () {
                                return this._getFilters();
                            },
                            set: function (value) {
                                if (!this._filters) {
                                    this._filters = [];
                                }
                                var changed = false;
                                if (isNullOrUndefined(value)) {
                                    changed = this.filters.length > 0;
                                    this._filters.length = 0;
                                }
                                else {
                                    this._filters = value.map(function (x) {
                                        release || assert(flash.filters.BitmapFilter.isType(x));
                                        return x.clone();
                                    });
                                    changed = true;
                                }
                                if (changed) {
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getFilters = function () {
                            return this._filters ? this._filters.map(function (x) {
                                return x.clone();
                            }) : [];
                        };
                        Object.defineProperty(DisplayObject.prototype, "visible", {
                            get: function () {
                                return this._hasFlags(1 /* Visible */);
                            },
                            set: function (value) {
                                value = !!value;
                                if (value === this._hasFlags(1 /* Visible */)) {
                                    return;
                                }
                                this._toggleFlags(1 /* Visible */, value);
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "z", {
                            get: function () {
                                return this._z;
                            },
                            set: function (value) {
                                value = +value;
                                this._z = value;
                                notImplemented("public DisplayObject::set z");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype.getBounds = function (targetCoordinateSpace) {
                            targetCoordinateSpace = targetCoordinateSpace || this;
                            return geom.Rectangle.FromBounds(this._getTransformedBounds(targetCoordinateSpace, true));
                        };
                        DisplayObject.prototype.getRect = function (targetCoordinateSpace) {
                            targetCoordinateSpace = targetCoordinateSpace || this;
                            return geom.Rectangle.FromBounds(this._getTransformedBounds(targetCoordinateSpace, false));
                        };
                        DisplayObject.prototype.globalToLocal = function (point) {
                            var m = this._getInvertedConcatenatedMatrix();
                            var p = m.transformPointInPlace(point.clone().toTwips()).round();
                            return p.toPixels();
                        };
                        DisplayObject.prototype.localToGlobal = function (point) {
                            var m = this._getConcatenatedMatrix();
                            var p = m.transformPointInPlace(point.clone().toTwips()).round();
                            return p.toPixels();
                        };
                        DisplayObject.prototype.globalToLocal3D = function (point) {
                            notImplemented("public DisplayObject::globalToLocal3D");
                            return null;
                        };
                        DisplayObject.prototype.localToGlobal3D = function (point) {
                            notImplemented("public DisplayObject::localToGlobal3D");
                            return null;
                        };
                        DisplayObject.prototype.local3DToGlobal = function (point3d) {
                            notImplemented("public DisplayObject::local3DToGlobal");
                            return null;
                        };
                        DisplayObject.prototype.visit = function (visitor, visitorFlags, displayObjectFlags) {
                            if (displayObjectFlags === void 0) { displayObjectFlags = 0 /* None */; }
                            var stack;
                            var displayObject;
                            var displayObjectContainer;
                            var frontToBack = visitorFlags & 8 /* FrontToBack */;
                            stack = [this];
                            while (stack.length > 0) {
                                displayObject = stack.pop();
                                var flags = 0 /* None */;
                                if (visitorFlags & 16 /* Filter */ && !displayObject._hasAnyFlags(displayObjectFlags)) {
                                    flags = 2 /* Skip */;
                                }
                                else {
                                    flags = visitor(displayObject);
                                }
                                if (flags === 0 /* Continue */) {
                                    var children = displayObject._children;
                                    if (children) {
                                        var length = children.length;
                                        for (var i = 0; i < length; i++) {
                                            var child = children[frontToBack ? i : length - 1 - i];
                                            stack.push(child);
                                        }
                                    }
                                }
                                else if (flags === 1 /* Stop */) {
                                    return;
                                }
                            }
                        };
                        Object.defineProperty(DisplayObject.prototype, "loaderInfo", {
                            get: function () {
                                var root = this.root;
                                if (root) {
                                    release || assert(root._loaderInfo, "No LoaderInfo object found on root.");
                                    return root._loaderInfo;
                                }
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._canHaveGraphics = function () {
                            return false;
                        };
                        DisplayObject.prototype._getGraphics = function () {
                            return null;
                        };
                        DisplayObject.prototype._canHaveTextContent = function () {
                            return false;
                        };
                        DisplayObject.prototype._getTextContent = function () {
                            return null;
                        };
                        DisplayObject.prototype._ensureGraphics = function () {
                            release || assert(this._canHaveGraphics());
                            if (this._graphics) {
                                return this._graphics;
                            }
                            this._graphics = new flash.display.Graphics();
                            this._graphics._setParent(this);
                            this._invalidateFillAndLineBounds(true, true);
                            this._setDirtyFlags(4194304 /* DirtyGraphics */);
                            return this._graphics;
                        };
                        DisplayObject.prototype._setStaticContentFromSymbol = function (symbol) {
                            release || assert(!symbol.dynamic);
                            if (this._canHaveGraphics()) {
                                release || assert(symbol instanceof flash.display.ShapeSymbol);
                                this._graphics = symbol.graphics;
                                this._setDirtyFlags(4194304 /* DirtyGraphics */);
                            }
                            else if (flash.text.StaticText.isType(this)) {
                                release || assert(symbol instanceof flash.text.TextSymbol);
                                var textSymbol = symbol;
                                this._textContent = textSymbol.textContent;
                                this._setDirtyFlags(8388608 /* DirtyTextContent */);
                            }
                            this._symbol = symbol;
                            this._setFillAndLineBoundsFromSymbol(symbol);
                        };
                        DisplayObject.prototype.hitTestObject = function (other) {
                            release || assert(other && DisplayObject.isType(other));
                            var a = this, b = other;
                            var aBounds = a._getContentBounds(false).clone();
                            var bBounds = b._getContentBounds(false).clone();
                            a._getConcatenatedMatrix().transformBounds(aBounds);
                            b._getConcatenatedMatrix().transformBounds(bBounds);
                            return aBounds.intersects(bBounds);
                        };
                        DisplayObject.prototype.hitTestPoint = function (globalX, globalY, shapeFlag) {
                            globalX = +globalX * 20 | 0;
                            globalY = +globalY * 20 | 0;
                            shapeFlag = !!shapeFlag;
                            var testingType = shapeFlag ? 2 /* HitTestShape */ : 0 /* HitTestBounds */;
                            return !!this._containsGlobalPoint(globalX, globalY, testingType, null);
                        };
                        DisplayObject.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            var result = this._boundsAndMaskContainPoint(globalX, globalY, localX, localY, testingType);
                            if (result === 0 /* None */ || testingType < 2 /* HitTestShape */) {
                                return result;
                            }
                            var containsPoint = this._containsPointDirectly(localX, localY, globalX, globalY);
                            if (containsPoint && objects) {
                                if (testingType === 5 /* Drop */) {
                                    objects[0] = this;
                                }
                                else if (testingType === 4 /* ObjectsUnderPoint */ || display.InteractiveObject.isType(this) && this._mouseEnabled) {
                                    objects.push(this);
                                }
                            }
                            return containsPoint ? 2 /* Shape */ : result;
                        };
                        DisplayObject.prototype._containsGlobalPoint = function (globalX, globalY, testingType, objects) {
                            var matrix = this._getInvertedConcatenatedMatrix();
                            var localX = matrix.transformX(globalX, globalY);
                            var localY = matrix.transformY(globalX, globalY);
                            return this._containsPoint(globalX, globalY, localX, localY, testingType, objects);
                        };
                        DisplayObject.prototype._boundsAndMaskContainPoint = function (globalX, globalY, localX, localY, testingType) {
                            if (testingType >= 1 /* HitTestBoundsAndMask */ && this._hasFlags(32768 /* ContainsMorph */)) {
                                return 1 /* Bounds */;
                            }
                            if (testingType >= 3 /* Mouse */ && !this._hasFlags(1 /* Visible */) || !this._getContentBounds().contains(localX, localY)) {
                                return 0 /* None */;
                            }
                            if (testingType === 0 /* HitTestBounds */ || !this._mask) {
                                return 1 /* Bounds */;
                            }
                            return this._mask._containsGlobalPoint(globalX, globalY, 1 /* HitTestBoundsAndMask */, null);
                        };
                        DisplayObject.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            return false;
                        };
                        Object.defineProperty(DisplayObject.prototype, "scrollRect", {
                            get: function () {
                                return this._getScrollRect();
                            },
                            set: function (value) {
                                value = value;
                                this._scrollRect = value ? value.clone() : null;
                                somewhatImplemented("public DisplayObject::set scrollRect");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getScrollRect = function () {
                            return this._scrollRect ? this._scrollRect.clone() : null;
                        };
                        Object.defineProperty(DisplayObject.prototype, "opaqueBackground", {
                            get: function () {
                                return this._opaqueBackground;
                            },
                            set: function (value) {
                                release || assert(value === null || Shumway.isInteger(value));
                                this._opaqueBackground = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getDistance = function (ancestor) {
                            var d = 0;
                            var node = this;
                            while (node !== ancestor) {
                                d++;
                                node = node._parent;
                            }
                            return d;
                        };
                        DisplayObject.prototype.findNearestCommonAncestor = function (node) {
                            if (!node) {
                                return null;
                            }
                            var ancestor = this;
                            var d1 = ancestor._getDistance(null);
                            var d2 = node._getDistance(null);
                            while (d1 > d2) {
                                ancestor = ancestor._parent;
                                d1--;
                            }
                            while (d2 > d1) {
                                node = node._parent;
                                d2--;
                            }
                            while (ancestor !== node) {
                                ancestor = ancestor._parent;
                                node = node._parent;
                            }
                            return ancestor;
                        };
                        DisplayObject.prototype._getLocalMousePosition = function () {
                            var position = flash.ui.Mouse._currentPosition;
                            if (this._parent) {
                                position = this._parent.globalToLocal(flash.ui.Mouse._currentPosition);
                            }
                            return position;
                        };
                        Object.defineProperty(DisplayObject.prototype, "mouseX", {
                            get: function () {
                                return this._getLocalMousePosition().x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "mouseY", {
                            get: function () {
                                return this._getLocalMousePosition().y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype.debugName = function (withFlags) {
                            if (withFlags === void 0) { withFlags = false; }
                            var name = this._id + " [" + this._depth + "]: (" + this._referenceCount + ") " + this;
                            if (withFlags) {
                                var flagNames = [];
                                for (var i = 0; i < 32; i++) {
                                    if (this._hasFlags(1 << i)) {
                                        flagNames.push(DisplayObjectFlags[1 << i]);
                                    }
                                }
                                name += " " + flagNames.join("|");
                            }
                            return name;
                        };
                        DisplayObject.prototype.debugTrace = function (maxDistance, name) {
                            if (maxDistance === void 0) { maxDistance = 1024; }
                            if (name === void 0) { name = ""; }
                            var self = this;
                            var writer = new Shumway.IndentingWriter();
                            this.visit(function (node) {
                                var distance = node._getDistance(self);
                                if (distance > maxDistance) {
                                    return 2 /* Skip */;
                                }
                                var prefix = name + Shumway.StringUtilities.multiple(" ", distance);
                                writer.writeObject(prefix + node.debugName() + ", bounds: " + node.getBounds(null).toString(), { "...": { value: node } });
                                return 0 /* Continue */;
                            }, 0 /* None */);
                        };
                        DisplayObject.prototype._addReference = function () {
                            this._referenceCount++;
                        };
                        DisplayObject.prototype._removeReference = function () {
                            this._referenceCount--;
                            if (this._referenceCount !== 0 || !this._children) {
                                return;
                            }
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                children[i]._removeReference();
                            }
                        };
                        Object.defineProperty(DisplayObject.prototype, "accessibilityProperties", {
                            get: function () {
                                return this._accessibilityProperties;
                            },
                            set: function (value) {
                                this._accessibilityProperties = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "blendShader", {
                            set: function (value) {
                                notImplemented("public DisplayObject::set blendShader");
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject._syncID = 0;
                        DisplayObject._instanceID = 1;
                        DisplayObject.classInitializer = function () {
                            this.reset();
                        };
                        DisplayObject.initializer = function (symbol) {
                            release || AVM2.counter.count("DisplayObject::initializer");
                            var self = this;
                            self._id = flash.display.DisplayObject.getNextSyncID();
                            self._displayObjectFlags = 1 /* Visible */ | 2 /* InvalidLineBounds */ | 4 /* InvalidFillBounds */ | 32 /* InvalidConcatenatedMatrix */ | 64 /* InvalidInvertedConcatenatedMatrix */ | 536870912 /* DirtyDescendents */ | 4194304 /* DirtyGraphics */ | 1048576 /* DirtyMatrix */ | 67108864 /* DirtyColorTransform */ | 134217728 /* DirtyMask */ | 268435456 /* DirtyClipDepth */ | 1073741824 /* DirtyMiscellaneousProperties */;
                            self._root = null;
                            self._stage = null;
                            self._setInitialName();
                            self._parent = null;
                            self._mask = null;
                            self._z = 0;
                            self._scaleX = 1;
                            self._scaleY = 1;
                            self._skewX = 0;
                            self._skewY = 0;
                            self._scaleZ = 1;
                            self._rotation = 0;
                            self._rotationX = 0;
                            self._rotationY = 0;
                            self._rotationZ = 0;
                            self._width = 0;
                            self._height = 0;
                            self._opaqueBackground = null;
                            self._scrollRect = null;
                            self._filters = null;
                            self._blendMode = display.BlendMode.NORMAL;
                            release || assert(self._blendMode);
                            self._scale9Grid = null;
                            self._loaderInfo = null;
                            self._accessibilityProperties = null;
                            self._fillBounds = new Bounds(0, 0, 0, 0);
                            self._lineBounds = new Bounds(0, 0, 0, 0);
                            self._clipDepth = -1;
                            self._concatenatedMatrix = new geom.Matrix();
                            self._invertedConcatenatedMatrix = new geom.Matrix();
                            self._matrix = new geom.Matrix();
                            self._invertedMatrix = new geom.Matrix();
                            self._matrix3D = null;
                            self._colorTransform = new geom.ColorTransform();
                            self._concatenatedColorTransform = new geom.ColorTransform();
                            self._depth = -1;
                            self._ratio = 0;
                            self._index = -1;
                            self._maskedObject = null;
                            self._mouseOver = false;
                            self._mouseDown = false;
                            self._symbol = null;
                            self._graphics = null;
                            self._children = null;
                            self._referenceCount = 0;
                            if (symbol) {
                                if (symbol.scale9Grid) {
                                    self._scale9Grid = symbol.scale9Grid;
                                }
                                self._symbol = symbol;
                            }
                        };
                        DisplayObject.classSymbols = null;
                        DisplayObject.instanceSymbols = null;
                        DisplayObject._runScripts = true;
                        DisplayObject._path = [];
                        return DisplayObject;
                    })(flash.events.EventDispatcher);
                    display.DisplayObject = DisplayObject;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var assert = Shumway.Debug.assert;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Bitmap = (function (_super) {
                        __extends(Bitmap, _super);
                        function Bitmap(bitmapData, pixelSnapping, smoothing) {
                            if (bitmapData === void 0) { bitmapData = null; }
                            if (pixelSnapping === void 0) { pixelSnapping = "auto"; }
                            if (smoothing === void 0) { smoothing = false; }
                            false && _super.call(this);
                            display.DisplayObject.instanceConstructorNoInitialize.call(this);
                            if (this._symbol) {
                                this._bitmapData.class.instanceConstructorNoInitialize.call(this._bitmapData);
                            }
                            else {
                                this.bitmapData = bitmapData;
                            }
                            this._pixelSnapping = asCoerceString(pixelSnapping);
                            this._smoothing = !!smoothing;
                        }
                        Object.defineProperty(Bitmap.prototype, "pixelSnapping", {
                            get: function () {
                                return this._pixelSnapping;
                            },
                            set: function (value) {
                                if (display.PixelSnapping.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidEnumError, "pixelSnapping");
                                }
                                this._pixelSnapping = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Bitmap.prototype, "smoothing", {
                            get: function () {
                                return this._smoothing;
                            },
                            set: function (value) {
                                this._smoothing = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Bitmap.prototype, "bitmapData", {
                            get: function () {
                                return this._bitmapData;
                            },
                            set: function (value) {
                                if (this._bitmapData !== value) {
                                    if (this._bitmapData) {
                                        this._bitmapData._removeBitmapReferrer(this);
                                    }
                                    if (value) {
                                        value._addBitmapReferrer(this);
                                    }
                                }
                                this._bitmapData = value;
                                if (value) {
                                    this._setFillAndLineBoundsFromWidthAndHeight(value.width * 20 | 0, value.height * 20 | 0);
                                }
                                this._invalidateParentFillAndLineBounds(true, true);
                                this._setDirtyFlags(16777216 /* DirtyBitmapData */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Bitmap.prototype._getContentBounds = function (includeStrokes) {
                            if (includeStrokes === void 0) { includeStrokes = true; }
                            if (this._bitmapData) {
                                return this._bitmapData._getContentBounds();
                            }
                            return new Shumway.Bounds(0, 0, 0, 0);
                        };
                        Bitmap.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            release || assert(this._getContentBounds().contains(localX, localY));
                            return true;
                        };
                        Bitmap.classInitializer = null;
                        Bitmap.initializer = function (symbol) {
                            var self = this;
                            self._bitmapData = null;
                            self._pixelSnapping = null;
                            self._smoothing = null;
                            if (symbol) {
                                var symbolClass = symbol.symbolClass;
                                if (symbolClass.isSubtypeOf(flash.display.Bitmap)) {
                                    symbolClass = flash.display.BitmapData;
                                }
                                self._bitmapData = symbolClass.initializeFrom(symbol);
                                self._setFillAndLineBoundsFromWidthAndHeight(symbol.width * 20 | 0, symbol.height * 20 | 0);
                            }
                        };
                        Bitmap.classSymbols = null;
                        Bitmap.instanceSymbols = null;
                        return Bitmap;
                    })(flash.display.DisplayObject);
                    display.Bitmap = Bitmap;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var warning = Shumway.Debug.warning;
                    var Shape = (function (_super) {
                        __extends(Shape, _super);
                        function Shape() {
                            false && _super.call(this);
                            display.DisplayObject.instanceConstructorNoInitialize.call(this);
                        }
                        Shape.prototype._canHaveGraphics = function () {
                            return true;
                        };
                        Shape.prototype._getGraphics = function () {
                            return this._graphics;
                        };
                        Object.defineProperty(Shape.prototype, "graphics", {
                            get: function () {
                                return this._ensureGraphics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Shape.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            var graphics = this._getGraphics();
                            return !!graphics && graphics._containsPoint(localX, localY, true, 0);
                        };
                        Shape.classSymbols = null;
                        Shape.instanceSymbols = null;
                        Shape.classInitializer = null;
                        Shape.initializer = function (symbol) {
                            var self = this;
                            self._graphics = null;
                            if (symbol) {
                                this._setStaticContentFromSymbol(symbol);
                            }
                        };
                        return Shape;
                    })(flash.display.DisplayObject);
                    display.Shape = Shape;
                    var ShapeSymbol = (function (_super) {
                        __extends(ShapeSymbol, _super);
                        function ShapeSymbol(data, symbolClass) {
                            _super.call(this, data, symbolClass, false);
                            this.graphics = null;
                        }
                        ShapeSymbol.FromData = function (data, loaderInfo) {
                            var symbol = new ShapeSymbol(data, flash.display.Shape);
                            symbol._setBoundsFromData(data);
                            symbol.graphics = flash.display.Graphics.FromData(data);
                            symbol.processRequires(data.require, loaderInfo);
                            return symbol;
                        };
                        ShapeSymbol.prototype.processRequires = function (dependencies, loaderInfo) {
                            if (!dependencies) {
                                return;
                            }
                            var textures = this.graphics.getUsedTextures();
                            for (var i = 0; i < dependencies.length; i++) {
                                var symbol = loaderInfo.getSymbolById(dependencies[i]);
                                if (!symbol) {
                                    if (dependencies[i] !== 65535) {
                                        warning("Bitmap symbol " + dependencies[i] + " required by shape, but not defined.");
                                    }
                                    textures.push(null);
                                    continue;
                                }
                                textures.push(symbol.getSharedInstance());
                            }
                        };
                        return ShapeSymbol;
                    })(Shumway.Timeline.DisplaySymbol);
                    display.ShapeSymbol = ShapeSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var DisplayObject = flash.display.DisplayObject;
                    var events = flash.events;
                    var InteractiveObject = (function (_super) {
                        __extends(InteractiveObject, _super);
                        function InteractiveObject() {
                            false && _super.call(this);
                            DisplayObject.instanceConstructorNoInitialize.call(this);
                        }
                        Object.defineProperty(InteractiveObject.prototype, "tabEnabled", {
                            get: function () {
                                return this._tabEnabled;
                            },
                            set: function (enabled) {
                                enabled = !!enabled;
                                var old = this._tabEnabled;
                                this._tabEnabled = enabled;
                                if (old !== enabled) {
                                    this.dispatchEvent(events.Event.getInstance(events.Event.TAB_ENABLED_CHANGE, true));
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "tabIndex", {
                            get: function () {
                                return this._tabIndex;
                            },
                            set: function (index) {
                                index = index | 0;
                                var old = this._tabIndex;
                                this._tabIndex = index;
                                if (old !== index) {
                                    this.dispatchEvent(events.Event.getInstance(events.Event.TAB_INDEX_CHANGE, true));
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "focusRect", {
                            get: function () {
                                return this._focusRect;
                            },
                            set: function (focusRect) {
                                somewhatImplemented("public flash.display.InteractiveObject::set focusRect");
                                this._focusRect = focusRect;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "mouseEnabled", {
                            get: function () {
                                return this._mouseEnabled;
                            },
                            set: function (enabled) {
                                this._mouseEnabled = !!enabled;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "doubleClickEnabled", {
                            get: function () {
                                return this._doubleClickEnabled;
                            },
                            set: function (enabled) {
                                this._doubleClickEnabled = !!enabled;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "accessibilityImplementation", {
                            get: function () {
                                return this._accessibilityImplementation;
                            },
                            set: function (value) {
                                value = value;
                                notImplemented("public flash.display.InteractiveObject::set accessibilityImplementation");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "softKeyboardInputAreaOfInterest", {
                            get: function () {
                                return this._softKeyboardInputAreaOfInterest;
                            },
                            set: function (value) {
                                value = value;
                                notImplemented("public flash.display.InteractiveObject::set softKeyboardInputAreaOfInterest");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "needsSoftKeyboard", {
                            get: function () {
                                return this._needsSoftKeyboard;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.display.InteractiveObject::set needsSoftKeyboard");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "contextMenu", {
                            get: function () {
                                return this._contextMenu;
                            },
                            set: function (cm) {
                                cm = cm;
                                somewhatImplemented("public flash.display.InteractiveObject::set contextMenu");
                                this._contextMenu = cm;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        InteractiveObject.prototype.requestSoftKeyboard = function () {
                            notImplemented("public flash.display.InteractiveObject::requestSoftKeyboard");
                            return;
                        };
                        InteractiveObject.classInitializer = null;
                        InteractiveObject.initializer = function () {
                            var self = this;
                            self._tabEnabled = false;
                            self._tabIndex = -1;
                            self._focusRect = null;
                            self._mouseEnabled = true;
                            self._doubleClickEnabled = false;
                            self._accessibilityImplementation = null;
                            self._softKeyboardInputAreaOfInterest = null;
                            self._needsSoftKeyboard = false;
                            self._contextMenu = null;
                        };
                        InteractiveObject.classSymbols = null;
                        InteractiveObject.instanceSymbols = null;
                        return InteractiveObject;
                    })(flash.display.DisplayObject);
                    display.InteractiveObject = InteractiveObject;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var SimpleButton = (function (_super) {
                        __extends(SimpleButton, _super);
                        function SimpleButton(upState, overState, downState, hitTestState) {
                            if (upState === void 0) { upState = null; }
                            if (overState === void 0) { overState = null; }
                            if (downState === void 0) { downState = null; }
                            if (hitTestState === void 0) { hitTestState = null; }
                            false && _super.call(this);
                            display.InteractiveObject.instanceConstructorNoInitialize.call(this);
                            if (upState) {
                                this.upState = upState;
                            }
                            if (overState) {
                                this.overState = overState;
                            }
                            if (downState) {
                                this.downState = downState;
                            }
                            if (hitTestState) {
                                this.hitTestState = hitTestState;
                            }
                            this._updateButton();
                        }
                        SimpleButton.prototype._initFrame = function (advance) {
                            if (advance) {
                                this._updateButton();
                            }
                        };
                        SimpleButton.prototype._constructFrame = function () {
                        };
                        Object.defineProperty(SimpleButton.prototype, "useHandCursor", {
                            get: function () {
                                return this._useHandCursor;
                            },
                            set: function (value) {
                                this._useHandCursor = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "enabled", {
                            get: function () {
                                return this._enabled;
                            },
                            set: function (value) {
                                this._enabled = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "trackAsMenu", {
                            get: function () {
                                return this._trackAsMenu;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.display.SimpleButton::set trackAsMenu");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "upState", {
                            get: function () {
                                return this._upState;
                            },
                            set: function (value) {
                                var old = this._upState;
                                if (value._parent) {
                                    value._parent.removeChild(value);
                                }
                                this._upState = value;
                                if (this._currentState === old) {
                                    this._updateButton();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "overState", {
                            get: function () {
                                return this._overState;
                            },
                            set: function (value) {
                                var old = this._overState;
                                if (value._parent) {
                                    value._parent.removeChild(value);
                                }
                                this._overState = value;
                                if (this._currentState === old) {
                                    this._updateButton();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "downState", {
                            get: function () {
                                return this._downState;
                            },
                            set: function (value) {
                                var old = this._downState;
                                if (value._parent) {
                                    value._parent.removeChild(value);
                                }
                                this._downState = value;
                                if (this._currentState === old) {
                                    this._updateButton();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "hitTestState", {
                            get: function () {
                                return this._hitTestState;
                            },
                            set: function (value) {
                                this._hitTestState = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "soundTransform", {
                            get: function () {
                                notImplemented("public flash.display.SimpleButton::get soundTransform");
                                return;
                            },
                            set: function (sndTransform) {
                                sndTransform = sndTransform;
                                notImplemented("public flash.display.SimpleButton::set soundTransform");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SimpleButton.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            var target = testingType === 3 /* Mouse */ ? this._hitTestState : this._currentState;
                            if (!target) {
                                return 0 /* None */;
                            }
                            target._parent = this;
                            var result = target._containsGlobalPoint(globalX, globalY, testingType, objects);
                            target._parent = null;
                            if (result !== 0 /* None */ && testingType === 3 /* Mouse */ && objects && this._mouseEnabled) {
                                objects[0] = this;
                                release || assert(objects.length === 1);
                            }
                            return result;
                        };
                        SimpleButton.prototype._getChildBounds = function (bounds, includeStrokes) {
                            if (!this._currentState) {
                                return;
                            }
                            this._currentState._parent = this;
                            bounds.unionInPlace(this._currentState._getTransformedBounds(this, includeStrokes));
                            this._currentState._parent = null;
                        };
                        SimpleButton.prototype._propagateFlagsDown = function (flags) {
                            if (this._hasFlags(flags)) {
                                return;
                            }
                            this._setFlags(flags);
                            this._upState && this._upState._propagateFlagsDown(flags);
                            this._overState && this._overState._propagateFlagsDown(flags);
                            this._downState && this._downState._propagateFlagsDown(flags);
                            this._hitTestState && this._hitTestState._propagateFlagsDown(flags);
                        };
                        SimpleButton.prototype._updateButton = function () {
                            var state;
                            if (this._mouseOver) {
                                state = this._mouseDown ? this._downState : this._overState;
                            }
                            else {
                                state = this._upState;
                            }
                            if (state === this._currentState) {
                                return;
                            }
                            if (this._currentState) {
                            }
                            this._currentState = state;
                            if (this._stage) {
                            }
                            if (state) {
                                this._children[0] = state;
                            }
                            else {
                                this._children.length = 0;
                            }
                            this._setDirtyFlags(2097152 /* DirtyChildren */);
                            this._invalidateFillAndLineBounds(true, true);
                        };
                        SimpleButton.classInitializer = null;
                        SimpleButton.initializer = function (symbol) {
                            var self = this;
                            display.DisplayObject._advancableInstances.push(self);
                            self._useHandCursor = true;
                            self._enabled = true;
                            self._trackAsMenu = false;
                            self._upState = null;
                            self._overState = null;
                            self._downState = null;
                            self._hitTestState = null;
                            self._currentState = null;
                            self._children = [];
                            self._symbol = symbol;
                            if (symbol) {
                                if (symbol.upState) {
                                    self._upState = self.createAnimatedDisplayObject(symbol.upState.symbol, symbol.upState.placeObjectTag, true);
                                }
                                if (symbol.overState) {
                                    self._overState = self.createAnimatedDisplayObject(symbol.overState.symbol, symbol.overState.placeObjectTag, true);
                                }
                                if (symbol.downState) {
                                    self._downState = self.createAnimatedDisplayObject(symbol.downState.symbol, symbol.downState.placeObjectTag, true);
                                }
                                if (symbol.hitTestState) {
                                    self._hitTestState = self.createAnimatedDisplayObject(symbol.hitTestState.symbol, symbol.hitTestState.placeObjectTag, true);
                                }
                            }
                        };
                        SimpleButton.classSymbols = null;
                        SimpleButton.instanceSymbols = null;
                        return SimpleButton;
                    })(flash.display.InteractiveObject);
                    display.SimpleButton = SimpleButton;
                    var ButtonState = (function () {
                        function ButtonState(symbol, placeObjectTag) {
                            this.symbol = symbol;
                            this.placeObjectTag = placeObjectTag;
                        }
                        return ButtonState;
                    })();
                    display.ButtonState = ButtonState;
                    var ButtonSymbol = (function (_super) {
                        __extends(ButtonSymbol, _super);
                        function ButtonSymbol(data, loaderInfo) {
                            _super.call(this, data, flash.display.SimpleButton, true);
                            this.upState = null;
                            this.overState = null;
                            this.downState = null;
                            this.hitTestState = null;
                            this.loaderInfo = loaderInfo;
                        }
                        ButtonSymbol.FromData = function (data, loaderInfo) {
                            var symbol = new ButtonSymbol(data, loaderInfo);
                            if (loaderInfo.actionScriptVersion === display.ActionScriptVersion.ACTIONSCRIPT2) {
                                symbol.isAVM1Object = true;
                            }
                            var states = data.states;
                            var character = null;
                            var placeObjectTag;
                            for (var stateName in states) {
                                var controlTags = states[stateName];
                                if (controlTags.length === 1) {
                                    placeObjectTag = controlTags[0];
                                    character = loaderInfo.getSymbolById(placeObjectTag.symbolId);
                                    if (!character) {
                                        continue;
                                    }
                                }
                                else {
                                    placeObjectTag = { flags: 1 /* Move */, depth: 1 };
                                    character = new flash.display.SpriteSymbol({ id: -1, className: null }, loaderInfo);
                                    character.frames.push(new Shumway.SWF.SWFFrame(controlTags));
                                }
                                symbol[stateName + 'State'] = new ButtonState(character, placeObjectTag);
                            }
                            return symbol;
                        };
                        return ButtonSymbol;
                    })(Shumway.Timeline.DisplaySymbol);
                    display.ButtonSymbol = ButtonSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var assert = Shumway.Debug.assert;
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var checkParameterType = Shumway.AVM2.Runtime.checkParameterType;
                    var clamp = Shumway.NumberUtilities.clamp;
                    var Multiname = Shumway.AVM2.ABC.Multiname;
                    var events = flash.events;
                    var DisplayObjectContainer = (function (_super) {
                        __extends(DisplayObjectContainer, _super);
                        function DisplayObjectContainer() {
                            false && _super.call(this);
                            display.InteractiveObject.instanceConstructorNoInitialize.call(this);
                            this._setDirtyFlags(2097152 /* DirtyChildren */);
                        }
                        DisplayObjectContainer.prototype._invalidateChildren = function () {
                            this._setDirtyFlags(2097152 /* DirtyChildren */);
                            this._invalidateFillAndLineBounds(true, true);
                        };
                        DisplayObjectContainer.prototype._propagateFlagsDown = function (flags) {
                            if (this._hasFlags(flags)) {
                                return;
                            }
                            this._setFlags(flags);
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                children[i]._propagateFlagsDown(flags);
                            }
                        };
                        DisplayObjectContainer.prototype._constructChildren = function () {
                            release || AVM2.counter.count("DisplayObjectContainer::_constructChildren");
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                var child = children[i];
                                if (child._hasFlags(256 /* Constructed */)) {
                                    continue;
                                }
                                child.class.instanceConstructorNoInitialize.call(child);
                                child._removeReference();
                                if (child._name) {
                                    this[Multiname.getPublicQualifiedName(child._name)] = child;
                                }
                                child._setFlags(256 /* Constructed */);
                                if (child._symbol && child._symbol.isAVM1Object) {
                                    try {
                                        child.dispatchEvent(events.Event.getInstance(events.Event.AVM1_INIT));
                                    }
                                    catch (e) {
                                        console.warn('caught error under DisplayObjectContainer AVM1_INIT event: ', e);
                                    }
                                    try {
                                        child.dispatchEvent(events.Event.getInstance(events.Event.AVM1_CONSTRUCT));
                                    }
                                    catch (e) {
                                        console.warn('caught error under DisplayObjectContainer AVM1_CONSTRUCT event: ', e);
                                    }
                                    child._setFlags(1024 /* NeedsLoadEvent */);
                                    if (child._hasAnyFlags(8192 /* HasFrameScriptPending */ | 16384 /* ContainsFrameScriptPendingChildren */)) {
                                        this._setFlags(16384 /* ContainsFrameScriptPendingChildren */);
                                    }
                                }
                                try {
                                    child.dispatchEvent(events.Event.getInstance(events.Event.ADDED, true));
                                }
                                catch (e) {
                                    console.warn('caught error under DisplayObject ADDED event: ', e);
                                }
                                if (child.stage) {
                                    try {
                                        child.dispatchEvent(events.Event.getInstance(events.Event.ADDED_TO_STAGE));
                                    }
                                    catch (e) {
                                        console.warn('caught error under DisplayObject ADDED_TO_STAGE event: ', e);
                                    }
                                }
                            }
                        };
                        DisplayObjectContainer.prototype._enqueueFrameScripts = function () {
                            if (this._hasFlags(16384 /* ContainsFrameScriptPendingChildren */)) {
                                this._removeFlags(16384 /* ContainsFrameScriptPendingChildren */);
                                var children = this._children;
                                for (var i = 0; i < children.length; i++) {
                                    var child = children[i];
                                    if (DisplayObjectContainer.isType(child) || display.AVM1Movie.isType(child)) {
                                        child._enqueueFrameScripts();
                                    }
                                }
                            }
                        };
                        Object.defineProperty(DisplayObjectContainer.prototype, "numChildren", {
                            get: function () {
                                return this._getNumChildren();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObjectContainer.prototype._getNumChildren = function () {
                            return this._children.length;
                        };
                        Object.defineProperty(DisplayObjectContainer.prototype, "textSnapshot", {
                            get: function () {
                                notImplemented("public DisplayObjectContainer::get textSnapshot");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObjectContainer.prototype, "tabChildren", {
                            get: function () {
                                return this._getTabChildren();
                            },
                            set: function (enable) {
                                this._setTabChildren(enable);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObjectContainer.prototype._getTabChildren = function () {
                            return this._tabChildren;
                        };
                        DisplayObjectContainer.prototype._setTabChildren = function (enable) {
                            enable = !!enable;
                            var old = this._tabChildren;
                            this._tabChildren = enable;
                            if (old !== enable) {
                                this.dispatchEvent(events.Event.getInstance(events.Event.TAB_CHILDREN_CHANGE, true));
                            }
                        };
                        Object.defineProperty(DisplayObjectContainer.prototype, "mouseChildren", {
                            get: function () {
                                return this._getMouseChildren();
                            },
                            set: function (enable) {
                                this._setMouseChildren(enable);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObjectContainer.prototype._getMouseChildren = function () {
                            return this._mouseChildren;
                        };
                        DisplayObjectContainer.prototype._setMouseChildren = function (enable) {
                            this._mouseChildren = !!enable;
                        };
                        DisplayObjectContainer.prototype.addChild = function (child) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            return this.addChildAt(child, this._children.length);
                        };
                        DisplayObjectContainer.prototype.addChildAt = function (child, index) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            release || AVM2.counter.count("DisplayObjectContainer::addChildAt");
                            index = index | 0;
                            release || assert(child._hasFlags(256 /* Constructed */), "Child is not fully constructed.");
                            if (child === this) {
                                throwError('ArgumentError', AVM2.Errors.CantAddSelfError);
                            }
                            if (DisplayObjectContainer.isType(child) && child.contains(this)) {
                                throwError('ArgumentError', AVM2.Errors.CantAddParentError);
                            }
                            var children = this._children;
                            if (index < 0 || index > children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            if (child._parent === this) {
                                this.setChildIndex(child, clamp(index, 0, children.length - 1));
                                return child;
                            }
                            if (child._parent) {
                                DisplayObjectContainer.prototype.removeChildAt.call(child._parent, child._parent.getChildIndex(child));
                                index = clamp(index, 0, children.length);
                            }
                            for (var i = children.length - 1; i >= index; i--) {
                                children[i]._index++;
                            }
                            children.splice(index, 0, child);
                            child._setParent(this, -1);
                            child._index = index;
                            child._invalidatePosition();
                            this._invalidateChildren();
                            child._addReference();
                            child.dispatchEvent(events.Event.getInstance(events.Event.ADDED, true));
                            if (child.stage) {
                                child._propagateEvent(events.Event.getInstance(events.Event.ADDED_TO_STAGE));
                            }
                            return child;
                        };
                        DisplayObjectContainer.prototype.addTimelineObjectAtDepth = function (child, depth) {
                            release || AVM2.counter.count("DisplayObjectContainer::addTimelineObjectAtDepth");
                            depth = depth | 0;
                            var children = this._children;
                            var maxIndex = children.length - 1;
                            var index = maxIndex + 1;
                            for (var i = maxIndex; i >= 0; i--) {
                                var current = children[i];
                                if (current._depth > -1) {
                                    if (current._depth < depth) {
                                        index = i + 1;
                                        break;
                                    }
                                    index = i;
                                }
                            }
                            if (index > maxIndex) {
                                children.push(child);
                                child._index = index;
                            }
                            else {
                                children.splice(index, 0, child);
                                for (var i = index; i < children.length; i++) {
                                    children[i]._index = i;
                                }
                            }
                            child._setParent(this, depth);
                            child._invalidatePosition();
                            this._invalidateChildren();
                        };
                        DisplayObjectContainer.prototype.removeChild = function (child) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            return this.removeChildAt(this.getChildIndex(child));
                        };
                        DisplayObjectContainer.prototype.removeChildAt = function (index) {
                            release || AVM2.counter.count("DisplayObjectContainer::removeChildAt");
                            index = index | 0;
                            var children = this._children;
                            if (index < 0 || index >= children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            var child = children[index];
                            if (child._hasFlags(256 /* Constructed */)) {
                                child.dispatchEvent(events.Event.getInstance(events.Event.REMOVED, true));
                                if (this.stage) {
                                    child._propagateEvent(events.Event.getInstance(events.Event.REMOVED_FROM_STAGE));
                                }
                                index = this.getChildIndex(child);
                            }
                            children.splice(index, 1);
                            for (var i = children.length - 1; i >= index; i--) {
                                children[i]._index--;
                            }
                            child._setParent(null, -1);
                            child._index = -1;
                            child._invalidatePosition();
                            this._invalidateChildren();
                            return child;
                        };
                        DisplayObjectContainer.prototype.getChildIndex = function (child) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            if (child._parent !== this) {
                                throwError('ArgumentError', AVM2.Errors.NotAChildError);
                            }
                            return child._index;
                        };
                        DisplayObjectContainer.prototype.setChildIndex = function (child, index) {
                            index = index | 0;
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            var children = this._children;
                            if (index < 0 || index >= children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            if (child._parent !== this) {
                                throwError('ArgumentError', AVM2.Errors.NotAChildError);
                            }
                            child._setDepth(-1);
                            var currentIndex = this.getChildIndex(child);
                            if (children.length === 1 || currentIndex === index) {
                                return;
                            }
                            if (index === currentIndex + 1 || index === currentIndex - 1) {
                                this._swapChildrenAt(currentIndex, index);
                            }
                            else {
                                children.splice(currentIndex, 1);
                                children.splice(index, 0, child);
                                var i = currentIndex < index ? currentIndex : index;
                                while (i < children.length) {
                                    children[i]._index = i++;
                                }
                            }
                            this._invalidateChildren();
                        };
                        DisplayObjectContainer.prototype.getChildAt = function (index) {
                            index = index | 0;
                            var children = this._children;
                            if (index < 0 || index >= children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            var child = this._lookupChildByIndex(index);
                            if (!child) {
                                return null;
                            }
                            child._addReference();
                            return child;
                        };
                        DisplayObjectContainer.prototype.getTimelineObjectAtDepth = function (depth) {
                            depth = depth | 0;
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                var child = children[i];
                                if (child._depth > depth) {
                                    break;
                                }
                                if (child._depth === depth) {
                                    return child;
                                }
                            }
                            return null;
                        };
                        DisplayObjectContainer.prototype.getClipDepthIndex = function (depth) {
                            depth = depth | 0;
                            var children = this._children;
                            var index = this._children.length - 1;
                            var first = true;
                            for (var i = index; i >= 0; i--) {
                                var child = children[i];
                                if (child._depth < 0) {
                                    continue;
                                }
                                if (child._depth <= depth) {
                                    return first ? index : i;
                                }
                                first = false;
                            }
                            return 0;
                        };
                        DisplayObjectContainer.prototype.getChildByName = function (name) {
                            name = asCoerceString(name);
                            var child = this._lookupChildByName(name);
                            if (child) {
                                child._addReference();
                                return child;
                            }
                            return null;
                        };
                        DisplayObjectContainer.prototype._lookupChildByIndex = function (index) {
                            var child = this._children[index];
                            if (child && child._hasFlags(256 /* Constructed */)) {
                                return child;
                            }
                            return null;
                        };
                        DisplayObjectContainer.prototype._lookupChildByName = function (name) {
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                var child = children[i];
                                if (!child._hasFlags(256 /* Constructed */)) {
                                    continue;
                                }
                                if (child.name === name) {
                                    return child;
                                }
                            }
                            return null;
                        };
                        DisplayObjectContainer.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            return this._containsPointImpl(globalX, globalY, localX, localY, testingType, objects, false);
                        };
                        DisplayObjectContainer.prototype._containsPointImpl = function (globalX, globalY, localX, localY, testingType, objects, skipBoundsCheck) {
                            var result;
                            if (!skipBoundsCheck) {
                                result = this._boundsAndMaskContainPoint(globalX, globalY, localX, localY, testingType);
                                if (result === 0 /* None */ || testingType < 2 /* HitTestShape */) {
                                    return result;
                                }
                            }
                            var anyChildHit = false;
                            var children = this._getUnclippedChildren(testingType, globalX, globalY);
                            for (var i = children ? children.length : 0; i--;) {
                                var child = children[i];
                                if (child._maskedObject) {
                                    continue;
                                }
                                result = child._containsGlobalPoint(globalX, globalY, testingType, objects);
                                if (result !== 2 /* Shape */) {
                                    continue;
                                }
                                if (testingType < 3 /* Mouse */) {
                                    return result;
                                }
                                anyChildHit = true;
                                if (testingType >= 4 /* ObjectsUnderPoint */) {
                                    continue;
                                }
                                release || assert(testingType === 3 /* Mouse */);
                                release || assert(objects.length <= 1);
                                if (!this._mouseEnabled) {
                                    objects.length = 0;
                                    return result;
                                }
                                if (!this._mouseChildren) {
                                    objects[0] = this;
                                }
                                if (objects.length !== 0) {
                                    release || assert(display.InteractiveObject.isType(objects[0]));
                                    return 2 /* Shape */;
                                }
                            }
                            if (anyChildHit && testingType < 4 /* ObjectsUnderPoint */) {
                                if (testingType === 3 /* Mouse */ && objects.length === 0) {
                                    objects[0] = this;
                                }
                                return 2 /* Shape */;
                            }
                            var selfHit = this._containsPointDirectly(localX, localY, globalX, globalY);
                            if (selfHit) {
                                if (testingType === 5 /* Drop */) {
                                    objects[0] = this;
                                }
                                else if (testingType === 4 /* ObjectsUnderPoint */ || objects && this._mouseEnabled) {
                                    objects.push(this);
                                }
                            }
                            return anyChildHit || selfHit ? 2 /* Shape */ : 0 /* None */;
                        };
                        DisplayObjectContainer.prototype._getUnclippedChildren = function (testingType, globalX, globalY) {
                            var children = this._children;
                            if (!children) {
                                return null;
                            }
                            var unclippedChildren;
                            for (var i = 0; children && i < children.length; i++) {
                                var child = children[i];
                                if (child._clipDepth !== -1) {
                                    if (!unclippedChildren) {
                                        unclippedChildren = children.slice(0, i);
                                    }
                                    if (testingType === 2 /* HitTestShape */) {
                                        continue;
                                    }
                                    release || assert(testingType >= 3 /* Mouse */);
                                    var containsPoint = child._containsGlobalPoint(globalX, globalY, 2 /* HitTestShape */, null);
                                    if (!containsPoint) {
                                        i = this.getClipDepthIndex(child._clipDepth);
                                    }
                                    continue;
                                }
                                if (unclippedChildren) {
                                    unclippedChildren.push(child);
                                }
                            }
                            return unclippedChildren || children;
                        };
                        DisplayObjectContainer.prototype._getChildBounds = function (bounds, includeStrokes) {
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                bounds.unionInPlace(children[i]._getTransformedBounds(this, includeStrokes));
                            }
                        };
                        DisplayObjectContainer.prototype.getObjectsUnderPoint = function (globalPoint) {
                            release || AVM2.counter.count("DisplayObjectContainer::getObjectsUnderPoint");
                            var globalX = globalPoint.x * 20 | 0;
                            var globalY = globalPoint.y * 20 | 0;
                            var objects = [];
                            this._containsGlobalPoint(globalX, globalY, 4 /* ObjectsUnderPoint */, objects);
                            return objects.reverse();
                        };
                        DisplayObjectContainer.prototype.areInaccessibleObjectsUnderPoint = function (point) {
                            point = point;
                            notImplemented("public DisplayObjectContainer::areInaccessibleObjectsUnderPoint");
                            return;
                        };
                        DisplayObjectContainer.prototype.contains = function (child) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            return this._isAncestor(child);
                        };
                        DisplayObjectContainer.prototype.swapChildrenAt = function (index1, index2) {
                            index1 = index1 | 0;
                            index2 = index2 | 0;
                            var children = this._children;
                            if (index1 < 0 || index1 >= children.length || index2 < 0 || index2 >= children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            this._swapChildrenAt(index1, index2);
                            if (index1 !== index2) {
                                this._invalidateChildren();
                            }
                        };
                        DisplayObjectContainer.prototype._swapChildrenAt = function (index1, index2) {
                            var children = this._children;
                            var child1 = children[index1];
                            var child2 = children[index2];
                            children[index2] = child1;
                            child1._setDepth(-1);
                            child1._index = index2;
                            children[index1] = child2;
                            child2._setDepth(-1);
                            child2._index = index1;
                        };
                        DisplayObjectContainer.prototype.swapChildren = function (child1, child2) {
                            checkParameterType(child1, "child", flash.display.DisplayObject);
                            checkParameterType(child2, "child", flash.display.DisplayObject);
                            this.swapChildrenAt(this.getChildIndex(child1), this.getChildIndex(child2));
                        };
                        DisplayObjectContainer.prototype.removeChildren = function (beginIndex, endIndex) {
                            if (beginIndex === void 0) { beginIndex = 0; }
                            if (endIndex === void 0) { endIndex = 2147483647; }
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            if (beginIndex < 0 || endIndex < 0 || endIndex < beginIndex || endIndex >= this._children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            var count = endIndex - beginIndex + 1;
                            if (count > 0) {
                                while (count--) {
                                    this.removeChildAt(beginIndex);
                                }
                            }
                        };
                        DisplayObjectContainer.bindings = null;
                        DisplayObjectContainer.classSymbols = null;
                        DisplayObjectContainer.classInitializer = null;
                        DisplayObjectContainer.initializer = function () {
                            var self = this;
                            self._tabChildren = true;
                            self._mouseChildren = true;
                            self._children = [];
                        };
                        return DisplayObjectContainer;
                    })(flash.display.InteractiveObject);
                    display.DisplayObjectContainer = DisplayObjectContainer;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var JointStyle = (function (_super) {
                        __extends(JointStyle, _super);
                        function JointStyle() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.JointStyle");
                        }
                        JointStyle.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return JointStyle.ROUND;
                                case 1:
                                    return JointStyle.BEVEL;
                                case 2:
                                    return JointStyle.MITER;
                                default:
                                    return null;
                            }
                        };
                        JointStyle.toNumber = function (value) {
                            switch (value) {
                                case JointStyle.ROUND:
                                    return 0;
                                case JointStyle.BEVEL:
                                    return 1;
                                case JointStyle.MITER:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        JointStyle.classInitializer = null;
                        JointStyle.initializer = null;
                        JointStyle.classSymbols = null;
                        JointStyle.instanceSymbols = null;
                        JointStyle.ROUND = "round";
                        JointStyle.BEVEL = "bevel";
                        JointStyle.MITER = "miter";
                        return JointStyle;
                    })(AS.ASNative);
                    display.JointStyle = JointStyle;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var CapsStyle = (function (_super) {
                        __extends(CapsStyle, _super);
                        function CapsStyle() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.CapsStyle");
                        }
                        CapsStyle.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return CapsStyle.ROUND;
                                case 1:
                                    return CapsStyle.NONE;
                                case 2:
                                    return CapsStyle.SQUARE;
                                default:
                                    return null;
                            }
                        };
                        CapsStyle.toNumber = function (value) {
                            switch (value) {
                                case CapsStyle.ROUND:
                                    return 0;
                                case CapsStyle.NONE:
                                    return 1;
                                case CapsStyle.SQUARE:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        CapsStyle.classInitializer = null;
                        CapsStyle.initializer = null;
                        CapsStyle.classSymbols = null;
                        CapsStyle.instanceSymbols = null;
                        CapsStyle.ROUND = "round";
                        CapsStyle.NONE = "none";
                        CapsStyle.SQUARE = "square";
                        return CapsStyle;
                    })(AS.ASNative);
                    display.CapsStyle = CapsStyle;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var LineScaleMode = (function (_super) {
                        __extends(LineScaleMode, _super);
                        function LineScaleMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.LineScaleMode");
                        }
                        LineScaleMode.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return LineScaleMode.NONE;
                                case 1:
                                    return LineScaleMode.NORMAL;
                                case 2:
                                    return LineScaleMode.VERTICAL;
                                case 3:
                                    return LineScaleMode.HORIZONTAL;
                                default:
                                    return null;
                            }
                        };
                        LineScaleMode.toNumber = function (value) {
                            switch (value) {
                                case LineScaleMode.NONE:
                                    return 0;
                                case LineScaleMode.NORMAL:
                                    return 1;
                                case LineScaleMode.VERTICAL:
                                    return 2;
                                case LineScaleMode.HORIZONTAL:
                                    return 3;
                                default:
                                    return -1;
                            }
                        };
                        LineScaleMode.classInitializer = null;
                        LineScaleMode.initializer = null;
                        LineScaleMode.classSymbols = null;
                        LineScaleMode.instanceSymbols = null;
                        LineScaleMode.NORMAL = "normal";
                        LineScaleMode.VERTICAL = "vertical";
                        LineScaleMode.HORIZONTAL = "horizontal";
                        LineScaleMode.NONE = "none";
                        return LineScaleMode;
                    })(AS.ASNative);
                    display.LineScaleMode = LineScaleMode;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GradientType = (function (_super) {
                        __extends(GradientType, _super);
                        function GradientType() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GradientType");
                        }
                        GradientType.fromNumber = function (n) {
                            switch (n) {
                                case 16 /* Linear */:
                                    return GradientType.LINEAR;
                                case 18 /* Radial */:
                                    return GradientType.RADIAL;
                                default:
                                    return null;
                            }
                        };
                        GradientType.toNumber = function (value) {
                            switch (value) {
                                case GradientType.LINEAR:
                                    return 16 /* Linear */;
                                case GradientType.RADIAL:
                                    return 18 /* Radial */;
                                default:
                                    return -1;
                            }
                        };
                        GradientType.classInitializer = null;
                        GradientType.initializer = null;
                        GradientType.classSymbols = null;
                        GradientType.instanceSymbols = null;
                        GradientType.LINEAR = "linear";
                        GradientType.RADIAL = "radial";
                        return GradientType;
                    })(AS.ASNative);
                    display.GradientType = GradientType;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GradientSpreadMethod = Shumway.GradientSpreadMethod;
                    var SpreadMethod = (function (_super) {
                        __extends(SpreadMethod, _super);
                        function SpreadMethod() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.SpreadMethod");
                        }
                        SpreadMethod.fromNumber = function (n) {
                            switch (n) {
                                case 0 /* Pad */:
                                    return SpreadMethod.PAD;
                                case 1 /* Reflect */:
                                    return SpreadMethod.REFLECT;
                                case 2 /* Repeat */:
                                    return SpreadMethod.REPEAT;
                                default:
                                    return null;
                            }
                        };
                        SpreadMethod.toNumber = function (value) {
                            switch (value) {
                                case SpreadMethod.PAD:
                                    return 0 /* Pad */;
                                case SpreadMethod.REFLECT:
                                    return 1 /* Reflect */;
                                case SpreadMethod.REPEAT:
                                    return 2 /* Repeat */;
                                default:
                                    return -1;
                            }
                        };
                        SpreadMethod.classInitializer = null;
                        SpreadMethod.initializer = null;
                        SpreadMethod.classSymbols = null;
                        SpreadMethod.instanceSymbols = null;
                        SpreadMethod.PAD = "pad";
                        SpreadMethod.REFLECT = "reflect";
                        SpreadMethod.REPEAT = "repeat";
                        return SpreadMethod;
                    })(AS.ASNative);
                    display.SpreadMethod = SpreadMethod;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GradientInterpolationMethod = Shumway.GradientInterpolationMethod;
                    var InterpolationMethod = (function (_super) {
                        __extends(InterpolationMethod, _super);
                        function InterpolationMethod() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.InterpolationMethod");
                        }
                        InterpolationMethod.fromNumber = function (n) {
                            switch (n) {
                                case 0 /* RGB */:
                                    return InterpolationMethod.RGB;
                                case 1 /* LinearRGB */:
                                    return InterpolationMethod.LINEAR_RGB;
                                default:
                                    return null;
                            }
                        };
                        InterpolationMethod.toNumber = function (value) {
                            switch (value) {
                                case InterpolationMethod.RGB:
                                    return 0 /* RGB */;
                                case InterpolationMethod.LINEAR_RGB:
                                    return 1 /* LinearRGB */;
                                default:
                                    return -1;
                            }
                        };
                        InterpolationMethod.classInitializer = null;
                        InterpolationMethod.initializer = null;
                        InterpolationMethod.classSymbols = null;
                        InterpolationMethod.instanceSymbols = null;
                        InterpolationMethod.RGB = "rgb";
                        InterpolationMethod.LINEAR_RGB = "linearRGB";
                        return InterpolationMethod;
                    })(AS.ASNative);
                    display.InterpolationMethod = InterpolationMethod;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var GraphicsBitmapFill = (function (_super) {
                        __extends(GraphicsBitmapFill, _super);
                        function GraphicsBitmapFill(bitmapData, matrix, repeat, smooth) {
                            if (bitmapData === void 0) { bitmapData = null; }
                            if (matrix === void 0) { matrix = null; }
                            if (repeat === void 0) { repeat = true; }
                            if (smooth === void 0) { smooth = false; }
                            false && _super.call(this);
                            this.bitmapData = bitmapData;
                            this.matrix = matrix;
                            this.repeat = !!repeat;
                            this.smooth = !!smooth;
                        }
                        GraphicsBitmapFill.classInitializer = null;
                        GraphicsBitmapFill.initializer = null;
                        GraphicsBitmapFill.classSymbols = null;
                        GraphicsBitmapFill.instanceSymbols = null;
                        return GraphicsBitmapFill;
                    })(AS.ASNative);
                    display.GraphicsBitmapFill = GraphicsBitmapFill;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GraphicsEndFill = (function (_super) {
                        __extends(GraphicsEndFill, _super);
                        function GraphicsEndFill() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GraphicsEndFill");
                        }
                        GraphicsEndFill.classInitializer = null;
                        GraphicsEndFill.initializer = null;
                        GraphicsEndFill.classSymbols = null;
                        GraphicsEndFill.instanceSymbols = null;
                        return GraphicsEndFill;
                    })(AS.ASNative);
                    display.GraphicsEndFill = GraphicsEndFill;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GraphicsGradientFill = (function (_super) {
                        __extends(GraphicsGradientFill, _super);
                        function GraphicsGradientFill(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
                            if (type === void 0) { type = "linear"; }
                            if (colors === void 0) { colors = null; }
                            if (alphas === void 0) { alphas = null; }
                            if (ratios === void 0) { ratios = null; }
                            if (matrix === void 0) { matrix = null; }
                            if (spreadMethod === void 0) { spreadMethod = "pad"; }
                            if (interpolationMethod === void 0) { interpolationMethod = "rgb"; }
                            if (focalPointRatio === void 0) { focalPointRatio = 0; }
                            false && _super.call(this);
                            this.type = asCoerceString(type);
                            this.colors = colors;
                            this.alphas = alphas;
                            this.ratios = ratios;
                            this.matrix = matrix;
                            this.spreadMethod = spreadMethod;
                            this.interpolationMethod = asCoerceString(interpolationMethod);
                            this.focalPointRatio = +focalPointRatio;
                        }
                        GraphicsGradientFill.classInitializer = null;
                        GraphicsGradientFill.initializer = null;
                        GraphicsGradientFill.classSymbols = null;
                        GraphicsGradientFill.instanceSymbols = null;
                        return GraphicsGradientFill;
                    })(AS.ASNative);
                    display.GraphicsGradientFill = GraphicsGradientFill;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GraphicsPath = (function (_super) {
                        __extends(GraphicsPath, _super);
                        function GraphicsPath(commands, data, winding) {
                            if (commands === void 0) { commands = null; }
                            if (data === void 0) { data = null; }
                            if (winding === void 0) { winding = "evenOdd"; }
                            false && _super.call(this);
                            this.commands = commands;
                            this.data = data;
                            this.winding = asCoerceString(winding);
                        }
                        GraphicsPath.classInitializer = null;
                        GraphicsPath.initializer = null;
                        GraphicsPath.classSymbols = null;
                        GraphicsPath.instanceSymbols = null;
                        return GraphicsPath;
                    })(AS.ASNative);
                    display.GraphicsPath = GraphicsPath;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GraphicsPathCommand = (function (_super) {
                        __extends(GraphicsPathCommand, _super);
                        function GraphicsPathCommand() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GraphicsPathCommand");
                        }
                        GraphicsPathCommand.classInitializer = null;
                        GraphicsPathCommand.initializer = null;
                        GraphicsPathCommand.classSymbols = null;
                        GraphicsPathCommand.instanceSymbols = null;
                        GraphicsPathCommand.NO_OP = undefined;
                        GraphicsPathCommand.MOVE_TO = 1;
                        GraphicsPathCommand.LINE_TO = 2;
                        GraphicsPathCommand.CURVE_TO = 3;
                        GraphicsPathCommand.WIDE_MOVE_TO = 4;
                        GraphicsPathCommand.WIDE_LINE_TO = 5;
                        GraphicsPathCommand.CUBIC_CURVE_TO = 6;
                        return GraphicsPathCommand;
                    })(AS.ASNative);
                    display.GraphicsPathCommand = GraphicsPathCommand;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GraphicsPathWinding = (function (_super) {
                        __extends(GraphicsPathWinding, _super);
                        function GraphicsPathWinding() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GraphicsPathWinding");
                        }
                        GraphicsPathWinding.classInitializer = null;
                        GraphicsPathWinding.initializer = null;
                        GraphicsPathWinding.classSymbols = null;
                        GraphicsPathWinding.instanceSymbols = null;
                        GraphicsPathWinding.EVEN_ODD = "evenOdd";
                        GraphicsPathWinding.NON_ZERO = "nonZero";
                        return GraphicsPathWinding;
                    })(AS.ASNative);
                    display.GraphicsPathWinding = GraphicsPathWinding;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var GraphicsSolidFill = (function (_super) {
                        __extends(GraphicsSolidFill, _super);
                        function GraphicsSolidFill(color, alpha) {
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 1; }
                            false && _super.call(this);
                            this.color = color >>> 0;
                            this.alpha = +alpha;
                        }
                        GraphicsSolidFill.classInitializer = null;
                        GraphicsSolidFill.initializer = null;
                        GraphicsSolidFill.classSymbols = null;
                        GraphicsSolidFill.instanceSymbols = null;
                        return GraphicsSolidFill;
                    })(AS.ASNative);
                    display.GraphicsSolidFill = GraphicsSolidFill;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GraphicsStroke = (function (_super) {
                        __extends(GraphicsStroke, _super);
                        function GraphicsStroke(thickness, pixelHinting, scaleMode, caps, joints, miterLimit, fill) {
                            if (thickness === void 0) { thickness = NaN; }
                            if (pixelHinting === void 0) { pixelHinting = false; }
                            if (scaleMode === void 0) { scaleMode = "normal"; }
                            if (caps === void 0) { caps = "none"; }
                            if (joints === void 0) { joints = "round"; }
                            if (miterLimit === void 0) { miterLimit = 3; }
                            if (fill === void 0) { fill = null; }
                            false && _super.call(this);
                            this.thickness = +thickness;
                            this.pixelHinting = !!pixelHinting;
                            this.scaleMode = asCoerceString(scaleMode);
                            this.caps = asCoerceString(caps);
                            this.joints = asCoerceString(joints);
                            this.miterLimit = +miterLimit;
                            this.fill = fill;
                        }
                        GraphicsStroke.classInitializer = null;
                        GraphicsStroke.initializer = null;
                        GraphicsStroke.classSymbols = null;
                        GraphicsStroke.instanceSymbols = null;
                        return GraphicsStroke;
                    })(AS.ASNative);
                    display.GraphicsStroke = GraphicsStroke;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GraphicsTrianglePath = (function (_super) {
                        __extends(GraphicsTrianglePath, _super);
                        function GraphicsTrianglePath(vertices, indices, uvtData, culling) {
                            if (vertices === void 0) { vertices = null; }
                            if (indices === void 0) { indices = null; }
                            if (uvtData === void 0) { uvtData = null; }
                            if (culling === void 0) { culling = "none"; }
                            vertices = vertices;
                            indices = indices;
                            uvtData = uvtData;
                            culling = asCoerceString(culling);
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GraphicsTrianglePath");
                        }
                        GraphicsTrianglePath.classInitializer = null;
                        GraphicsTrianglePath.initializer = null;
                        GraphicsTrianglePath.classSymbols = null;
                        GraphicsTrianglePath.instanceSymbols = null;
                        return GraphicsTrianglePath;
                    })(AS.ASNative);
                    display.GraphicsTrianglePath = GraphicsTrianglePath;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var clamp = Shumway.NumberUtilities.clamp;
                    var Bounds = Shumway.Bounds;
                    var assert = Shumway.Debug.assert;
                    var assertUnreachable = Shumway.Debug.assertUnreachable;
                    var GradientType = flash.display.GradientType;
                    var SpreadMethod = flash.display.SpreadMethod;
                    var InterpolationMethod = flash.display.InterpolationMethod;
                    var LineScaleMode = flash.display.LineScaleMode;
                    var CapsStyle = flash.display.CapsStyle;
                    var JointStyle = flash.display.JointStyle;
                    var PathCommand = Shumway.PathCommand;
                    var ShapeData = Shumway.ShapeData;
                    function distanceSq(x1, y1, x2, y2) {
                        var dX = x2 - x1;
                        var dY = y2 - y1;
                        return dX * dX + dY * dY;
                    }
                    function quadraticBezier(from, cp, to, t) {
                        var inverseT = 1 - t;
                        return from * inverseT * inverseT + 2 * cp * inverseT * t + to * t * t;
                    }
                    function quadraticBezierExtreme(from, cp, to) {
                        var t = (from - cp) / (from - 2 * cp + to);
                        if (t < 0) {
                            return from;
                        }
                        if (t > 1) {
                            return to;
                        }
                        return quadraticBezier(from, cp, to, t);
                    }
                    function cubicBezier(from, cp, cp2, to, t) {
                        var tSq = t * t;
                        var inverseT = 1 - t;
                        var inverseTSq = inverseT * inverseT;
                        return from * inverseT * inverseTSq + 3 * cp * t * inverseTSq + 3 * cp2 * inverseT * tSq + to * t * tSq;
                    }
                    function cubicBezierExtremes(from, cp, cp2, to) {
                        var d1 = cp - from;
                        var d2 = cp2 - cp;
                        d2 *= 2;
                        var d3 = to - cp2;
                        if (d1 + d3 === d2) {
                            d3 *= 1.0001;
                        }
                        var fHead = 2 * d1 - d2;
                        var part1 = d2 - 2 * d1;
                        var fCenter = Math.sqrt(part1 * part1 - 4 * d1 * (d1 - d2 + d3));
                        var fTail = 2 * (d1 - d2 + d3);
                        var t1 = (fHead + fCenter) / fTail;
                        var t2 = (fHead - fCenter) / fTail;
                        var result = [];
                        if (t1 >= 0 && t1 <= 1) {
                            result.push(Math.round(cubicBezier(from, cp, cp2, to, t1)));
                        }
                        if (t2 >= 0 && t2 <= 1) {
                            result.push(Math.round(cubicBezier(from, cp, cp2, to, t2)));
                        }
                        return result;
                    }
                    function cubicXAtY(x0, y0, cx, cy, cx1, cy1, x1, y1, y) {
                        var dX = 3.0 * (cx - x0);
                        var dY = 3.0 * (cy - y0);
                        var bX = 3.0 * (cx1 - cx) - dX;
                        var bY = 3.0 * (cy1 - cy) - dY;
                        var c3X = x1 - x0 - dX - bX;
                        var c3Y = y1 - y0 - dY - bY;
                        function f(t) {
                            return t * (dY + t * (bY + t * c3Y)) + y0 - y;
                        }
                        function pointAt(t) {
                            if (t < 0) {
                                t = 0;
                            }
                            else if (t > 1) {
                                t = 1;
                            }
                            return x0 + t * (dX + t * (bX + t * c3X));
                        }
                        function bisectCubicBezierRange(f, l, r, limit) {
                            if (Math.abs(r - l) <= limit) {
                                return;
                            }
                            var middle = 0.5 * (l + r);
                            if (f(l) * f(r) <= 0) {
                                left = l;
                                right = r;
                                return;
                            }
                            bisectCubicBezierRange(f, l, middle, limit);
                            bisectCubicBezierRange(f, middle, r, limit);
                        }
                        var left = 0;
                        var right = 1;
                        bisectCubicBezierRange(f, 0, 1, 0.05);
                        var t0 = findRoot(left, right, f, 50, 0.000001);
                        var evalResult = Math.abs(f(t0));
                        if (evalResult > 0.00001) {
                            return [];
                        }
                        var result = [];
                        if (t0 <= 1) {
                            result.push(pointAt(t0));
                        }
                        var a = c3Y;
                        var b = t0 * a + bY;
                        var c = t0 * b + dY;
                        var d = b * b - 4 * a * c;
                        if (d < 0) {
                            return result;
                        }
                        d = Math.sqrt(d);
                        a = 1 / (a + a);
                        var t1 = (d - b) * a;
                        var t2 = (-b - d) * a;
                        if (t1 >= 0 && t1 <= 1) {
                            result.push(pointAt(t1));
                        }
                        if (t2 >= 0 && t2 <= 1) {
                            result.push(pointAt(t2));
                        }
                        return result;
                    }
                    function findRoot(x0, x2, f, maxIterations, epsilon) {
                        var x1;
                        var y0;
                        var y1;
                        var y2;
                        var b;
                        var c;
                        var y10;
                        var y20;
                        var y21;
                        var xm;
                        var ym;
                        var temp;
                        var xmlast = x0;
                        y0 = f(x0);
                        if (y0 === 0) {
                            return x0;
                        }
                        y2 = f(x2);
                        if (y2 === 0) {
                            return x2;
                        }
                        if (y2 * y0 > 0) {
                            return x0;
                        }
                        var __iter = 0;
                        for (var i = 0; i < maxIterations; ++i) {
                            __iter++;
                            x1 = 0.5 * (x2 + x0);
                            y1 = f(x1);
                            if (y1 === 0) {
                                return x1;
                            }
                            if (Math.abs(x1 - x0) < epsilon) {
                                return x1;
                            }
                            if (y1 * y0 > 0) {
                                temp = x0;
                                x0 = x2;
                                x2 = temp;
                                temp = y0;
                                y0 = y2;
                                y2 = temp;
                            }
                            y10 = y1 - y0;
                            y21 = y2 - y1;
                            y20 = y2 - y0;
                            if (y2 * y20 < 2 * y1 * y10) {
                                x2 = x1;
                                y2 = y1;
                            }
                            else {
                                b = (x1 - x0) / y10;
                                c = (y10 - y21) / (y21 * y20);
                                xm = x0 - b * y0 * (1 - c * y1);
                                ym = f(xm);
                                if (ym === 0) {
                                    return xm;
                                }
                                if (Math.abs(xm - xmlast) < epsilon) {
                                    return xm;
                                }
                                xmlast = xm;
                                if (ym * y0 < 0) {
                                    x2 = xm;
                                    y2 = ym;
                                }
                                else {
                                    x0 = xm;
                                    y0 = ym;
                                    x2 = x1;
                                    y2 = y1;
                                }
                            }
                        }
                        return x1;
                    }
                    function rayIntersectsLine(x, y, x1, y1, x2, y2) {
                        return (y2 > y) !== (y1 > y) && x < (x1 - x2) * (y - y2) / (y1 - y2) + x2;
                    }
                    function rayFullyCrossesCurve(x, y, fromX, fromY, cpX, cpY, toX, toY) {
                        if ((cpY > y) === (fromY > y) && (toY > y) === (fromY > y)) {
                            return false;
                        }
                        if (fromX >= x && cpX >= x && toX >= x) {
                            return true;
                        }
                        var a = fromY - 2 * cpY + toY;
                        var c = fromY - y;
                        var b = 2 * (cpY - fromY);
                        var d = b * b - 4 * a * c;
                        if (d < 0) {
                            return false;
                        }
                        d = Math.sqrt(d);
                        a = 1 / (a + a);
                        var t1 = (d - b) * a;
                        var t2 = (-b - d) * a;
                        var crosses = false;
                        if (t1 >= 0 && t1 <= 1 && quadraticBezier(fromX, cpX, toX, t1) > x) {
                            crosses = !crosses;
                        }
                        if (t2 >= 0 && t2 <= 1 && quadraticBezier(fromX, cpX, toX, t2) > x) {
                            crosses = !crosses;
                        }
                        return crosses;
                    }
                    function rayFullyCrossesCubicCurve(x, y, fromX, fromY, cpX, cpY, cp2X, cp2Y, toX, toY) {
                        var curveStartsAfterY = fromY > y;
                        if ((cpY > y) === curveStartsAfterY && (cp2Y > y) === curveStartsAfterY && (toY > y) === curveStartsAfterY) {
                            return false;
                        }
                        if (fromX < x && cpX < x && cp2X < x && toX < x) {
                            return false;
                        }
                        var crosses = false;
                        var roots = cubicXAtY(fromX, fromY, cpX, cpY, cp2X, cp2Y, toX, toY, y);
                        for (var i = roots.length; i; i--) {
                            if (roots[i] >= x) {
                                crosses = !crosses;
                            }
                        }
                        return crosses;
                    }
                    var Graphics = (function (_super) {
                        __extends(Graphics, _super);
                        function Graphics() {
                            false && _super.call(this);
                            this._id = flash.display.DisplayObject.getNextSyncID();
                            this._graphicsData = new ShapeData();
                            this._textures = [];
                            this._fillBounds = new Bounds(0x8000000, 0x8000000, 0x8000000, 0x8000000);
                            this._lineBounds = new Bounds(0x8000000, 0x8000000, 0x8000000, 0x8000000);
                            this._lastX = this._lastY = 0;
                            this._boundsIncludeLastCoordinates = true;
                            this._parent = null;
                            this._topLeftStrokeWidth = this._bottomRightStrokeWidth = 0;
                            this._isDirty = true;
                        }
                        Graphics.FromData = function (data) {
                            var graphics = new flash.display.Graphics();
                            graphics._graphicsData = ShapeData.FromPlainObject(data.shape);
                            if (data.lineBounds) {
                                graphics._lineBounds.copyFrom(data.lineBounds);
                                graphics._fillBounds.copyFrom(data.fillBounds || data.lineBounds);
                            }
                            return graphics;
                        };
                        Graphics.prototype.getGraphicsData = function () {
                            return this._graphicsData;
                        };
                        Graphics.prototype.getUsedTextures = function () {
                            return this._textures;
                        };
                        Graphics.prototype._setStrokeWidth = function (width) {
                            switch (width) {
                                case 1:
                                    this._topLeftStrokeWidth = 0;
                                    this._bottomRightStrokeWidth = 1;
                                    break;
                                case 3:
                                    this._topLeftStrokeWidth = 1;
                                    this._bottomRightStrokeWidth = 2;
                                    break;
                                default:
                                    var half = Math.ceil(width * 0.5) | 0;
                                    this._topLeftStrokeWidth = half;
                                    this._bottomRightStrokeWidth = half;
                                    break;
                            }
                        };
                        Graphics.prototype._setParent = function (parent) {
                            release || assert(!this._parent);
                            this._parent = parent;
                        };
                        Graphics.prototype._invalidate = function () {
                            release || assert(this._parent, "Graphics instances must have a parent.");
                            this._parent._invalidateFillAndLineBounds(true, true);
                            this._parent._propagateFlagsUp(536870912 /* DirtyDescendents */);
                            this._isDirty = true;
                        };
                        Graphics.prototype._getContentBounds = function (includeStrokes) {
                            if (includeStrokes === void 0) { includeStrokes = true; }
                            return includeStrokes ? this._lineBounds : this._fillBounds;
                        };
                        Graphics.prototype.clear = function () {
                            if (this._graphicsData.isEmpty()) {
                                return;
                            }
                            this._graphicsData.clear();
                            this._textures.length = 0;
                            this._fillBounds.setToSentinels();
                            this._lineBounds.setToSentinels();
                            this._lastX = this._lastY = 0;
                            this._boundsIncludeLastCoordinates = false;
                            this._invalidate();
                        };
                        Graphics.prototype.beginFill = function (color, alpha) {
                            if (alpha === void 0) { alpha = 1; }
                            color = color >>> 0 & 0xffffff;
                            alpha = Math.round(clamp(+alpha, -1, 1) * 0xff) | 0;
                            this._graphicsData.beginFill((color << 8) | alpha);
                        };
                        Graphics.prototype.beginGradientFill = function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
                            if (matrix === void 0) { matrix = null; }
                            if (spreadMethod === void 0) { spreadMethod = "pad"; }
                            if (interpolationMethod === void 0) { interpolationMethod = "rgb"; }
                            if (focalPointRatio === void 0) { focalPointRatio = 0; }
                            this._writeGradientStyle(2 /* BeginGradientFill */, type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio, false);
                        };
                        Graphics.prototype.beginBitmapFill = function (bitmap, matrix, repeat, smooth) {
                            if (matrix === void 0) { matrix = null; }
                            if (repeat === void 0) { repeat = true; }
                            if (smooth === void 0) { smooth = false; }
                            this._writeBitmapStyle(3 /* BeginBitmapFill */, bitmap, matrix, repeat, smooth, false);
                        };
                        Graphics.prototype.endFill = function () {
                            this._graphicsData.endFill();
                        };
                        Graphics.prototype.lineStyle = function (thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit) {
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 1; }
                            if (pixelHinting === void 0) { pixelHinting = false; }
                            if (scaleMode === void 0) { scaleMode = "normal"; }
                            if (caps === void 0) { caps = null; }
                            if (joints === void 0) { joints = null; }
                            if (miterLimit === void 0) { miterLimit = 3; }
                            thickness = +thickness;
                            color = color >>> 0 & 0xffffff;
                            alpha = Math.round(clamp(+alpha, -1, 1) * 0xff);
                            pixelHinting = !!pixelHinting;
                            scaleMode = asCoerceString(scaleMode);
                            caps = asCoerceString(caps);
                            joints = asCoerceString(joints);
                            miterLimit = clamp(+miterLimit | 0, 0, 0xff);
                            if (isNaN(thickness)) {
                                this._setStrokeWidth(0);
                                this._graphicsData.endLine();
                                return;
                            }
                            thickness = clamp(+thickness, 0, 0xff) * 20 | 0;
                            this._setStrokeWidth(thickness);
                            var lineScaleMode = LineScaleMode.toNumber(asCoerceString(scaleMode));
                            if (lineScaleMode < 0) {
                                lineScaleMode = LineScaleMode.toNumber(LineScaleMode.NORMAL);
                            }
                            var capsStyle = CapsStyle.toNumber(asCoerceString(caps));
                            if (capsStyle < 0) {
                                capsStyle = CapsStyle.toNumber(CapsStyle.ROUND);
                            }
                            var jointStyle = JointStyle.toNumber(asCoerceString(joints));
                            if (jointStyle < 0) {
                                jointStyle = JointStyle.toNumber(JointStyle.ROUND);
                            }
                            this._graphicsData.lineStyle(thickness, (color << 8) | alpha, pixelHinting, lineScaleMode, capsStyle, jointStyle, miterLimit);
                        };
                        Graphics.prototype.lineGradientStyle = function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
                            if (matrix === void 0) { matrix = null; }
                            if (spreadMethod === void 0) { spreadMethod = "pad"; }
                            if (interpolationMethod === void 0) { interpolationMethod = "rgb"; }
                            if (focalPointRatio === void 0) { focalPointRatio = 0; }
                            this._writeGradientStyle(6 /* LineStyleGradient */, type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio, !this._graphicsData.hasLines);
                        };
                        Graphics.prototype.lineBitmapStyle = function (bitmap, matrix, repeat, smooth) {
                            if (matrix === void 0) { matrix = null; }
                            if (repeat === void 0) { repeat = true; }
                            if (smooth === void 0) { smooth = false; }
                            this._writeBitmapStyle(7 /* LineStyleBitmap */, bitmap, matrix, repeat, smooth, !this._graphicsData.hasLines);
                        };
                        Graphics.prototype.drawRect = function (x, y, width, height) {
                            x = x * 20 | 0;
                            y = y * 20 | 0;
                            var x2 = x + (width * 20 | 0);
                            var y2 = y + (height * 20 | 0);
                            if (x !== this._lastX || y !== this._lastY) {
                                this._graphicsData.moveTo(x, y);
                            }
                            this._graphicsData.lineTo(x2, y);
                            this._graphicsData.lineTo(x2, y2);
                            this._graphicsData.lineTo(x, y2);
                            this._graphicsData.lineTo(x, y);
                            this._extendBoundsByPoint(x2, y2);
                            this._applyLastCoordinates(x, y);
                            this._invalidate();
                        };
                        Graphics.prototype.drawRoundRect = function (x, y, width, height, ellipseWidth, ellipseHeight) {
                            x = +x;
                            y = +y;
                            width = +width;
                            height = +height;
                            ellipseWidth = +ellipseWidth;
                            ellipseHeight = +ellipseHeight;
                            if (!ellipseHeight || !ellipseWidth) {
                                this.drawRect(x, y, width, height);
                                return;
                            }
                            var radiusX = (ellipseWidth / 2) | 0;
                            var radiusY = (ellipseHeight / 2) | 0;
                            var hw = width / 2;
                            var hh = height / 2;
                            if (radiusX > hw) {
                                radiusX = hw;
                            }
                            if (radiusY > hh) {
                                radiusY = hh;
                            }
                            if (hw === radiusX && hh === radiusY) {
                                if (radiusX === radiusY) {
                                    this.drawCircle(x + radiusX, y + radiusY, radiusX);
                                }
                                else {
                                    this.drawEllipse(x, y, radiusX * 2, radiusY * 2);
                                }
                                return;
                            }
                            var right = x + width;
                            var bottom = y + height;
                            var xlw = x + radiusX;
                            var xrw = right - radiusX;
                            var ytw = y + radiusY;
                            var ybw = bottom - radiusY;
                            this.moveTo(right, ybw);
                            this.curveTo(right, bottom, xrw, bottom);
                            this.lineTo(xlw, bottom);
                            this.curveTo(x, bottom, x, ybw);
                            this.lineTo(x, ytw);
                            this.curveTo(x, y, xlw, y);
                            this.lineTo(xrw, y);
                            this.curveTo(right, y, right, ytw);
                            this.lineTo(right, ybw);
                        };
                        Graphics.prototype.drawRoundRectComplex = function (x, y, width, height, topLeftRadius, topRightRadius, bottomLeftRadius, bottomRightRadius) {
                            x = +x;
                            y = +y;
                            width = +width;
                            height = +height;
                            topLeftRadius = +topLeftRadius;
                            topRightRadius = +topRightRadius;
                            bottomLeftRadius = +bottomLeftRadius;
                            bottomRightRadius = +bottomRightRadius;
                            if (!(topLeftRadius | topRightRadius | bottomLeftRadius | bottomRightRadius)) {
                                this.drawRect(x, y, width, height);
                                return;
                            }
                            var right = x + width;
                            var bottom = y + height;
                            var xtl = x + topLeftRadius;
                            this.moveTo(right, bottom - bottomRightRadius);
                            this.curveTo(right, bottom, right - bottomRightRadius, bottom);
                            this.lineTo(x + bottomLeftRadius, bottom);
                            this.curveTo(x, bottom, x, bottom - bottomLeftRadius);
                            this.lineTo(x, y + topLeftRadius);
                            this.curveTo(x, y, xtl, y);
                            this.lineTo(right - topRightRadius, y);
                            this.curveTo(right, y, right, y + topRightRadius);
                            this.lineTo(right, bottom - bottomRightRadius);
                        };
                        Graphics.prototype.drawCircle = function (x, y, radius) {
                            radius = +radius;
                            this.drawEllipse(+x - radius, +y - radius, radius * 2, radius * 2);
                        };
                        Graphics.prototype.drawEllipse = function (x, y, width, height) {
                            x = +x;
                            y = +y;
                            width = +width;
                            height = +height;
                            var rx = width / 2;
                            var ry = height / 2;
                            x += rx;
                            y += ry;
                            var currentX = x + rx;
                            var currentY = y;
                            this.moveTo(currentX, currentY);
                            var startAngle = 0;
                            var u = 1;
                            var v = 0;
                            for (var i = 0; i < 4; i++) {
                                var endAngle = startAngle + Math.PI / 2;
                                var kappa = (4 / 3) * Math.tan((endAngle - startAngle) / 4);
                                var cp1x = currentX - v * kappa * rx;
                                var cp1y = currentY + u * kappa * ry;
                                u = Math.cos(endAngle);
                                v = Math.sin(endAngle);
                                currentX = x + u * rx;
                                currentY = y + v * ry;
                                var cp2x = currentX + v * kappa * rx;
                                var cp2y = currentY - u * kappa * ry;
                                this.cubicCurveTo(cp1x, cp1y, cp2x, cp2y, currentX, currentY);
                                startAngle = endAngle;
                            }
                        };
                        Graphics.prototype.moveTo = function (x, y) {
                            x = x * 20 | 0;
                            y = y * 20 | 0;
                            this._graphicsData.moveTo(x, y);
                            this._lastX = x;
                            this._lastY = y;
                            this._boundsIncludeLastCoordinates = false;
                        };
                        Graphics.prototype.lineTo = function (x, y) {
                            x = x * 20 | 0;
                            y = y * 20 | 0;
                            this._graphicsData.lineTo(x, y);
                            this._applyLastCoordinates(x, y);
                            this._invalidate();
                        };
                        Graphics.prototype.curveTo = function (controlX, controlY, anchorX, anchorY) {
                            controlX = controlX * 20 | 0;
                            controlY = controlY * 20 | 0;
                            anchorX = anchorX * 20 | 0;
                            anchorY = anchorY * 20 | 0;
                            this._graphicsData.curveTo(controlX, controlY, anchorX, anchorY);
                            if (controlX < this._lastX || controlX > anchorX) {
                                this._extendBoundsByX(quadraticBezierExtreme(this._lastX, controlX, anchorX) | 0);
                            }
                            if (controlY < this._lastY || controlY > anchorY) {
                                this._extendBoundsByY(quadraticBezierExtreme(this._lastY, controlY, anchorY) | 0);
                            }
                            this._applyLastCoordinates(anchorX, anchorY);
                            this._invalidate();
                        };
                        Graphics.prototype.cubicCurveTo = function (controlX1, controlY1, controlX2, controlY2, anchorX, anchorY) {
                            controlX1 = controlX1 * 20 | 0;
                            controlY1 = controlY1 * 20 | 0;
                            controlX2 = controlX2 * 20 | 0;
                            controlY2 = controlY2 * 20 | 0;
                            anchorX = anchorX * 20 | 0;
                            anchorY = anchorY * 20 | 0;
                            this._graphicsData.cubicCurveTo(controlX1, controlY1, controlX2, controlY2, anchorX, anchorY);
                            var extremes;
                            var i;
                            var fromX = this._lastX;
                            var fromY = this._lastY;
                            if (controlX1 < fromX || controlX2 < fromX || controlX1 > anchorX || controlX2 > anchorX) {
                                extremes = cubicBezierExtremes(fromX, controlX1, controlX2, anchorX);
                                for (i = extremes.length; i--;) {
                                    this._extendBoundsByX(extremes[i] | 0);
                                }
                            }
                            if (controlY1 < fromY || controlY2 < fromY || controlY1 > anchorY || controlY2 > anchorY) {
                                extremes = cubicBezierExtremes(fromY, controlY1, controlY2, anchorY);
                                for (i = extremes.length; i--;) {
                                    this._extendBoundsByY(extremes[i] | 0);
                                }
                            }
                            this._applyLastCoordinates(anchorX, anchorY);
                            this._invalidate();
                        };
                        Graphics.prototype.copyFrom = function (sourceGraphics) {
                            this._graphicsData = sourceGraphics._graphicsData.clone();
                            this._fillBounds = sourceGraphics._fillBounds.clone();
                            this._lineBounds = sourceGraphics._lineBounds.clone();
                            this._textures = sourceGraphics._textures.concat();
                            this._lastX = sourceGraphics._lastX;
                            this._lastY = sourceGraphics._lastY;
                            this._boundsIncludeLastCoordinates = sourceGraphics._boundsIncludeLastCoordinates;
                            this._invalidate();
                        };
                        Graphics.prototype.drawPath = function (commands, data, winding) {
                            if (winding === void 0) { winding = "evenOdd"; }
                            commands = commands;
                            data = data;
                            winding = asCoerceString(winding);
                            notImplemented("public flash.display.Graphics::drawPath");
                            return;
                        };
                        Graphics.prototype.drawTriangles = function (vertices, indices, uvtData, culling) {
                            if (indices === void 0) { indices = null; }
                            if (uvtData === void 0) { uvtData = null; }
                            if (culling === void 0) { culling = "none"; }
                            vertices = vertices;
                            indices = indices;
                            uvtData = uvtData;
                            culling = asCoerceString(culling);
                            notImplemented("public flash.display.Graphics::drawTriangles");
                            return;
                        };
                        Graphics.prototype.drawGraphicsData = function (graphicsData) {
                            graphicsData = graphicsData;
                            notImplemented("public flash.display.Graphics::drawGraphicsData");
                            return;
                        };
                        Graphics.prototype._containsPoint = function (x, y, includeLines, ratio) {
                            var hasLines = this._graphicsData.hasLines;
                            if (!ratio && !(includeLines && hasLines ? this._lineBounds : this._fillBounds).contains(x, y)) {
                                return false;
                            }
                            var containsPoint = false;
                            if (this._graphicsData.hasFills) {
                                containsPoint = this._fillContainsPoint(x, y, ratio);
                            }
                            else {
                                release || assert(hasLines, "Can't have non-empty bounds without line or fill set.");
                            }
                            if (!containsPoint && includeLines) {
                                containsPoint = this._linesContainsPoint(x, y, ratio);
                            }
                            return containsPoint;
                        };
                        Graphics.prototype._fillContainsPoint = function (x, y, ratio) {
                            var data = this._graphicsData;
                            var commands = data.commands;
                            var commandsCount = data.commandsPosition;
                            var coordinates = data.coordinates;
                            var morphCoordinates = data.morphCoordinates;
                            var coordinatesIndex = 0;
                            var fromX = 0;
                            var fromY = 0;
                            var toX = 0;
                            var toY = 0;
                            var cpX;
                            var cpY;
                            var formOpen = false;
                            var fillActive = false;
                            var formOpenX = 0;
                            var formOpenY = 0;
                            var inside = false;
                            for (var commandIndex = 0; commandIndex < commandsCount; commandIndex++) {
                                var command = commands[commandIndex];
                                switch (command) {
                                    case 9 /* MoveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                                        if (formOpen && fillActive && rayIntersectsLine(x, y, fromX, fromY, formOpenX, formOpenY)) {
                                            inside = !inside;
                                        }
                                        formOpen = true;
                                        fromX = formOpenX = coordinates[coordinatesIndex++];
                                        fromY = formOpenY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            fromX = formOpenX += (morphCoordinates[coordinatesIndex - 2] - formOpenX) * ratio;
                                            fromY = formOpenY += (morphCoordinates[coordinatesIndex - 2] - formOpenY) * ratio;
                                        }
                                        continue;
                                    case 10 /* LineTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        if (fillActive && rayIntersectsLine(x, y, fromX, fromY, toX, toY)) {
                                            inside = !inside;
                                        }
                                        break;
                                    case 11 /* CurveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 4);
                                        cpX = coordinates[coordinatesIndex++];
                                        cpY = coordinates[coordinatesIndex++];
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            cpX += (morphCoordinates[coordinatesIndex - 4] - cpX) * ratio;
                                            cpY += (morphCoordinates[coordinatesIndex - 3] - cpY) * ratio;
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        if (fillActive && rayFullyCrossesCurve(x, y, fromX, fromY, cpX, cpY, toX, toY)) {
                                            inside = !inside;
                                        }
                                        break;
                                    case 12 /* CubicCurveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 6);
                                        cpX = coordinates[coordinatesIndex++];
                                        cpY = coordinates[coordinatesIndex++];
                                        var cp2X = coordinates[coordinatesIndex++];
                                        var cp2Y = coordinates[coordinatesIndex++];
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            cpX += (morphCoordinates[coordinatesIndex - 6] - cpX) * ratio;
                                            cpY += (morphCoordinates[coordinatesIndex - 5] - cpY) * ratio;
                                            cp2X += (morphCoordinates[coordinatesIndex - 4] - cp2X) * ratio;
                                            cp2Y += (morphCoordinates[coordinatesIndex - 3] - cp2Y) * ratio;
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        if (fillActive && rayFullyCrossesCubicCurve(x, y, fromX, fromY, cpX, cpY, cp2X, cp2Y, toX, toY)) {
                                            inside = !inside;
                                        }
                                        break;
                                    case 1 /* BeginSolidFill */:
                                    case 2 /* BeginGradientFill */:
                                    case 3 /* BeginBitmapFill */:
                                    case 4 /* EndFill */:
                                        if (formOpen && fillActive && rayIntersectsLine(x, y, fromX, fromY, formOpenX, formOpenY)) {
                                            inside = !inside;
                                        }
                                        if (inside) {
                                            return true;
                                        }
                                        formOpen = false;
                                        fillActive = command !== 4 /* EndFill */;
                                        break;
                                    case 5 /* LineStyleSolid */:
                                        coordinatesIndex++;
                                        break;
                                    case 6 /* LineStyleGradient */:
                                    case 7 /* LineStyleBitmap */:
                                    case 8 /* LineEnd */:
                                        break;
                                    default:
                                        release || assertUnreachable('Invalid command ' + command + ' encountered at index' + (commandIndex - 1) + ' of ' + commandsCount);
                                }
                                fromX = toX;
                                fromY = toY;
                            }
                            release || assert(commandIndex === commandsCount);
                            release || assert(coordinatesIndex === data.coordinatesPosition);
                            if (formOpen && fillActive && rayIntersectsLine(x, y, fromX, fromY, formOpenX, formOpenY)) {
                                inside = !inside;
                            }
                            return inside;
                        };
                        Graphics.prototype._linesContainsPoint = function (x, y, ratio) {
                            var data = this._graphicsData;
                            var commands = data.commands;
                            var commandsCount = data.commandsPosition;
                            var coordinates = data.coordinates;
                            var morphCoordinates = data.morphCoordinates;
                            var coordinatesIndex = 0;
                            var fromX = 0;
                            var fromY = 0;
                            var toX = 0;
                            var toY = 0;
                            var cpX;
                            var cpY;
                            var curveX;
                            var curveY;
                            var t;
                            var width = 0;
                            var halfWidth = 0;
                            var halfWidthSq = 0;
                            var minX = 0;
                            var maxX = 0;
                            var minY = 0;
                            var maxY = 0;
                            for (var commandIndex = 0; commandIndex < commandsCount; commandIndex++) {
                                var command = commands[commandIndex];
                                switch (command) {
                                    case 9 /* MoveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                                        fromX = coordinates[coordinatesIndex++];
                                        fromY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            fromX += (morphCoordinates[coordinatesIndex - 2] - fromX) * ratio;
                                            fromY += (morphCoordinates[coordinatesIndex - 1] - fromY) * ratio;
                                        }
                                        continue;
                                    case 10 /* LineTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                                        if (width === 0) {
                                            fromX = coordinates[coordinatesIndex++];
                                            fromY = coordinates[coordinatesIndex++];
                                            if (ratio) {
                                                fromX += (morphCoordinates[coordinatesIndex - 2] - fromX) * ratio;
                                                fromY += (morphCoordinates[coordinatesIndex - 1] - fromY) * ratio;
                                            }
                                            continue;
                                        }
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        if (fromX === toX && fromY === toY) {
                                            break;
                                        }
                                        if (maxX < fromX && maxX < toX || minX > fromX && minX > toX || maxY < fromY && maxY < toY || minY > fromY && minY > toY) {
                                            break;
                                        }
                                        if (toX === fromX || toY === fromY) {
                                            return true;
                                        }
                                        t = ((x - fromX) * (toX - fromX) + (y - fromY) * (toY - fromY)) / distanceSq(fromX, fromY, toX, toY);
                                        if (t < 0) {
                                            if (distanceSq(x, y, fromX, fromY) <= halfWidthSq) {
                                                return true;
                                            }
                                            break;
                                        }
                                        if (t > 1) {
                                            if (distanceSq(x, y, toX, toY) <= halfWidthSq) {
                                                return true;
                                            }
                                            break;
                                        }
                                        if (distanceSq(x, y, fromX + t * (toX - fromX), fromY + t * (toY - fromY)) <= halfWidthSq) {
                                            return true;
                                        }
                                        break;
                                    case 11 /* CurveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 4);
                                        if (width === 0) {
                                            coordinatesIndex += 2;
                                            fromX = coordinates[coordinatesIndex++];
                                            fromY = coordinates[coordinatesIndex++];
                                            if (ratio) {
                                                fromX += (morphCoordinates[coordinatesIndex - 2] - fromX) * ratio;
                                                fromY += (morphCoordinates[coordinatesIndex - 1] - fromY) * ratio;
                                            }
                                            continue;
                                        }
                                        cpX = coordinates[coordinatesIndex++];
                                        cpY = coordinates[coordinatesIndex++];
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            cpX += (morphCoordinates[coordinatesIndex - 4] - cpX) * ratio;
                                            cpY += (morphCoordinates[coordinatesIndex - 3] - cpY) * ratio;
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        var extremeX = quadraticBezierExtreme(fromX, cpX, toX);
                                        if (maxX < fromX && maxX < extremeX && maxX < toX || minX > fromX && minX > extremeX && minX > toX) {
                                            break;
                                        }
                                        var extremeY = quadraticBezierExtreme(fromY, cpY, toY);
                                        if (maxY < fromY && maxY < extremeY && maxY < toY || minY > fromY && minY > extremeY && minY > toY) {
                                            break;
                                        }
                                        for (t = 0; t < 1; t += 0.02) {
                                            curveX = quadraticBezier(fromX, cpX, toX, t);
                                            if (curveX < minX || curveX > maxX) {
                                                continue;
                                            }
                                            curveY = quadraticBezier(fromY, cpY, toY, t);
                                            if (curveY < minY || curveY > maxY) {
                                                continue;
                                            }
                                            if ((x - curveX) * (x - curveX) + (y - curveY) * (y - curveY) < halfWidthSq) {
                                                return true;
                                            }
                                        }
                                        break;
                                    case 12 /* CubicCurveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 6);
                                        if (width === 0) {
                                            coordinatesIndex += 4;
                                            fromX = coordinates[coordinatesIndex++];
                                            fromX = coordinates[coordinatesIndex++];
                                            if (ratio) {
                                                fromX += (morphCoordinates[coordinatesIndex - 2] - fromX) * ratio;
                                                fromY += (morphCoordinates[coordinatesIndex - 1] - fromY) * ratio;
                                            }
                                            continue;
                                        }
                                        cpX = coordinates[coordinatesIndex++];
                                        cpY = coordinates[coordinatesIndex++];
                                        var cp2X = coordinates[coordinatesIndex++];
                                        var cp2Y = coordinates[coordinatesIndex++];
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            cpX += (morphCoordinates[coordinatesIndex - 6] - cpX) * ratio;
                                            cpY += (morphCoordinates[coordinatesIndex - 5] - cpY) * ratio;
                                            cp2X += (morphCoordinates[coordinatesIndex - 4] - cp2X) * ratio;
                                            cp2Y += (morphCoordinates[coordinatesIndex - 3] - cp2Y) * ratio;
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        var extremesX = cubicBezierExtremes(fromX, cpX, cp2X, toX);
                                        while (extremesX.length < 2) {
                                            extremesX.push(toX);
                                        }
                                        if (maxX < fromX && maxX < toX && maxX < extremesX[0] && maxX < extremesX[1] || minX > fromX && minX > toX && minX > extremesX[0] && minX > extremesX[1]) {
                                            break;
                                        }
                                        var extremesY = cubicBezierExtremes(fromY, cpY, cp2Y, toY);
                                        while (extremesY.length < 2) {
                                            extremesY.push(toY);
                                        }
                                        if (maxY < fromY && maxY < toY && maxY < extremesY[0] && maxY < extremesY[1] || minY > fromY && minY > toY && minY > extremesY[0] && minY > extremesY[1]) {
                                            break;
                                        }
                                        for (t = 0; t < 1; t += 0.02) {
                                            curveX = cubicBezier(fromX, cpX, cp2X, toX, t);
                                            if (curveX < minX || curveX > maxX) {
                                                continue;
                                            }
                                            curveY = cubicBezier(fromY, cpY, cp2Y, toY, t);
                                            if (curveY < minY || curveY > maxY) {
                                                continue;
                                            }
                                            if ((x - curveX) * (x - curveX) + (y - curveY) * (y - curveY) < halfWidthSq) {
                                                return true;
                                            }
                                        }
                                        break;
                                    case 5 /* LineStyleSolid */:
                                        width = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            width += (morphCoordinates[coordinatesIndex - 1] - width) * ratio;
                                        }
                                        halfWidth = width >> 2;
                                        halfWidthSq = halfWidth * halfWidth;
                                        minX = x - halfWidth;
                                        maxX = x + halfWidth;
                                        minY = y - halfWidth;
                                        maxY = y + halfWidth;
                                        break;
                                    case 1 /* BeginSolidFill */:
                                    case 2 /* BeginGradientFill */:
                                    case 3 /* BeginBitmapFill */:
                                    case 4 /* EndFill */:
                                    case 6 /* LineStyleGradient */:
                                    case 7 /* LineStyleBitmap */:
                                    case 8 /* LineEnd */:
                                        break;
                                    default:
                                        release || assertUnreachable('Invalid command ' + command + ' encountered at index' + (commandIndex - 1) + ' of ' + commandsCount);
                                }
                                fromX = toX;
                                fromY = toY;
                            }
                            release || assert(commandIndex === commandsCount);
                            release || assert(coordinatesIndex === data.coordinatesPosition);
                            return false;
                        };
                        Graphics.prototype._writeBitmapStyle = function (pathCommand, bitmap, matrix, repeat, smooth, skipWrite) {
                            if (Shumway.isNullOrUndefined(bitmap)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'bitmap');
                            }
                            else if (!(flash.display.BitmapData.isType(bitmap))) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'bitmap', 'flash.display.BitmapData');
                            }
                            if (Shumway.isNullOrUndefined(matrix)) {
                                matrix = flash.geom.Matrix.FROZEN_IDENTITY_MATRIX;
                            }
                            else if (!(flash.geom.Matrix.isType(matrix))) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'matrix', 'flash.geom.Matrix');
                            }
                            repeat = !!repeat;
                            smooth = !!smooth;
                            if (skipWrite) {
                                return;
                            }
                            var index = this._textures.length;
                            this._textures.push(bitmap);
                            this._graphicsData.beginBitmap(pathCommand, index, matrix, repeat, smooth);
                        };
                        Graphics.prototype._writeGradientStyle = function (pathCommand, type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio, skipWrite) {
                            if (Shumway.isNullOrUndefined(type)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'type');
                            }
                            var gradientType = GradientType.toNumber(asCoerceString(type));
                            if (gradientType < 0) {
                                throwError("ArgumentError", AVM2.Errors.InvalidEnumError, "type");
                            }
                            if (Shumway.isNullOrUndefined(colors)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'colors');
                            }
                            if (!(colors instanceof Array)) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'colors', 'Array');
                            }
                            if (!(alphas instanceof Array)) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'alphas', 'Array');
                            }
                            if (Shumway.isNullOrUndefined(alphas)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'alphas');
                            }
                            if (!(ratios instanceof Array)) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'ratios', 'Array');
                            }
                            if (Shumway.isNullOrUndefined(ratios)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'ratios');
                            }
                            var colorsRGBA = [];
                            var coercedRatios = [];
                            var colorStops = colors.length;
                            var recordsValid = colorStops === alphas.length && colorStops === ratios.length;
                            if (recordsValid) {
                                for (var i = 0; i < colorStops; i++) {
                                    var ratio = +ratios[i];
                                    if (ratio > 0xff || ratio < 0) {
                                        recordsValid = false;
                                        break;
                                    }
                                    colorsRGBA[i] = (colors[i] << 8 & 0xffffff00) | clamp(+alphas[i], 0, 1) * 0xff;
                                    coercedRatios[i] = ratio;
                                }
                            }
                            if (!recordsValid) {
                                return;
                            }
                            if (Shumway.isNullOrUndefined(matrix)) {
                                matrix = flash.geom.Matrix.FROZEN_IDENTITY_MATRIX;
                            }
                            else if (!(flash.geom.Matrix.isType(matrix))) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'matrix', 'flash.geom.Matrix');
                            }
                            if (skipWrite) {
                                return;
                            }
                            var spread = SpreadMethod.toNumber(asCoerceString(spreadMethod));
                            if (spread < 0) {
                                spread = SpreadMethod.toNumber(SpreadMethod.PAD);
                            }
                            var interpolation = InterpolationMethod.toNumber(asCoerceString(interpolationMethod));
                            if (interpolation < 0) {
                                interpolation = InterpolationMethod.toNumber(InterpolationMethod.RGB);
                            }
                            focalPointRatio = clamp(+focalPointRatio, -1, 1) / 2 * 0xff | 0;
                            this._graphicsData.beginGradient(pathCommand, colorsRGBA, coercedRatios, gradientType, matrix, spread, interpolation, focalPointRatio);
                        };
                        Graphics.prototype._extendBoundsByPoint = function (x, y) {
                            this._extendBoundsByX(x);
                            this._extendBoundsByY(y);
                        };
                        Graphics.prototype._extendBoundsByX = function (x) {
                            this._fillBounds.extendByX(x);
                            var bounds = this._lineBounds;
                            if (bounds.xMin === 0x8000000) {
                                bounds.xMin = x - this._topLeftStrokeWidth;
                                bounds.xMax = x + this._bottomRightStrokeWidth;
                            }
                            else {
                                bounds.xMin = Math.min(x - this._topLeftStrokeWidth, bounds.xMin);
                                bounds.xMax = Math.max(x + this._bottomRightStrokeWidth, bounds.xMax);
                            }
                        };
                        Graphics.prototype._extendBoundsByY = function (y) {
                            this._fillBounds.extendByY(y);
                            var bounds = this._lineBounds;
                            if (bounds.yMin === 0x8000000) {
                                bounds.yMin = y - this._topLeftStrokeWidth;
                                bounds.yMax = y + this._bottomRightStrokeWidth;
                            }
                            else {
                                bounds.yMin = Math.min(y - this._topLeftStrokeWidth, bounds.yMin);
                                bounds.yMax = Math.max(y + this._bottomRightStrokeWidth, bounds.yMax);
                            }
                        };
                        Graphics.prototype._applyLastCoordinates = function (x, y) {
                            if (!this._boundsIncludeLastCoordinates) {
                                this._extendBoundsByPoint(this._lastX, this._lastY);
                            }
                            this._boundsIncludeLastCoordinates = true;
                            this._lastX = x;
                            this._lastY = y;
                            this._extendBoundsByPoint(x, y);
                        };
                        Graphics.classInitializer = null;
                        Graphics.initializer = null;
                        Graphics.classSymbols = null;
                        Graphics.instanceSymbols = null;
                        return Graphics;
                    })(AS.ASNative);
                    display.Graphics = Graphics;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var Timeline = Shumway.Timeline;
                    var SwfTag = Shumway.SWF.Parser.SwfTag;
                    var PlaceObjectFlags = Shumway.SWF.Parser.PlaceObjectFlags;
                    var clamp = Shumway.NumberUtilities.clamp;
                    var DragMode;
                    (function (DragMode) {
                        DragMode[DragMode["Inactive"] = 0] = "Inactive";
                        DragMode[DragMode["LockToPointer"] = 1] = "LockToPointer";
                        DragMode[DragMode["PreserveDistance"] = 2] = "PreserveDistance";
                    })(DragMode || (DragMode = {}));
                    var Sprite = (function (_super) {
                        __extends(Sprite, _super);
                        function Sprite() {
                            false && _super.call(this);
                            display.DisplayObjectContainer.instanceConstructorNoInitialize.call(this);
                            this._constructChildren();
                        }
                        Sprite.prototype._addFrame = function (frame) {
                            var frames = this._symbol.frames;
                            frames.push(frame);
                            if (frames.length === 1) {
                                this._initializeChildren(frame);
                            }
                        };
                        Sprite.prototype._initializeChildren = function (frame) {
                            if (frame.controlTags) {
                                this._processControlTags(frame.controlTags, false);
                            }
                        };
                        Sprite.prototype._processControlTags = function (tags, backwards) {
                            if (backwards) {
                                var children = this._children.slice();
                                for (var i = 0; i < children.length; i++) {
                                    var child = children[i];
                                    if (child._depth < 0) {
                                        continue;
                                    }
                                    var tag = null;
                                    for (var j = 0; j < tags.length; j++) {
                                        if (tags[j].depth === child._depth) {
                                            tag = tags[j];
                                            break;
                                        }
                                    }
                                    if (!tag || child._symbol.id !== tag.symbolId || child._ratio !== (tag.ratio | 0)) {
                                        this._removeAnimatedChild(child);
                                    }
                                }
                            }
                            var loaderInfo = this._symbol.loaderInfo;
                            for (var i = 0; i < tags.length; i++) {
                                var parsedOrUnparsedTag = tags[i];
                                var tag = parsedOrUnparsedTag.tagCode === undefined ? parsedOrUnparsedTag : loaderInfo._file.getParsedTag(parsedOrUnparsedTag);
                                switch (tag.code) {
                                    case 5 /* CODE_REMOVE_OBJECT */:
                                    case 28 /* CODE_REMOVE_OBJECT2 */:
                                        var child = this.getTimelineObjectAtDepth(tag.depth | 0);
                                        if (child) {
                                            this._removeAnimatedChild(child);
                                        }
                                        break;
                                    case 4 /* CODE_PLACE_OBJECT */:
                                    case 26 /* CODE_PLACE_OBJECT2 */:
                                    case 70 /* CODE_PLACE_OBJECT3 */:
                                        var placeObjectTag = tag;
                                        var depth = placeObjectTag.depth;
                                        var child = this.getTimelineObjectAtDepth(depth);
                                        var hasCharacter = placeObjectTag.symbolId > -1;
                                        if (placeObjectTag.flags & 1 /* Move */) {
                                            if (!child) {
                                                break;
                                            }
                                        }
                                        else if (!hasCharacter || (child && !(backwards && hasCharacter))) {
                                            Shumway.Debug.warning("Warning: Failed to place object at depth " + depth + ".");
                                            break;
                                        }
                                        var symbol = null;
                                        if (hasCharacter) {
                                            symbol = loaderInfo.getSymbolById(placeObjectTag.symbolId);
                                            if (!symbol) {
                                                break;
                                            }
                                        }
                                        if (child) {
                                            if (symbol && !symbol.dynamic) {
                                                child._setStaticContentFromSymbol(symbol);
                                            }
                                            if (child._hasFlags(4096 /* AnimatedByTimeline */)) {
                                                child._animate(tag);
                                            }
                                        }
                                        else {
                                            child = this.createAnimatedDisplayObject(symbol, placeObjectTag, false);
                                            this.addTimelineObjectAtDepth(child, depth);
                                            if (symbol.isAVM1Object) {
                                                Shumway.AVM1.Lib.initializeAVM1Object(child, symbol.avm1Context, placeObjectTag);
                                            }
                                        }
                                        break;
                                }
                            }
                        };
                        Sprite.prototype._removeAnimatedChild = function (child) {
                            this.removeChild(child);
                            if (child._name) {
                                var mn = Shumway.AVM2.ABC.Multiname.getPublicQualifiedName(child._name);
                                if (this[mn] === child) {
                                    this[mn] = null;
                                }
                            }
                        };
                        Sprite.prototype._canHaveGraphics = function () {
                            return true;
                        };
                        Sprite.prototype._getGraphics = function () {
                            return this._graphics;
                        };
                        Object.defineProperty(Sprite.prototype, "graphics", {
                            get: function () {
                                return this._ensureGraphics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "buttonMode", {
                            get: function () {
                                return this._buttonMode;
                            },
                            set: function (value) {
                                this._buttonMode = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "dropTarget", {
                            get: function () {
                                return this._dropTarget;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "hitArea", {
                            get: function () {
                                return this._hitArea;
                            },
                            set: function (value) {
                                value = value;
                                if (this._hitArea === value) {
                                    return;
                                }
                                if (value && value._hitTarget) {
                                    value._hitTarget._hitArea = null;
                                }
                                this._hitArea = value;
                                if (value) {
                                    value._hitTarget = this;
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "useHandCursor", {
                            get: function () {
                                return this._useHandCursor;
                            },
                            set: function (value) {
                                this._useHandCursor = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "soundTransform", {
                            get: function () {
                                notImplemented("public flash.display.Sprite::get soundTransform");
                                return;
                            },
                            set: function (sndTransform) {
                                sndTransform = sndTransform;
                                notImplemented("public flash.display.Sprite::set soundTransform");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Sprite.prototype.startDrag = function (lockCenter, bounds) {
                            if (lockCenter === void 0) { lockCenter = false; }
                            if (bounds === void 0) { bounds = null; }
                            lockCenter = !!lockCenter;
                            if (lockCenter) {
                                this._dragMode = 1 /* LockToPointer */;
                            }
                            else {
                                this._dragMode = 2 /* PreserveDistance */;
                                var mousePosition = this._getLocalMousePosition();
                                this._dragDeltaX = this.x - mousePosition.x;
                                this._dragDeltaY = this.y - mousePosition.y;
                            }
                            this._dragBounds = bounds;
                            flash.ui.Mouse.draggableObject = this;
                        };
                        Sprite.prototype.stopDrag = function () {
                            if (flash.ui.Mouse.draggableObject === this) {
                                flash.ui.Mouse.draggableObject = null;
                                this._dragMode = 0 /* Inactive */;
                                this._dragDeltaX = 0;
                                this._dragDeltaY = 0;
                                this._dragBounds = null;
                            }
                        };
                        Sprite.prototype._updateDragState = function (dropTarget) {
                            if (dropTarget === void 0) { dropTarget = null; }
                            var mousePosition = this._getLocalMousePosition();
                            var newX = mousePosition.x;
                            var newY = mousePosition.y;
                            if (this._dragMode === 2 /* PreserveDistance */) {
                                newX += this._dragDeltaX;
                                newY += this._dragDeltaY;
                            }
                            if (this._dragBounds) {
                                var bounds = this._dragBounds;
                                newX = clamp(newX, bounds.left, bounds.right);
                                newY = clamp(newY, bounds.top, bounds.bottom);
                            }
                            this.x = newX;
                            this.y = newY;
                            this._dropTarget = dropTarget;
                        };
                        Sprite.prototype.startTouchDrag = function (touchPointID, lockCenter, bounds) {
                            if (lockCenter === void 0) { lockCenter = false; }
                            if (bounds === void 0) { bounds = null; }
                            touchPointID = touchPointID | 0;
                            lockCenter = !!lockCenter;
                            bounds = bounds;
                            notImplemented("public flash.display.Sprite::startTouchDrag");
                            return;
                        };
                        Sprite.prototype.stopTouchDrag = function (touchPointID) {
                            touchPointID = touchPointID | 0;
                            notImplemented("public flash.display.Sprite::stopTouchDrag");
                            return;
                        };
                        Sprite.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            if (testingType === 5 /* Drop */ && this._dragMode > 0 /* Inactive */) {
                                return;
                            }
                            var result = this._boundsAndMaskContainPoint(globalX, globalY, localX, localY, testingType);
                            if (!result && testingType === 3 /* Mouse */ && this._hitArea && this._mouseEnabled) {
                                var matrix = this._hitArea._getInvertedConcatenatedMatrix();
                                var hitAreaLocalX = matrix.transformX(globalX, globalY);
                                var hitAreaLocalY = matrix.transformY(globalX, globalY);
                                result = this._hitArea._boundsAndMaskContainPoint(globalX, globalY, hitAreaLocalX, hitAreaLocalY, testingType);
                            }
                            if (result === 0 /* None */ || testingType < 2 /* HitTestShape */) {
                                return result;
                            }
                            return this._containsPointImpl(globalX, globalY, localX, localY, testingType, objects, true);
                        };
                        Sprite.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            if (this._hitArea) {
                                return !!this._hitArea._containsGlobalPoint(globalX, globalY, 2 /* HitTestShape */, null);
                            }
                            var graphics = this._getGraphics();
                            return !!graphics && graphics._containsPoint(localX, localY, true, 0);
                        };
                        Sprite.classInitializer = null;
                        Sprite.initializer = function (symbol) {
                            var self = this;
                            self._graphics = null;
                            self._buttonMode = false;
                            self._dropTarget = null;
                            self._hitArea = null;
                            self._useHandCursor = true;
                            self._dragMode = 0 /* Inactive */;
                            self._dragDeltaX = 0;
                            self._dragDeltaY = 0;
                            self._dragBounds = null;
                            self._hitTarget = null;
                            if (symbol) {
                                if (symbol.isRoot) {
                                    self._root = self;
                                }
                                if (symbol.numFrames && symbol.frames.length > 0) {
                                    self._initializeChildren(symbol.frames[0]);
                                }
                            }
                        };
                        Sprite.classSymbols = null;
                        Sprite.instanceSymbols = null;
                        return Sprite;
                    })(flash.display.DisplayObjectContainer);
                    display.Sprite = Sprite;
                    var SpriteSymbol = (function (_super) {
                        __extends(SpriteSymbol, _super);
                        function SpriteSymbol(data, loaderInfo) {
                            _super.call(this, data, flash.display.MovieClip, true);
                            this.numFrames = 1;
                            this.frames = [];
                            this.labels = [];
                            this.frameScripts = [];
                            this.loaderInfo = loaderInfo;
                        }
                        SpriteSymbol.FromData = function (data, loaderInfo) {
                            var symbol = new SpriteSymbol(data, loaderInfo);
                            symbol.numFrames = data.frameCount;
                            if (loaderInfo.actionScriptVersion === display.ActionScriptVersion.ACTIONSCRIPT2) {
                                symbol.isAVM1Object = true;
                                symbol.avm1Context = loaderInfo._avm1Context;
                            }
                            symbol.frameScripts = [];
                            var frames = data.frames;
                            for (var i = 0; i < frames.length; i++) {
                                var frame = loaderInfo.getFrame(data, i);
                                var actionBlocks = frame.actionBlocks;
                                if (actionBlocks) {
                                    for (var j = 0; j < actionBlocks.length; j++) {
                                        symbol.frameScripts.push(i);
                                        symbol.frameScripts.push(actionBlocks[j]);
                                    }
                                }
                                if (frame.labelName) {
                                    symbol.labels.push(new flash.display.FrameLabel(frame.labelName, i + 1));
                                }
                                symbol.frames.push(frame);
                            }
                            return symbol;
                        };
                        return SpriteSymbol;
                    })(Timeline.DisplaySymbol);
                    display.SpriteSymbol = SpriteSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var assert = Shumway.Debug.assert;
                    var assertUnreachable = Shumway.Debug.assertUnreachable;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Telemetry = Shumway.Telemetry;
                    var events = flash.events;
                    var SwfTag = Shumway.SWF.Parser.SwfTag;
                    (function (FrameNavigationModel) {
                        FrameNavigationModel[FrameNavigationModel["SWF1"] = 1] = "SWF1";
                        FrameNavigationModel[FrameNavigationModel["SWF9"] = 9] = "SWF9";
                        FrameNavigationModel[FrameNavigationModel["SWF10"] = 10] = "SWF10";
                    })(display.FrameNavigationModel || (display.FrameNavigationModel = {}));
                    var FrameNavigationModel = display.FrameNavigationModel;
                    var MovieClipSoundsManager = (function () {
                        function MovieClipSoundsManager(mc) {
                            this._mc = mc;
                            this._startSoundRegistrations = null;
                            this._soundStream = null;
                        }
                        MovieClipSoundsManager.prototype.registerStartSounds = function (frameNum, soundStartInfo) {
                            if (this._startSoundRegistrations === null) {
                                this._startSoundRegistrations = {};
                            }
                            this._startSoundRegistrations[frameNum] = soundStartInfo;
                        };
                        MovieClipSoundsManager.prototype.initSoundStream = function (streamInfo) {
                            this._soundStream = new display.MovieClipSoundStream(streamInfo, this._mc);
                        };
                        MovieClipSoundsManager.prototype.addSoundStreamBlock = function (frameNum, streamBlock) {
                            if (this._soundStream) {
                                this._soundStream.appendBlock(frameNum, streamBlock);
                            }
                        };
                        MovieClipSoundsManager.prototype._startSounds = function (frameNum) {
                            var starts = this._startSoundRegistrations[frameNum];
                            if (starts) {
                                var sounds = this._soundClips || (this._soundClips = {});
                                var loaderInfo = this._mc.loaderInfo;
                                for (var i = 0; i < starts.length; i++) {
                                    var start = starts[i];
                                    var symbolId = start.soundId;
                                    var info = start.soundInfo;
                                    var sound = sounds[symbolId];
                                    if (!sound) {
                                        var symbolInfo = loaderInfo.getSymbolById(symbolId);
                                        if (!symbolInfo) {
                                            continue;
                                        }
                                        var symbolClass = symbolInfo.symbolClass;
                                        var soundObj = symbolClass.initializeFrom(symbolInfo);
                                        symbolClass.instanceConstructorNoInitialize.call(soundObj);
                                        sounds[symbolId] = sound = { object: soundObj };
                                    }
                                    if (sound.channel && info.stop) {
                                        sound.channel.stop();
                                        sound.channel = null;
                                    }
                                    if (!info.stop && (!sound.channel || !sound.channel.playing)) {
                                        var loops = info.hasLoops ? info.loopCount : 0;
                                        sound.channel = sound.object.play(0, loops);
                                    }
                                }
                            }
                        };
                        MovieClipSoundsManager.prototype.syncSounds = function (frameNum) {
                            if (this._startSoundRegistrations !== null) {
                                this._startSounds(frameNum);
                            }
                            if (this._soundStream) {
                                this._soundStream.playFrame(frameNum);
                            }
                        };
                        return MovieClipSoundsManager;
                    })();
                    var MovieClip = (function (_super) {
                        __extends(MovieClip, _super);
                        function MovieClip() {
                            false && _super.call(this);
                            display.Sprite.instanceConstructorNoInitialize.call(this);
                        }
                        MovieClip.reset = function () {
                            MovieClip.frameNavigationModel = 10 /* SWF10 */;
                            MovieClip._callQueue = [];
                        };
                        MovieClip.runFrameScripts = function () {
                            AVM2.enterTimeline("MovieClip.executeFrame");
                            var queue = MovieClip._callQueue;
                            MovieClip._callQueue = [];
                            for (var i = 0; i < queue.length; i++) {
                                var instance = queue[i];
                                if (instance._hasFlags(1024 /* NeedsLoadEvent */)) {
                                    instance._removeFlags(1024 /* NeedsLoadEvent */);
                                    instance.dispatchEvent(events.Event.getInstance(events.Event.AVM1_LOAD));
                                    continue;
                                }
                                instance._allowFrameNavigation = display.MovieClip.frameNavigationModel === 1 /* SWF1 */;
                                instance.callFrame(instance._currentFrame);
                                instance._allowFrameNavigation = true;
                                if (instance._nextFrame !== instance._currentFrame) {
                                    if (display.MovieClip.frameNavigationModel === 9 /* SWF9 */) {
                                        instance._advanceFrame();
                                        instance._constructFrame();
                                        instance._removeFlags(8192 /* HasFrameScriptPending */);
                                        instance.callFrame(instance._currentFrame);
                                    }
                                    else {
                                        display.DisplayObject.performFrameNavigation(false, true);
                                    }
                                }
                            }
                            AVM2.leaveTimeline();
                        };
                        MovieClip.prototype._addFrame = function (frameInfo) {
                            var spriteSymbol = this._symbol;
                            var frames = spriteSymbol.frames;
                            frames.push(frameInfo);
                            if (frameInfo.labelName) {
                                this.addFrameLabel(frameInfo.labelName, frames.length);
                            }
                            if (frameInfo.soundStreamHead) {
                                this._initSoundStream(frameInfo.soundStreamHead);
                            }
                            if (frameInfo.soundStreamBlock) {
                                this._addSoundStreamBlock(frames.length, frameInfo.soundStreamBlock);
                            }
                            if (spriteSymbol.isAVM1Object) {
                                Shumway.AVM1.Lib.getAVM1Object(this, spriteSymbol.avm1Context).addFrameActionBlocks(frames.length - 1, frameInfo);
                                if (frameInfo.exports) {
                                    var exports = frameInfo.exports;
                                    for (var i = 0; i < exports.length; i++) {
                                        var asset = exports[i];
                                        spriteSymbol.avm1Context.addAsset(asset.className, asset.symbolId, null);
                                    }
                                }
                            }
                            if (frames.length === 1) {
                                this._initializeChildren(frames[0]);
                            }
                        };
                        MovieClip.prototype._initFrame = function (advance) {
                            if (advance) {
                                if (this.buttonMode) {
                                    var state = null;
                                    if (this._mouseOver) {
                                        state = this._mouseDown ? '_down' : '_over';
                                    }
                                    else if (this._currentButtonState !== null) {
                                        state = '_up';
                                    }
                                    if (state !== this._currentButtonState && this._buttonFrames[state]) {
                                        this.stop();
                                        this._gotoFrame(state, null);
                                        this._currentButtonState = state;
                                        this._advanceFrame();
                                        return;
                                    }
                                }
                                if (this._totalFrames > 1 && !this._stopped && this._hasFlags(256 /* Constructed */)) {
                                    this._nextFrame++;
                                }
                            }
                            this._advanceFrame();
                        };
                        MovieClip.prototype._constructFrame = function () {
                            this._constructChildren();
                        };
                        MovieClip.prototype._enqueueFrameScripts = function () {
                            if (this._hasFlags(1024 /* NeedsLoadEvent */)) {
                                MovieClip._callQueue.push(this);
                            }
                            if (this._hasFlags(8192 /* HasFrameScriptPending */)) {
                                this._removeFlags(8192 /* HasFrameScriptPending */);
                                MovieClip._callQueue.push(this);
                            }
                            _super.prototype._enqueueFrameScripts.call(this);
                        };
                        Object.defineProperty(MovieClip.prototype, "currentFrame", {
                            get: function () {
                                return this._currentFrame - this._sceneForFrameIndex(this._currentFrame).offset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "framesLoaded", {
                            get: function () {
                                return this._frames.length;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "totalFrames", {
                            get: function () {
                                return this._totalFrames;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "trackAsMenu", {
                            get: function () {
                                return this._trackAsMenu;
                            },
                            set: function (value) {
                                this._trackAsMenu = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "scenes", {
                            get: function () {
                                return this._scenes.map(function (scene) {
                                    return scene.clone();
                                });
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "currentScene", {
                            get: function () {
                                var scene = this._sceneForFrameIndex(this._currentFrame);
                                return scene.clone();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "currentLabel", {
                            get: function () {
                                var label = this._labelForFrame(this._currentFrame);
                                return label ? label.name : null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "currentLabels", {
                            get: function () {
                                return this._sceneForFrameIndex(this._currentFrame).labels;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "currentFrameLabel", {
                            get: function () {
                                var scene = this._sceneForFrameIndex(this._currentFrame);
                                var label = scene.getLabelByFrame(this._currentFrame - scene.offset);
                                return label && label.name;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "enabled", {
                            get: function () {
                                return this._enabled;
                            },
                            set: function (value) {
                                this._enabled = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "isPlaying", {
                            get: function () {
                                return this._isPlaying;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MovieClip.prototype.play = function () {
                            if (this._totalFrames > 1) {
                                this._isPlaying = true;
                            }
                            this._stopped = false;
                        };
                        MovieClip.prototype.stop = function () {
                            this._isPlaying = false;
                            this._stopped = true;
                        };
                        MovieClip.prototype._getAbsFrameNumber = function (frame, sceneName) {
                            var legacyMode = display.MovieClip.frameNavigationModel !== 10 /* SWF10 */;
                            var scene;
                            if (sceneName !== null) {
                                sceneName = asCoerceString(sceneName);
                                var scenes = this._scenes;
                                release || assert(scenes.length, "There should be at least one scene defined.");
                                for (var i = 0; i < scenes.length; i++) {
                                    scene = scenes[i];
                                    if (scene.name === sceneName) {
                                        break;
                                    }
                                }
                                if (i === scenes.length) {
                                    if (legacyMode) {
                                        return undefined;
                                    }
                                    throwError('ArgumentError', AVM2.Errors.SceneNotFoundError, sceneName);
                                }
                            }
                            else {
                                scene = this._sceneForFrameIndex(this._currentFrame);
                            }
                            var frameNum = parseInt(frame, 10);
                            if (frameNum != frame) {
                                var label = scene.getLabelByName(frame, legacyMode);
                                if (!label) {
                                    if (legacyMode) {
                                        return undefined;
                                    }
                                    throwError('ArgumentError', AVM2.Errors.FrameLabelNotFoundError, frame, sceneName);
                                }
                                frameNum = label.frame;
                            }
                            return scene.offset + frameNum;
                        };
                        MovieClip.prototype._gotoFrame = function (frame, sceneName) {
                            var frameNum = this._getAbsFrameNumber(frame, sceneName);
                            if (frameNum === undefined) {
                                return;
                            }
                            this._gotoFrameAbs(frameNum);
                        };
                        MovieClip.prototype._gotoFrameAbs = function (frame) {
                            if (frame < 1) {
                                frame = 1;
                            }
                            else if (frame > this._totalFrames) {
                                frame = this._totalFrames;
                            }
                            if (frame === this._nextFrame) {
                                return;
                            }
                            this._nextFrame = frame;
                            if (this._allowFrameNavigation) {
                                if (display.MovieClip.frameNavigationModel === 9 /* SWF9 */) {
                                    this._advanceFrame();
                                    this._constructFrame();
                                }
                                else {
                                    display.DisplayObject.performFrameNavigation(false, true);
                                }
                            }
                        };
                        MovieClip.prototype._advanceFrame = function () {
                            var currentFrame = this._currentFrame;
                            var nextFrame = this._nextFrame;
                            if (nextFrame > this._totalFrames) {
                                nextFrame = 1;
                            }
                            if (currentFrame === nextFrame) {
                                this._nextFrame = nextFrame;
                                return;
                            }
                            if (nextFrame > this.framesLoaded) {
                                this._nextFrame = nextFrame;
                                return;
                            }
                            var currentSwfFrame = this._frames[currentFrame - 1];
                            var nextSwfFrame = this._frames[nextFrame - 1];
                            if (nextSwfFrame !== currentSwfFrame) {
                                this._seekToFrame(nextFrame);
                                if (nextSwfFrame.controlTags) {
                                    var tags = nextSwfFrame.controlTags;
                                    var soundStarts;
                                    for (var i = 0; i < tags.length; i++) {
                                        var tag = tags[i];
                                        if (tag.tagCode === 15 /* CODE_START_SOUND */) {
                                            var loaderInfo = this._symbol.loaderInfo;
                                            tag = loaderInfo._file.getParsedTag(tag);
                                        }
                                        if (tag.code === 15 /* CODE_START_SOUND */) {
                                            if (!soundStarts) {
                                                soundStarts = [];
                                            }
                                            soundStarts.push(new Shumway.Timeline.SoundStart(tag.soundId, tag.soundInfo));
                                        }
                                    }
                                    if (soundStarts) {
                                        this._registerStartSounds(nextFrame, soundStarts);
                                    }
                                }
                            }
                            if (this._frameScripts[nextFrame]) {
                                this._setFlags(8192 /* HasFrameScriptPending */);
                                this._parent && this._propagateFlagsUp(16384 /* ContainsFrameScriptPendingChildren */);
                            }
                            this._currentFrame = this._nextFrame = nextFrame;
                            this._syncSounds(nextFrame);
                        };
                        MovieClip.prototype._seekToFrame = function (frame) {
                            var currentFrame = this._currentFrame;
                            var frames = this._frames;
                            if (frame === currentFrame + 1) {
                                var nextSwfFrame = frames[frame - 1];
                                if (nextSwfFrame.controlTags) {
                                    this._processControlTags(nextSwfFrame.controlTags, false);
                                }
                                return;
                            }
                            var currentSwfFrame = frames[currentFrame - 1];
                            var loaderInfo = this._symbol.loaderInfo;
                            var backwards = frame < currentFrame;
                            var controlTags = [];
                            var removedObjects;
                            var i = frame;
                            var n = backwards ? 0 : currentFrame;
                            while (i-- > n) {
                                var swfFrame = frames[i];
                                if (swfFrame === currentSwfFrame) {
                                    continue;
                                }
                                currentSwfFrame = swfFrame;
                                var tags = swfFrame.controlTags;
                                if (!tags) {
                                    continue;
                                }
                                var j = tags.length;
                                while (j--) {
                                    var parsedOrUnparsedTag = tags[j];
                                    var tag = parsedOrUnparsedTag.tagCode === undefined ? parsedOrUnparsedTag : loaderInfo._file.getParsedTag(parsedOrUnparsedTag);
                                    switch (tag.code) {
                                        case 5 /* CODE_REMOVE_OBJECT */:
                                        case 28 /* CODE_REMOVE_OBJECT2 */:
                                            if (!removedObjects) {
                                                removedObjects = Object.create(null);
                                            }
                                            removedObjects[tag.depth] = true;
                                            if (!backwards) {
                                                controlTags.push(tag);
                                            }
                                            break;
                                        case 4 /* CODE_PLACE_OBJECT */:
                                        case 26 /* CODE_PLACE_OBJECT2 */:
                                        case 70 /* CODE_PLACE_OBJECT3 */:
                                            if (!(removedObjects && removedObjects[tag.depth])) {
                                                controlTags.push(tag);
                                            }
                                            break;
                                        default:
                                            controlTags.push(tag);
                                    }
                                }
                            }
                            controlTags.reverse();
                            this._processControlTags(controlTags, backwards);
                        };
                        MovieClip.prototype._sceneForFrameIndex = function (frameIndex) {
                            var scenes = this._scenes;
                            if (frameIndex === 0) {
                                return scenes[0];
                            }
                            for (var i = 0; i < scenes.length; i++) {
                                var scene = scenes[i];
                                if (scene.offset < frameIndex && scene.offset + scene.numFrames >= frameIndex) {
                                    return scene;
                                }
                            }
                            release || assertUnreachable("Must have at least one scene covering all frames.");
                        };
                        MovieClip.prototype._labelForFrame = function (frame) {
                            var scenes = this._scenes;
                            var label = null;
                            for (var i = 0; i < scenes.length; i++) {
                                var scene = scenes[i];
                                if (scene.offset > frame) {
                                    return label;
                                }
                                var labels = scene.labels;
                                for (var j = 0; j < labels.length; j++) {
                                    var currentLabel = labels[j];
                                    if (currentLabel.frame > frame - scene.offset) {
                                        return label;
                                    }
                                    label = currentLabel;
                                }
                            }
                            return label;
                        };
                        MovieClip.prototype.callFrame = function (frame) {
                            frame = frame | 0;
                            var frameScript = this._frameScripts[frame];
                            if (!frameScript) {
                                return;
                            }
                            try {
                                frameScript.call(this);
                            }
                            catch (e) {
                                Telemetry.instance.reportTelemetry({ topic: 'error', error: 2 /* AVM2_ERROR */ });
                                this.stop();
                                throw e;
                            }
                        };
                        MovieClip.prototype.nextFrame = function () {
                            this.gotoAndStop(this._currentFrame + 1);
                        };
                        MovieClip.prototype.prevFrame = function () {
                            this.gotoAndStop(this._currentFrame - 1);
                        };
                        MovieClip.prototype.gotoAndPlay = function (frame, scene) {
                            if (scene === void 0) { scene = null; }
                            if (arguments.length === 0 || arguments.length > 2) {
                                throwError('ArgumentError', AVM2.Errors.WrongArgumentCountError, 'flash.display::MovieClip/gotoAndPlay()', 1, arguments.length);
                            }
                            scene = asCoerceString(scene);
                            frame = asCoerceString(frame) + '';
                            this.play();
                            this._gotoFrame(frame, scene);
                        };
                        MovieClip.prototype.gotoAndStop = function (frame, scene) {
                            if (scene === void 0) { scene = null; }
                            if (arguments.length === 0 || arguments.length > 2) {
                                throwError('ArgumentError', AVM2.Errors.WrongArgumentCountError, 'flash.display::MovieClip/gotoAndPlay()', 1, arguments.length);
                            }
                            scene = asCoerceString(scene);
                            frame = asCoerceString(frame) + '';
                            this.stop();
                            this._gotoFrame(frame, scene);
                        };
                        MovieClip.prototype.addFrameScript = function (frameIndex, script) {
                            if (!this._currentFrame) {
                                return;
                            }
                            var numArgs = arguments.length;
                            if (numArgs & 1) {
                                throwError('ArgumentError', AVM2.Errors.TooFewArgumentsError, numArgs, numArgs + 1);
                            }
                            var frameScripts = this._frameScripts;
                            var totalFrames = this._totalFrames;
                            for (var i = 0; i < numArgs; i += 2) {
                                var frameNum = (arguments[i] | 0) + 1;
                                if (frameNum < 1 || frameNum > totalFrames) {
                                    continue;
                                }
                                frameScripts[frameNum] = arguments[i + 1];
                                if (frameNum === this._currentFrame) {
                                    this._setFlags(8192 /* HasFrameScriptPending */);
                                    this._parent && this._propagateFlagsUp(16384 /* ContainsFrameScriptPendingChildren */);
                                }
                            }
                        };
                        Object.defineProperty(MovieClip.prototype, "_avm1SymbolClass", {
                            get: function () {
                                return (this._symbol && this._symbol.avm1SymbolClass) || null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "_isFullyLoaded", {
                            get: function () {
                                return this.framesLoaded >= this.totalFrames;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MovieClip.prototype._registerStartSounds = function (frameNum, soundStartInfo) {
                            if (this._sounds === null) {
                                this._sounds = new MovieClipSoundsManager(this);
                            }
                            this._sounds.registerStartSounds(frameNum, soundStartInfo);
                        };
                        MovieClip.prototype._initSoundStream = function (streamInfo) {
                            if (this._sounds === null) {
                                this._sounds = new MovieClipSoundsManager(this);
                            }
                            this._sounds.initSoundStream(streamInfo);
                        };
                        MovieClip.prototype._addSoundStreamBlock = function (frameNum, streamBlock) {
                            this._sounds.addSoundStreamBlock(frameNum, streamBlock);
                        };
                        MovieClip.prototype._syncSounds = function (frameNum) {
                            if (this._sounds !== null) {
                                this._sounds.syncSounds(frameNum);
                            }
                        };
                        MovieClip.prototype.addScene = function (name, labels, offset, numFrames) {
                            this._scenes.push(new display.Scene(name, labels, offset, numFrames));
                        };
                        MovieClip.prototype.addFrameLabel = function (name, frame) {
                            var scene = this._sceneForFrameIndex(frame);
                            if (!scene.getLabelByName(name, false)) {
                                scene.labels.push(new flash.display.FrameLabel(name, frame - scene.offset));
                            }
                        };
                        MovieClip.prototype.prevScene = function () {
                            var currentScene = this._sceneForFrameIndex(this._currentFrame);
                            if (currentScene.offset === 0) {
                                return;
                            }
                            this._gotoFrameAbs(this._sceneForFrameIndex(currentScene.offset).offset + 1);
                        };
                        MovieClip.prototype.nextScene = function () {
                            var currentScene = this._sceneForFrameIndex(this._currentFrame);
                            if (currentScene.offset + currentScene.numFrames === this._totalFrames) {
                                return;
                            }
                            this._gotoFrameAbs(currentScene.offset + currentScene.numFrames + 1);
                        };
                        MovieClip.prototype._containsPointImpl = function (globalX, globalY, localX, localY, testingType, objects, skipBoundsCheck) {
                            var result = _super.prototype._containsPointImpl.call(this, globalX, globalY, localX, localY, testingType, objects, true);
                            if (result === 2 /* Shape */ && testingType === 3 /* Mouse */ && '_as2Object' in this && !this.buttonMode && objects[0] === this) {
                                objects.length = 0;
                            }
                            return result;
                        };
                        MovieClip.classInitializer = function () {
                            MovieClip.reset();
                        };
                        MovieClip.initializer = function (symbol) {
                            var self = this;
                            display.DisplayObject._advancableInstances.push(self);
                            self._currentFrame = 0;
                            self._totalFrames = 1;
                            self._trackAsMenu = false;
                            self._scenes = [];
                            self._enabled = true;
                            self._isPlaying = false;
                            self._frames = [];
                            self._frameScripts = [];
                            self._nextFrame = 1;
                            self._stopped = false;
                            self._allowFrameNavigation = true;
                            self._sounds = null;
                            self._buttonFrames = Object.create(null);
                            self._currentButtonState = null;
                            if (symbol) {
                                self._totalFrames = symbol.numFrames;
                                self._currentFrame = 1;
                                if (!symbol.isRoot) {
                                    self.addScene('', symbol.labels, 0, symbol.numFrames);
                                }
                                self._frames = symbol.frames;
                                if (symbol.isAVM1Object) {
                                    if (symbol.frameScripts) {
                                        var avm1MovieClip = Shumway.AVM1.Lib.getAVM1Object(this, symbol.avm1Context);
                                        avm1MovieClip.context = symbol.avm1Context;
                                        var data = symbol.frameScripts;
                                        for (var i = 0; i < data.length; i += 2) {
                                            avm1MovieClip.addFrameScript(data[i], data[i + 1]);
                                        }
                                    }
                                    if (symbol.avm1Name) {
                                        self.name = symbol.avm1Name;
                                    }
                                }
                            }
                            else {
                                self.addScene('', [], 0, self._totalFrames);
                            }
                        };
                        MovieClip.classSymbols = null;
                        MovieClip.instanceSymbols = null;
                        return MovieClip;
                    })(flash.display.Sprite);
                    display.MovieClip = MovieClip;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var MP3DecoderSession = Shumway.SWF.MP3DecoderSession;
                    var MP3_MIME_TYPE = 'audio/mpeg';
                    var HTMLAudioElementAdapter = (function () {
                        function HTMLAudioElementAdapter(element) {
                            this._element = element;
                        }
                        Object.defineProperty(HTMLAudioElementAdapter.prototype, "isReady", {
                            get: function () {
                                return !!this._channel;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(HTMLAudioElementAdapter.prototype, "element", {
                            get: function () {
                                return this._element;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(HTMLAudioElementAdapter.prototype, "currentTime", {
                            get: function () {
                                return this._element.currentTime;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        HTMLAudioElementAdapter.prototype.playFrom = function (time) {
                            var element = this._element;
                            if (element.paused) {
                                element.play();
                                element.addEventListener('playing', function setTime(e) {
                                    element.removeEventListener('playing', setTime);
                                    element.currentTime = time;
                                });
                            }
                            else {
                                element.currentTime = time;
                            }
                        };
                        Object.defineProperty(HTMLAudioElementAdapter.prototype, "paused", {
                            get: function () {
                                return this._element.paused;
                            },
                            set: function (value) {
                                var element = this._element;
                                if (value) {
                                    if (!element.paused) {
                                        element.pause();
                                    }
                                }
                                else {
                                    if (element.paused) {
                                        element.play();
                                    }
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        HTMLAudioElementAdapter.prototype.createChannel = function () {
                            this._channel = flash.media.SoundChannel.initializeFrom({ element: this._element });
                        };
                        HTMLAudioElementAdapter.prototype.queueData = function (frame) {
                            Shumway.Debug.abstractMethod('HTMLAudioElementAdapter::queueData');
                        };
                        HTMLAudioElementAdapter.prototype.finish = function () {
                            Shumway.Debug.abstractMethod('HTMLAudioElementAdapter::finish');
                        };
                        return HTMLAudioElementAdapter;
                    })();
                    var MediaSourceStreamAdapter = (function (_super) {
                        __extends(MediaSourceStreamAdapter, _super);
                        function MediaSourceStreamAdapter(element) {
                            _super.call(this, element);
                            this._mediaSource = new MediaSource();
                            this._sourceBuffer = null;
                            this._updating = false;
                            this._loading = true;
                            this._rawFrames = [];
                            this._isReady = false;
                            this._mediaSource.addEventListener('sourceopen', this._openMediaSource.bind(this));
                            this.element.src = URL.createObjectURL(this._mediaSource);
                        }
                        MediaSourceStreamAdapter.prototype._appendSoundData = function () {
                            if (this._rawFrames.length === 0 || this._updating || !this._sourceBuffer) {
                                return;
                            }
                            if (!this._loading) {
                                this._mediaSource.endOfStream();
                                return;
                            }
                            this._updating = true;
                            this._sourceBuffer.appendBuffer(this._rawFrames.shift());
                            if (!this._isReady) {
                                this._isReady = true;
                                this.createChannel();
                            }
                        };
                        MediaSourceStreamAdapter.prototype._openMediaSource = function () {
                            var sourceBuffer = this._mediaSource.addSourceBuffer(MP3_MIME_TYPE);
                            sourceBuffer.addEventListener('update', function () {
                                this._updating = false;
                                this._appendSoundData();
                            }.bind(this));
                            this._sourceBuffer = sourceBuffer;
                            this._appendSoundData();
                        };
                        MediaSourceStreamAdapter.prototype.queueData = function (frame) {
                            this._rawFrames.push(frame.data);
                            this._appendSoundData();
                        };
                        MediaSourceStreamAdapter.prototype.finish = function () {
                            this._loading = false;
                            this._appendSoundData();
                        };
                        return MediaSourceStreamAdapter;
                    })(HTMLAudioElementAdapter);
                    var BlobStreamAdapter = (function (_super) {
                        __extends(BlobStreamAdapter, _super);
                        function BlobStreamAdapter(element) {
                            _super.call(this, element);
                            this._rawFrames = [];
                        }
                        BlobStreamAdapter.prototype.queueData = function (frame) {
                            this._rawFrames.push(frame.data);
                        };
                        BlobStreamAdapter.prototype.finish = function () {
                            var blob = new Blob(this._rawFrames);
                            this.element.src = URL.createObjectURL(blob);
                            this.createChannel();
                        };
                        return BlobStreamAdapter;
                    })(HTMLAudioElementAdapter);
                    function syncTime(element, movieClip) {
                        var initialized = false;
                        var startMediaTime, startRealTime;
                        element.addEventListener('timeupdate', function (e) {
                            if (!initialized) {
                                startMediaTime = element.currentTime;
                                startRealTime = performance.now();
                                initialized = true;
                                return;
                            }
                            var mediaDelta = element.currentTime - startMediaTime;
                            var realDelta = performance.now() - startRealTime;
                        });
                        element.addEventListener('pause', function (e) {
                            initialized = false;
                        });
                        element.addEventListener('seeking', function (e) {
                            initialized = false;
                        });
                    }
                    var WebAudioAdapter = (function () {
                        function WebAudioAdapter(data) {
                            this._channel = null;
                            this._sound = null;
                            this._data = data;
                            this._position = 0;
                        }
                        Object.defineProperty(WebAudioAdapter.prototype, "currentTime", {
                            get: function () {
                                return NaN;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        WebAudioAdapter.prototype.playFrom = function (time) {
                        };
                        Object.defineProperty(WebAudioAdapter.prototype, "paused", {
                            get: function () {
                                return false;
                            },
                            set: function (value) {
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(WebAudioAdapter.prototype, "isReady", {
                            get: function () {
                                return !!this._channel;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        WebAudioAdapter.prototype.queueData = function (frame) {
                            this._data.pcm.set(frame.pcm, this._position);
                            this._position += frame.pcm.length;
                        };
                        WebAudioAdapter.prototype.finish = function () {
                            var sound = flash.media.Sound.initializeFrom(this._data);
                            var channel = sound.play();
                            this._sound = sound;
                            this._channel = channel;
                        };
                        return WebAudioAdapter;
                    })();
                    var WebAudioMP3Adapter = (function (_super) {
                        __extends(WebAudioMP3Adapter, _super);
                        function WebAudioMP3Adapter(data) {
                            _super.call(this, data);
                            this._decoderPosition = 0;
                            this._decoderSession = new MP3DecoderSession();
                            this._decoderSession.onframedata = function (frameData) {
                                var position = this._decoderPosition;
                                data.pcm.set(frameData, position);
                                this._decoderPosition = position + frameData.length;
                            }.bind(this);
                            this._decoderSession.onclosed = function () {
                                WebAudioAdapter.prototype.finish.call(this);
                            }.bind(this);
                            this._decoderSession.onerror = function (error) {
                                console.warn('MP3DecoderSession error: ' + error);
                            };
                        }
                        WebAudioMP3Adapter.prototype.queueData = function (frame) {
                            this._decoderSession.pushAsync(frame.data);
                        };
                        WebAudioMP3Adapter.prototype.finish = function () {
                            this._decoderSession.close();
                        };
                        return WebAudioMP3Adapter;
                    })(WebAudioAdapter);
                    var MovieClipSoundStream = (function () {
                        function MovieClipSoundStream(streamInfo, movieClip) {
                            this.movieClip = movieClip;
                            this.decode = streamInfo.decode;
                            this.data = {
                                sampleRate: streamInfo.sampleRate,
                                channels: streamInfo.channels
                            };
                            this.seekIndex = [];
                            this.position = 0;
                            this.wasFullyLoaded = false;
                            this.expectedFrame = 0;
                            this.waitFor = 0;
                            var isMP3 = streamInfo.format === 'mp3';
                            if (isMP3 && !AS.webAudioMP3Option.value) {
                                var element = document.createElement('audio');
                                element.preload = 'metadata';
                                element.loop = false;
                                syncTime(element, movieClip);
                                if (element.canPlayType(MP3_MIME_TYPE)) {
                                    this.element = element;
                                    if (!AS.mediaSourceMP3Option.value) {
                                        this.soundStreamAdapter = new BlobStreamAdapter(element);
                                    }
                                    else if (typeof MediaSource !== 'undefined' && MediaSource.isTypeSupported(MP3_MIME_TYPE)) {
                                        this.soundStreamAdapter = new MediaSourceStreamAdapter(element);
                                    }
                                    else {
                                        console.warn('MediaSource is not supported');
                                        this.soundStreamAdapter = new BlobStreamAdapter(element);
                                    }
                                    return;
                                }
                            }
                            var totalSamples = (streamInfo.samplesCount + 1) * this.movieClip.totalFrames * streamInfo.channels;
                            this.data.pcm = new Float32Array(totalSamples);
                            this.soundStreamAdapter = !isMP3 ? new WebAudioAdapter(this.data) : new WebAudioMP3Adapter(this.data);
                        }
                        MovieClipSoundStream.prototype.appendBlock = function (frameNum, streamBlock) {
                            var decodedBlock = this.decode(streamBlock);
                            var streamPosition = this.position;
                            this.seekIndex[frameNum] = streamPosition + decodedBlock.seek * this.data.channels;
                            this.position = streamPosition + decodedBlock.samplesCount * this.data.channels;
                            this.soundStreamAdapter.queueData(decodedBlock);
                        };
                        MovieClipSoundStream.prototype.playFrame = function (frameNum) {
                            if (isNaN(this.seekIndex[frameNum])) {
                                return;
                            }
                            var PAUSE_WHEN_OF_SYNC_GREATER = 1.0;
                            var PLAYBACK_ADJUSTMENT = 0.25;
                            if (!this.wasFullyLoaded && this.movieClip._isFullyLoaded) {
                                this.wasFullyLoaded = true;
                                this.soundStreamAdapter.finish();
                            }
                            if (this.soundStreamAdapter.isReady && !isNaN(this.soundStreamAdapter.currentTime)) {
                                var soundStreamData = this.data;
                                var time = this.seekIndex[frameNum] / soundStreamData.sampleRate / soundStreamData.channels;
                                var elementTime = this.soundStreamAdapter.currentTime;
                                if (this.expectedFrame !== frameNum) {
                                    this.soundStreamAdapter.playFrom(time);
                                }
                                else if (this.waitFor > 0) {
                                    if (this.waitFor <= time) {
                                        this.soundStreamAdapter.paused = false;
                                        this.waitFor = 0;
                                    }
                                }
                                else if (elementTime - time > PAUSE_WHEN_OF_SYNC_GREATER) {
                                    console.warn('Sound is faster than frames by ' + (elementTime - time));
                                    this.waitFor = elementTime - PLAYBACK_ADJUSTMENT;
                                    this.soundStreamAdapter.paused = true;
                                }
                                else if (time - elementTime > PAUSE_WHEN_OF_SYNC_GREATER) {
                                    console.warn('Sound is slower than frames by ' + (time - elementTime));
                                    this.soundStreamAdapter.playFrom(time + PLAYBACK_ADJUSTMENT);
                                }
                                this.expectedFrame = frameNum + 1;
                            }
                        };
                        return MovieClipSoundStream;
                    })();
                    display.MovieClipSoundStream = MovieClipSoundStream;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Stage = (function (_super) {
                        __extends(Stage, _super);
                        function Stage() {
                            false && _super.call(this);
                            display.DisplayObjectContainer.instanceConstructorNoInitialize.call(this);
                            this._root = this;
                            this._stage = this;
                            this._frameRate = 24;
                            this._scaleMode = display.StageScaleMode.SHOW_ALL;
                            this._align = "";
                            this._stageWidth = 0;
                            this._stageHeight = 0;
                            this._showDefaultContextMenu = true;
                            this._focus = null;
                            this._colorCorrection = display.ColorCorrection.DEFAULT;
                            this._colorCorrectionSupport = display.ColorCorrectionSupport.DEFAULT_OFF;
                            this._stageFocusRect = true;
                            this._quality = display.StageQuality.HIGH;
                            this._displayState = null;
                            this._fullScreenSourceRect = null;
                            this._mouseLock = false;
                            this._stageVideos = new AS.GenericVector(0, true, AS.ASObject);
                            this._stage3Ds = null;
                            this._colorARGB = 0xFFFFFFFF;
                            this._fullScreenWidth = 0;
                            this._fullScreenHeight = 0;
                            this._wmodeGPU = false;
                            this._softKeyboardRect = new flash.geom.Rectangle();
                            this._allowsFullScreen = false;
                            this._allowsFullScreenInteractive = false;
                            this._contentsScaleFactor = 1;
                            this._displayContextInfo = null;
                            this._timeout = -1;
                            this._stageContainerWidth = -1;
                            this._stageContainerHeight = -1;
                            this._invalidated = false;
                        }
                        Stage.prototype.setRoot = function (root) {
                            this.addTimelineObjectAtDepth(root, 0);
                        };
                        Object.defineProperty(Stage.prototype, "frameRate", {
                            get: function () {
                                return this._frameRate;
                            },
                            set: function (value) {
                                this._frameRate = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scaleMode", {
                            get: function () {
                                return this._scaleMode;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (flash.display.StageScaleMode.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidEnumError, "scaleMode");
                                }
                                this._scaleMode = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "align", {
                            get: function () {
                                return this._align;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                var n = flash.display.StageAlign.toNumber(value);
                                release || assert(n >= 0);
                                this._align = flash.display.StageAlign.fromNumber(n);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "stageWidth", {
                            get: function () {
                                if (this.scaleMode !== display.StageScaleMode.NO_SCALE) {
                                    return this._stageWidth / 20 | 0;
                                }
                                release || assert(this._stageContainerWidth >= 0);
                                return this._stageContainerWidth;
                            },
                            set: function (value) {
                                value = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.prototype._setInitialName = function () {
                            this._name = null;
                        };
                        Stage.prototype.setStageWidth = function (value) {
                            release || assert((value | 0) === value);
                            this._stageWidth = (value * 20) | 0;
                        };
                        Object.defineProperty(Stage.prototype, "stageHeight", {
                            get: function () {
                                if (this.scaleMode !== display.StageScaleMode.NO_SCALE) {
                                    return this._stageHeight / 20 | 0;
                                }
                                release || assert(this._stageContainerHeight >= 0);
                                return this._stageContainerHeight;
                            },
                            set: function (value) {
                                value = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.prototype.setStageHeight = function (value) {
                            release || assert((value | 0) === value);
                            this._stageHeight = (value * 20) | 0;
                        };
                        Stage.prototype.setStageColor = function (value) {
                            this._colorARGB = value;
                        };
                        Stage.prototype.setStageContainerSize = function (width, height, pixelRatio) {
                            this._contentsScaleFactor = pixelRatio;
                            var sizeHasChanged = this._stageContainerWidth !== width || this._stageContainerHeight !== height;
                            if (sizeHasChanged) {
                                this._stageContainerWidth = width;
                                this._stageContainerHeight = height;
                                if (this.scaleMode === display.StageScaleMode.NO_SCALE) {
                                    this.dispatchEvent(flash.events.Event.getInstance(flash.events.Event.RESIZE));
                                }
                            }
                        };
                        Object.defineProperty(Stage.prototype, "showDefaultContextMenu", {
                            get: function () {
                                return this._showDefaultContextMenu;
                            },
                            set: function (value) {
                                this._showDefaultContextMenu = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "focus", {
                            get: function () {
                                return this._focus;
                            },
                            set: function (newFocus) {
                                this._focus = newFocus;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "colorCorrection", {
                            get: function () {
                                return this._colorCorrection;
                            },
                            set: function (value) {
                                notImplemented("public flash.display.Stage::set colorCorrection");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "colorCorrectionSupport", {
                            get: function () {
                                return this._colorCorrectionSupport;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "stageFocusRect", {
                            get: function () {
                                return this._stageFocusRect;
                            },
                            set: function (on) {
                                this._stageFocusRect = !!on;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "quality", {
                            get: function () {
                                return this._quality.toUpperCase();
                            },
                            set: function (value) {
                                value = (asCoerceString(value) || '').toLowerCase();
                                if (flash.display.StageQuality.toNumber(value) < 0) {
                                    value = flash.display.StageQuality.HIGH;
                                }
                                this._quality = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "displayState", {
                            get: function () {
                                return this._displayState;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (flash.display.StageDisplayState.toNumber(value) < 0) {
                                    value = flash.display.StageDisplayState.NORMAL;
                                }
                                this._displayState = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "fullScreenSourceRect", {
                            get: function () {
                                return this._fullScreenSourceRect;
                            },
                            set: function (value) {
                                notImplemented("public flash.display.Stage::set fullScreenSourceRect");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "mouseLock", {
                            get: function () {
                                return this._mouseLock;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.display.Stage::set mouseLock");
                                this._mouseLock = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "stageVideos", {
                            get: function () {
                                somewhatImplemented("public flash.display.Stage::get stageVideos");
                                return this._stageVideos;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "stage3Ds", {
                            get: function () {
                                notImplemented("public flash.display.Stage::get stage3Ds");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "color", {
                            get: function () {
                                return this._colorARGB;
                            },
                            set: function (rgb) {
                                this._colorARGB = rgb | 0xff000000;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "alpha", {
                            get: function () {
                                return this._colorTransform.alphaMultiplier;
                            },
                            set: function (alpha) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "fullScreenWidth", {
                            get: function () {
                                return this._fullScreenWidth;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "fullScreenHeight", {
                            get: function () {
                                return this._fullScreenHeight;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "wmodeGPU", {
                            get: function () {
                                return this._wmodeGPU;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "softKeyboardRect", {
                            get: function () {
                                return this._softKeyboardRect;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "allowsFullScreen", {
                            get: function () {
                                return this._allowsFullScreen;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "allowsFullScreenInteractive", {
                            get: function () {
                                return this._allowsFullScreenInteractive;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "contentsScaleFactor", {
                            get: function () {
                                return this._contentsScaleFactor;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "displayContextInfo", {
                            get: function () {
                                return this._displayContextInfo;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.prototype.removeChildAt = function (index) {
                            this.requireOwnerPermissions();
                            return _super.prototype.removeChildAt.call(this, index);
                        };
                        Stage.prototype.swapChildrenAt = function (index1, index2) {
                            this.requireOwnerPermissions();
                            _super.prototype.swapChildrenAt.call(this, index1, index2);
                        };
                        Object.defineProperty(Stage.prototype, "width", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getWidth();
                            },
                            set: function (value) {
                                this.requireOwnerPermissions();
                                this._setWidth(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "height", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getHeight();
                            },
                            set: function (value) {
                                this.requireOwnerPermissions();
                                this._setHeight(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "mouseChildren", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getMouseChildren();
                            },
                            set: function (value) {
                                this.requireOwnerPermissions();
                                this._setMouseChildren(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "numChildren", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getNumChildren();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "tabChildren", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getTabChildren();
                            },
                            set: function (value) {
                                this.requireOwnerPermissions();
                                this._setTabChildren(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.prototype.addChild = function (child) {
                            this.requireOwnerPermissions();
                            return _super.prototype.addChild.call(this, child);
                        };
                        Stage.prototype.addChildAt = function (child, index) {
                            this.requireOwnerPermissions();
                            return _super.prototype.addChildAt.call(this, child, index);
                        };
                        Stage.prototype.setChildIndex = function (child, index) {
                            this.requireOwnerPermissions();
                            _super.prototype.setChildIndex.call(this, child, index);
                        };
                        Stage.prototype.addEventListener = function (type, listener, useCapture, priority, useWeakReference) {
                            this.requireOwnerPermissions();
                            _super.prototype.addEventListener.call(this, type, listener, useCapture, priority, useWeakReference);
                        };
                        Stage.prototype.hasEventListener = function (type) {
                            this.requireOwnerPermissions();
                            return _super.prototype.hasEventListener.call(this, type);
                        };
                        Stage.prototype.willTrigger = function (type) {
                            this.requireOwnerPermissions();
                            return _super.prototype.willTrigger.call(this, type);
                        };
                        Stage.prototype.dispatchEvent = function (event) {
                            this.requireOwnerPermissions();
                            return _super.prototype.dispatchEvent.call(this, event);
                        };
                        Stage.prototype.invalidate = function () {
                            this._invalidated = true;
                        };
                        Stage.prototype.isFocusInaccessible = function () {
                            notImplemented("public flash.display.Stage::isFocusInaccessible");
                            return;
                        };
                        Stage.prototype.requireOwnerPermissions = function () {
                        };
                        Stage.prototype.render = function () {
                            if (!this._invalidated) {
                                return;
                            }
                            display.DisplayObject._broadcastFrameEvent(flash.events.Event.RENDER);
                            this._invalidated = false;
                        };
                        Object.defineProperty(Stage.prototype, "name", {
                            get: function () {
                                return this._name;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "mask", {
                            get: function () {
                                return this._mask;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "visible", {
                            get: function () {
                                return this._hasFlags(1 /* Visible */);
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "x", {
                            get: function () {
                                return this._getX();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "y", {
                            get: function () {
                                return this._getY();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "z", {
                            get: function () {
                                return this._z;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scaleX", {
                            get: function () {
                                return Math.abs(this._scaleX);
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scaleY", {
                            get: function () {
                                return this._scaleY;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scaleZ", {
                            get: function () {
                                return this._scaleZ;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "rotation", {
                            get: function () {
                                return this._rotation;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "rotationX", {
                            get: function () {
                                return this._rotationX;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "rotationY", {
                            get: function () {
                                return this._rotationX;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "rotationZ", {
                            get: function () {
                                return this._rotationX;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "cacheAsBitmap", {
                            get: function () {
                                return this._getCacheAsBitmap();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "opaqueBackground", {
                            get: function () {
                                return this._opaqueBackground;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scrollRect", {
                            get: function () {
                                return this._getScrollRect();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "filters", {
                            get: function () {
                                return this._getFilters();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "blendMode", {
                            get: function () {
                                return this._blendMode;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "transform", {
                            get: function () {
                                return this._getTransform();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "accessibilityProperties", {
                            get: function () {
                                return this._accessibilityProperties;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scale9Grid", {
                            get: function () {
                                return this._getScale9Grid();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "tabEnabled", {
                            get: function () {
                                return this._tabEnabled;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "tabIndex", {
                            get: function () {
                                return this._tabIndex;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "focusRect", {
                            get: function () {
                                return this._focusRect;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "mouseEnabled", {
                            get: function () {
                                return this._mouseEnabled;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "accessibilityImplementation", {
                            get: function () {
                                return this._accessibilityImplementation;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "textSnapshot", {
                            get: function () {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "contextMenu", {
                            get: function () {
                                return this._contextMenu;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.classInitializer = null;
                        Stage.classSymbols = null;
                        Stage.instanceSymbols = null;
                        Stage.initializer = null;
                        return Stage;
                    })(flash.display.DisplayObjectContainer);
                    display.Stage = Stage;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ActionScriptVersion = (function (_super) {
                        __extends(ActionScriptVersion, _super);
                        function ActionScriptVersion() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.ActionScriptVersion");
                        }
                        ActionScriptVersion.classInitializer = null;
                        ActionScriptVersion.initializer = null;
                        ActionScriptVersion.classSymbols = null;
                        ActionScriptVersion.instanceSymbols = null;
                        ActionScriptVersion.ACTIONSCRIPT2 = 2;
                        ActionScriptVersion.ACTIONSCRIPT3 = 3;
                        return ActionScriptVersion;
                    })(AS.ASNative);
                    display.ActionScriptVersion = ActionScriptVersion;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var BlendMode = (function (_super) {
                        __extends(BlendMode, _super);
                        function BlendMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.BlendMode");
                        }
                        BlendMode.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                case 1:
                                    return BlendMode.NORMAL;
                                case 2:
                                    return BlendMode.LAYER;
                                case 3:
                                    return BlendMode.MULTIPLY;
                                case 4:
                                    return BlendMode.SCREEN;
                                case 5:
                                    return BlendMode.LIGHTEN;
                                case 6:
                                    return BlendMode.DARKEN;
                                case 7:
                                    return BlendMode.DIFFERENCE;
                                case 8:
                                    return BlendMode.ADD;
                                case 9:
                                    return BlendMode.SUBTRACT;
                                case 10:
                                    return BlendMode.INVERT;
                                case 11:
                                    return BlendMode.ALPHA;
                                case 12:
                                    return BlendMode.ERASE;
                                case 13:
                                    return BlendMode.OVERLAY;
                                case 14:
                                    return BlendMode.HARDLIGHT;
                                default:
                                    return null;
                            }
                        };
                        BlendMode.toNumber = function (value) {
                            switch (value) {
                                case BlendMode.NORMAL:
                                    return 1;
                                case BlendMode.LAYER:
                                    return 2;
                                case BlendMode.MULTIPLY:
                                    return 3;
                                case BlendMode.SCREEN:
                                    return 4;
                                case BlendMode.LIGHTEN:
                                    return 5;
                                case BlendMode.DARKEN:
                                    return 6;
                                case BlendMode.DIFFERENCE:
                                    return 7;
                                case BlendMode.ADD:
                                    return 8;
                                case BlendMode.SUBTRACT:
                                    return 9;
                                case BlendMode.INVERT:
                                    return 10;
                                case BlendMode.ALPHA:
                                    return 11;
                                case BlendMode.ERASE:
                                    return 12;
                                case BlendMode.OVERLAY:
                                    return 13;
                                case BlendMode.HARDLIGHT:
                                    return 14;
                                default:
                                    return -1;
                            }
                        };
                        BlendMode.classInitializer = null;
                        BlendMode.initializer = null;
                        BlendMode.classSymbols = null;
                        BlendMode.instanceSymbols = null;
                        BlendMode.NORMAL = "normal";
                        BlendMode.LAYER = "layer";
                        BlendMode.MULTIPLY = "multiply";
                        BlendMode.SCREEN = "screen";
                        BlendMode.LIGHTEN = "lighten";
                        BlendMode.DARKEN = "darken";
                        BlendMode.ADD = "add";
                        BlendMode.SUBTRACT = "subtract";
                        BlendMode.DIFFERENCE = "difference";
                        BlendMode.INVERT = "invert";
                        BlendMode.OVERLAY = "overlay";
                        BlendMode.HARDLIGHT = "hardlight";
                        BlendMode.ALPHA = "alpha";
                        BlendMode.ERASE = "erase";
                        BlendMode.SHADER = "shader";
                        return BlendMode;
                    })(AS.ASNative);
                    display.BlendMode = BlendMode;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ColorCorrection = (function (_super) {
                        __extends(ColorCorrection, _super);
                        function ColorCorrection() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.ColorCorrection");
                        }
                        ColorCorrection.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return ColorCorrection.DEFAULT;
                                case 1:
                                    return ColorCorrection.ON;
                                case 2:
                                    return ColorCorrection.OFF;
                                default:
                                    return null;
                            }
                        };
                        ColorCorrection.toNumber = function (value) {
                            switch (value) {
                                case ColorCorrection.DEFAULT:
                                    return 0;
                                case ColorCorrection.ON:
                                    return 1;
                                case ColorCorrection.OFF:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        ColorCorrection.classInitializer = null;
                        ColorCorrection.initializer = null;
                        ColorCorrection.classSymbols = null;
                        ColorCorrection.instanceSymbols = null;
                        ColorCorrection.DEFAULT = "default";
                        ColorCorrection.ON = "on";
                        ColorCorrection.OFF = "off";
                        return ColorCorrection;
                    })(AS.ASNative);
                    display.ColorCorrection = ColorCorrection;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ColorCorrectionSupport = (function (_super) {
                        __extends(ColorCorrectionSupport, _super);
                        function ColorCorrectionSupport() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.ColorCorrectionSupport");
                        }
                        ColorCorrectionSupport.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return ColorCorrectionSupport.UNSUPPORTED;
                                case 1:
                                    return ColorCorrectionSupport.DEFAULT_ON;
                                case 2:
                                    return ColorCorrectionSupport.DEFAULT_OFF;
                                default:
                                    return null;
                            }
                        };
                        ColorCorrectionSupport.toNumber = function (value) {
                            switch (value) {
                                case ColorCorrectionSupport.UNSUPPORTED:
                                    return 0;
                                case ColorCorrectionSupport.DEFAULT_ON:
                                    return 1;
                                case ColorCorrectionSupport.DEFAULT_OFF:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        ColorCorrectionSupport.classInitializer = null;
                        ColorCorrectionSupport.initializer = null;
                        ColorCorrectionSupport.classSymbols = null;
                        ColorCorrectionSupport.instanceSymbols = null;
                        ColorCorrectionSupport.UNSUPPORTED = "unsupported";
                        ColorCorrectionSupport.DEFAULT_ON = "defaultOn";
                        ColorCorrectionSupport.DEFAULT_OFF = "defaultOff";
                        return ColorCorrectionSupport;
                    })(AS.ASNative);
                    display.ColorCorrectionSupport = ColorCorrectionSupport;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var FocusDirection = (function (_super) {
                        __extends(FocusDirection, _super);
                        function FocusDirection() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.FocusDirection");
                        }
                        FocusDirection.classInitializer = null;
                        FocusDirection.initializer = null;
                        FocusDirection.classSymbols = null;
                        FocusDirection.instanceSymbols = null;
                        FocusDirection.TOP = "top";
                        FocusDirection.BOTTOM = "bottom";
                        FocusDirection.NONE = "none";
                        return FocusDirection;
                    })(AS.ASNative);
                    display.FocusDirection = FocusDirection;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FrameLabel = (function (_super) {
                        __extends(FrameLabel, _super);
                        function FrameLabel(name, frame) {
                            false && _super.call(this, undefined);
                            this._name = asCoerceString(name);
                            this._frame = frame | 0;
                        }
                        Object.defineProperty(FrameLabel.prototype, "name", {
                            get: function () {
                                return this._name;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(FrameLabel.prototype, "frame", {
                            get: function () {
                                return this._frame;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        FrameLabel.prototype.clone = function () {
                            return new FrameLabel(this._name, this._frame);
                        };
                        FrameLabel.classInitializer = null;
                        FrameLabel.initializer = null;
                        FrameLabel.classSymbols = null;
                        FrameLabel.instanceSymbols = null;
                        return FrameLabel;
                    })(flash.events.EventDispatcher);
                    display.FrameLabel = FrameLabel;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (_AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var AVM2 = Shumway.AVM2.Runtime.AVM2;
                    var swap32 = Shumway.IntegerUtilities.swap32;
                    var premultiplyARGB = Shumway.ColorUtilities.premultiplyARGB;
                    var unpremultiplyARGB = Shumway.ColorUtilities.unpremultiplyARGB;
                    var RGBAToARGB = Shumway.ColorUtilities.RGBAToARGB;
                    var indexOf = Shumway.ArrayUtilities.indexOf;
                    var Rectangle = flash.geom.Rectangle;
                    var BitmapData = (function (_super) {
                        __extends(BitmapData, _super);
                        function BitmapData(width, height, transparent, fillColorARGB) {
                            if (transparent === void 0) { transparent = true; }
                            if (fillColorARGB === void 0) { fillColorARGB = 4294967295; }
                            width = width | 0;
                            height = height | 0;
                            transparent = !!transparent;
                            fillColorARGB = fillColorARGB | 0;
                            false && _super.call(this);
                            var symbol = this._symbol;
                            if (symbol) {
                                width = symbol.width | 0;
                                height = symbol.height | 0;
                            }
                            if (width > BitmapData.MAXIMUM_WIDTH || width <= 0 || height > BitmapData.MAXIMUM_HEIGHT || height <= 0 || width * height > BitmapData.MAXIMUM_DIMENSION) {
                                throwError('ArgumentError', _AVM2.Errors.InvalidBitmapData);
                            }
                            this._rect = new Rectangle(0, 0, width, height);
                            this._transparent = transparent;
                            if (symbol) {
                                release || assert(symbol.syncId);
                                this._id = symbol.syncId;
                                if (symbol.type === 1 /* PremultipliedAlphaARGB */ || symbol.type === 2 /* StraightAlphaARGB */ || symbol.type === 3 /* StraightAlphaRGBA */) {
                                    release || assert(symbol.data);
                                    this._setData(symbol.data, symbol.type);
                                }
                                else {
                                    this._isDirty = false;
                                    this._isRemoteDirty = true;
                                }
                                this._solidFillColorPBGRA = null;
                            }
                            else {
                                this._id = flash.display.DisplayObject.getNextSyncID();
                                this._setData(new Uint8Array(width * height * 4), 1 /* PremultipliedAlphaARGB */);
                                var alpha = fillColorARGB >> 24;
                                if (alpha === 0 && transparent) {
                                    this._solidFillColorPBGRA = 0;
                                }
                                else {
                                    this.fillRect(this._rect, fillColorARGB);
                                }
                            }
                            this._bitmapReferrers = [];
                            release || assert(this._isDirty === !!this._data);
                            release || assert(this._isRemoteDirty === !this._data);
                        }
                        BitmapData.prototype._setData = function (data, type) {
                            if (data instanceof Uint8ClampedArray) {
                                data = new Uint8Array(data.buffer);
                            }
                            release || assert(data instanceof Uint8Array);
                            this._data = data;
                            this._type = type;
                            this._view = new Int32Array(data.buffer);
                            this._dataBuffer = DataBuffer.FromArrayBuffer(data.buffer);
                            this._isDirty = true;
                            this._isRemoteDirty = false;
                        };
                        BitmapData.prototype._addBitmapReferrer = function (bitmap) {
                            var index = indexOf(this._bitmapReferrers, bitmap);
                            release || assert(index < 0);
                            this._bitmapReferrers.push(bitmap);
                        };
                        BitmapData.prototype._removeBitmapReferrer = function (bitmap) {
                            var index = indexOf(this._bitmapReferrers, bitmap);
                            release || assert(index >= 0);
                            this._bitmapReferrers[index] = null;
                        };
                        BitmapData.prototype._invalidate = function () {
                            if (this._isDirty) {
                                return;
                            }
                            this._isDirty = true;
                            this._isRemoteDirty = false;
                            for (var i = 0; i < this._bitmapReferrers.length; i++) {
                                var bitmap = this._bitmapReferrers[i];
                                if (bitmap) {
                                    bitmap._setDirtyFlags(16777216 /* DirtyBitmapData */);
                                }
                            }
                        };
                        BitmapData.prototype._getTemporaryRectangleFrom = function (rect, index) {
                            if (index === void 0) { index = 0; }
                            release || assert(index >= 0 && index < BitmapData._temporaryRectangles.length);
                            var r = BitmapData._temporaryRectangles[index];
                            if (rect) {
                                r.copyFrom(rect);
                            }
                            return r;
                        };
                        BitmapData.prototype.getDataBuffer = function () {
                            return this._dataBuffer;
                        };
                        BitmapData.prototype._getContentBounds = function () {
                            return Shumway.Bounds.FromRectangle(this._rect);
                        };
                        BitmapData.prototype._getPixelData = function (rect) {
                            var r = this._getTemporaryRectangleFrom(this._rect).intersectInPlace(rect);
                            if (r.isEmpty()) {
                                return;
                            }
                            var xMin = r.x;
                            var xMax = r.x + r.width;
                            var yMin = r.y;
                            var yMax = r.y + r.height;
                            var view = this._view;
                            var width = this._rect.width;
                            var output = new Int32Array(r.area);
                            var p = 0;
                            for (var y = yMin; y < yMax; y++) {
                                var offset = y * width;
                                for (var x = xMin; x < xMax; x++) {
                                    var colorBGRA = view[offset + x];
                                    var alpha = colorBGRA & 0xff;
                                    var colorBGR = colorBGRA >>> 8;
                                    colorBGRA = ((255 * colorBGR) / alpha) << 8 | alpha;
                                    output[p++] = colorBGRA;
                                }
                            }
                            return output;
                        };
                        BitmapData.prototype._putPixelData = function (rect, input) {
                            var r = this._getTemporaryRectangleFrom(this._rect).intersectInPlace(rect);
                            if (r.isEmpty()) {
                                return;
                            }
                            var xMin = r.x;
                            var xMax = r.x + r.width;
                            var yMin = r.y;
                            var yMax = r.y + r.height;
                            var view = this._view;
                            var width = this._rect.width;
                            var p = (rect.width * rect.height - r.height) + (xMin - rect.x);
                            var padding = rect.width - r.width;
                            var alphaMask = this._transparent ? 0x00 : 0xff;
                            for (var y = yMin; y < yMax; y++) {
                                var offset = y * width;
                                for (var x = xMin; x < xMax; x++) {
                                    var colorBGRA = input[p++];
                                    var alpha = colorBGRA & alphaMask;
                                    var colorBGR = colorBGRA >>> 8;
                                    view[offset + x] = (((colorBGR * alpha + 254) / 255) & 0x00ffffff) << 8 | alpha;
                                }
                                p += padding;
                            }
                            this._invalidate();
                        };
                        Object.defineProperty(BitmapData.prototype, "width", {
                            get: function () {
                                return this._rect.width;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BitmapData.prototype, "height", {
                            get: function () {
                                return this._rect.height;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BitmapData.prototype, "rect", {
                            get: function () {
                                return this._rect.clone();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BitmapData.prototype, "transparent", {
                            get: function () {
                                return this._transparent;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        BitmapData.prototype.clone = function () {
                            somewhatImplemented("public flash.display.BitmapData::clone");
                            var bd = new BitmapData(this._rect.width, this._rect.height, this._transparent, this._solidFillColorPBGRA);
                            bd._view.set(this._view);
                            return bd;
                        };
                        BitmapData.prototype.getPixel = function (x, y) {
                            x = x | 0;
                            y = y | 0;
                            return this.getPixel32(x, y) & 0x00ffffff;
                        };
                        BitmapData.prototype.getPixel32 = function (x, y) {
                            x = x | 0;
                            y = y | 0;
                            if (!this._rect.contains(x, y)) {
                                return 0;
                            }
                            this._ensureBitmapData();
                            var value = this._view[y * this._rect.width + x];
                            switch (this._type) {
                                case 1 /* PremultipliedAlphaARGB */:
                                    var pARGB = swap32(value);
                                    var uARGB = unpremultiplyARGB(pARGB);
                                    return uARGB >>> 0;
                                case 3 /* StraightAlphaRGBA */:
                                    return RGBAToARGB(swap32(value));
                                default:
                                    Shumway.Debug.notImplemented(Shumway.ImageType[this._type]);
                                    return 0;
                            }
                        };
                        BitmapData.prototype.setPixel = function (x, y, uARGB) {
                            x = x | 0;
                            y = y | 0;
                            uARGB = uARGB | 0;
                            if (!this._rect.contains(x, y)) {
                                return;
                            }
                            this._ensureBitmapData();
                            var i = y * this._rect.width + x;
                            var a = this._view[i] & 0xff;
                            uARGB = uARGB & 0x00ffffff | a << 24;
                            var pARGB = premultiplyARGB(uARGB);
                            this._view[i] = swap32(pARGB);
                            this._invalidate();
                            this._solidFillColorPBGRA = null;
                        };
                        BitmapData.prototype.setPixel32 = function (x, y, uARGB) {
                            x = x | 0;
                            y = y | 0;
                            if (!this._rect.contains(x, y)) {
                                return;
                            }
                            this._ensureBitmapData();
                            var a = uARGB >>> 24;
                            var uRGB = uARGB & 0x00ffffff;
                            if (this._transparent) {
                                var uARGB = uRGB | a << 24;
                                var pARGB = premultiplyARGB(uARGB);
                            }
                            else {
                                var pARGB = uRGB | 0xff000000;
                            }
                            this._view[y * this._rect.width + x] = swap32(pARGB);
                            this._invalidate();
                            this._solidFillColorPBGRA = null;
                        };
                        BitmapData.prototype.applyFilter = function (sourceBitmapData, sourceRect, destPoint, filter) {
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            filter = filter;
                            somewhatImplemented("public flash.display.BitmapData::applyFilter " + filter);
                            return;
                        };
                        BitmapData.prototype.colorTransform = function (rect, colorTransform) {
                            rect = rect;
                            colorTransform = colorTransform;
                            somewhatImplemented("public flash.display.BitmapData::colorTransform");
                            return;
                        };
                        BitmapData.prototype.compare = function (otherBitmapData) {
                            otherBitmapData = otherBitmapData;
                            notImplemented("public flash.display.BitmapData::compare");
                            return;
                        };
                        BitmapData.prototype.copyChannel = function (sourceBitmapData, sourceRect, destPoint, sourceChannel, destChannel) {
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            sourceChannel = sourceChannel >>> 0;
                            destChannel = destChannel >>> 0;
                            notImplemented("public flash.display.BitmapData::copyChannel");
                            return;
                        };
                        BitmapData.prototype.copyPixels = function (sourceBitmapData, sourceRect, destPoint, alphaBitmapData, alphaPoint, mergeAlpha) {
                            if (alphaBitmapData === void 0) { alphaBitmapData = null; }
                            if (alphaPoint === void 0) { alphaPoint = null; }
                            if (mergeAlpha === void 0) { mergeAlpha = false; }
                            mergeAlpha = !!mergeAlpha;
                            if (alphaBitmapData || alphaPoint) {
                                notImplemented("public flash.display.BitmapData::copyPixels - Alpha");
                                return;
                            }
                            var sRect = this._getTemporaryRectangleFrom(sourceRect, 0).roundInPlace();
                            var tBRect = this._rect;
                            var sBRect = sourceBitmapData._rect;
                            var sL = Math.max(sRect.x, 0);
                            var sT = Math.max(sRect.y, 0);
                            var sR = Math.min(sRect.x + sRect.width, sBRect.width);
                            var sB = Math.min(sRect.y + sRect.height, sBRect.height);
                            var oX = sL - sRect.x;
                            var oY = sT - sRect.y;
                            var tL = destPoint.x | 0 + oX;
                            var tT = destPoint.y | 0 + oY;
                            if (tL < 0) {
                                sL -= tL;
                                tL = 0;
                            }
                            if (tT < 0) {
                                sT -= tT;
                                tT = 0;
                            }
                            var tW = Math.min(sR - sL, tBRect.width - tL);
                            var tH = Math.min(sB - sT, tBRect.height - tT);
                            if (tW <= 0 || tH <= 0) {
                                return;
                            }
                            var sX = sL;
                            var sY = sT;
                            var tX = tL;
                            var tY = tT;
                            var sStride = sourceBitmapData._rect.width;
                            var tStride = this._rect.width;
                            this._ensureBitmapData();
                            sourceBitmapData._ensureBitmapData();
                            var s = sourceBitmapData._view;
                            var t = this._view;
                            if (sourceBitmapData._type !== this._type) {
                                somewhatImplemented("public flash.display.BitmapData::copyPixels - Color Format Conversion");
                            }
                            if (mergeAlpha && this._type !== 1 /* PremultipliedAlphaARGB */) {
                                notImplemented("public flash.display.BitmapData::copyPixels - Merge Alpha");
                                return;
                            }
                            if (this._solidFillColorPBGRA !== null && this._solidFillColorPBGRA === sourceBitmapData._solidFillColorPBGRA) {
                                return;
                            }
                            if (sourceBitmapData._solidFillColorPBGRA !== null && (sourceBitmapData._solidFillColorPBGRA & 0xFF) === 0xFF) {
                                mergeAlpha = false;
                            }
                            if (mergeAlpha) {
                                this._copyPixelsAndMergeAlpha(s, sX, sY, sStride, t, tX, tY, tStride, tW, tH);
                            }
                            else {
                                var sP = (sY * sStride + sX) | 0;
                                var tP = (tY * tStride + tX) | 0;
                                if ((tW & 3) === 0) {
                                    for (var y = 0; y < tH; y = y + 1 | 0) {
                                        for (var x = 0; x < tW; x = x + 4 | 0) {
                                            t[(tP + x + 0) | 0] = s[(sP + x + 0) | 0];
                                            t[(tP + x + 1) | 0] = s[(sP + x + 1) | 0];
                                            t[(tP + x + 2) | 0] = s[(sP + x + 2) | 0];
                                            t[(tP + x + 3) | 0] = s[(sP + x + 3) | 0];
                                        }
                                        sP = sP + sStride | 0;
                                        tP = tP + tStride | 0;
                                    }
                                }
                                else {
                                    for (var y = 0; y < tH; y = y + 1 | 0) {
                                        for (var x = 0; x < tW; x = x + 1 | 0) {
                                            t[tP + x | 0] = s[sP + x | 0];
                                        }
                                        sP = sP + sStride | 0;
                                        tP = tP + tStride | 0;
                                    }
                                }
                            }
                            this._solidFillColorPBGRA = null;
                            this._invalidate();
                        };
                        BitmapData.prototype._copyPixelsAndMergeAlpha = function (s, sX, sY, sStride, t, tX, tY, tStride, tW, tH) {
                            var sP = (sY * sStride + sX) | 0;
                            var tP = (tY * tStride + tX) | 0;
                            for (var y = 0; y < tH; y = y + 1 | 0) {
                                for (var x = 0; x < tW; x = x + 1 | 0) {
                                    var spBGRA = s[sP + x | 0];
                                    var sA = spBGRA & 0xff;
                                    if (sA === 0xff) {
                                        t[tP + x | 0] = spBGRA;
                                    }
                                    else if (sA === 0) {
                                    }
                                    else {
                                        var sGA = spBGRA & 0x00ff00ff;
                                        var sBR = spBGRA >> 8 & 0x00ff00ff;
                                        var tpBGRA = t[tP + x | 0];
                                        var tGA = tpBGRA & 0x00ff00ff;
                                        var tBR = tpBGRA >> 8 & 0x00ff00ff;
                                        var A = 256 - sA;
                                        tGA = Math.imul(tGA, A) >> 8;
                                        tBR = Math.imul(tBR, A) >> 8;
                                        t[tP + x | 0] = ((sBR + tBR & 0x00ff00ff) << 8) | (sGA + tGA & 0x00ff00ff);
                                    }
                                }
                                sP = sP + sStride | 0;
                                tP = tP + tStride | 0;
                            }
                        };
                        BitmapData.prototype.dispose = function () {
                            this._rect.setEmpty();
                            this._view = null;
                            this._invalidate();
                        };
                        BitmapData.prototype.draw = function (source, matrix, colorTransform, blendMode, clipRect, smoothing) {
                            if (matrix === void 0) { matrix = null; }
                            if (colorTransform === void 0) { colorTransform = null; }
                            if (blendMode === void 0) { blendMode = null; }
                            if (clipRect === void 0) { clipRect = null; }
                            if (smoothing === void 0) { smoothing = false; }
                            somewhatImplemented("public flash.display.BitmapData::draw");
                            var serializer = AVM2.instance.globals['Shumway.Player.Utils'];
                            if (matrix) {
                                matrix = matrix.clone().toTwipsInPlace();
                            }
                            serializer.drawToBitmap(this, source, matrix, colorTransform, blendMode, clipRect, smoothing);
                            this._isRemoteDirty = true;
                        };
                        BitmapData.prototype.drawWithQuality = function (source, matrix, colorTransform, blendMode, clipRect, smoothing, quality) {
                            if (matrix === void 0) { matrix = null; }
                            if (colorTransform === void 0) { colorTransform = null; }
                            if (blendMode === void 0) { blendMode = null; }
                            if (clipRect === void 0) { clipRect = null; }
                            if (smoothing === void 0) { smoothing = false; }
                            if (quality === void 0) { quality = null; }
                            source = source;
                            matrix = matrix;
                            colorTransform = colorTransform;
                            blendMode = asCoerceString(blendMode);
                            clipRect = clipRect;
                            smoothing = !!smoothing;
                            quality = asCoerceString(quality);
                            notImplemented("public flash.display.BitmapData::drawWithQuality");
                            return;
                        };
                        BitmapData.prototype.fillRect = function (rect, uARGB) {
                            this._ensureBitmapData();
                            release || assert(this._type === 1 /* PremultipliedAlphaARGB */);
                            if (this._transparent) {
                                var pARGB = premultiplyARGB(uARGB);
                            }
                            else {
                                var pARGB = uARGB | 0xff000000;
                            }
                            var pBGRA = swap32(pARGB);
                            var r = this._getTemporaryRectangleFrom(this._rect).intersectInPlace(rect);
                            if (r.isEmpty()) {
                                return;
                            }
                            if (this._solidFillColorPBGRA === pBGRA) {
                                return;
                            }
                            var view = this._view;
                            if (r.equals(this._rect)) {
                                var length = view.length | 0;
                                if ((length & 0x3) === 0) {
                                    for (var i = 0; i < length; i += 4) {
                                        view[i] = pBGRA;
                                        view[i + 1] = pBGRA;
                                        view[i + 2] = pBGRA;
                                        view[i + 3] = pBGRA;
                                    }
                                }
                                else {
                                    for (var i = 0; i < length; i++) {
                                        view[i] = pBGRA;
                                    }
                                }
                                this._solidFillColorPBGRA = pBGRA;
                            }
                            else {
                                var xMin = r.x | 0;
                                var xMax = r.x + r.width | 0;
                                var yMin = r.y | 0;
                                var yMax = r.y + r.height | 0;
                                var width = this._rect.width | 0;
                                for (var y = yMin; y < yMax; y++) {
                                    var offset = y * width | 0;
                                    for (var x = xMin; x < xMax; x++) {
                                        view[offset + x] = pBGRA;
                                    }
                                }
                                this._solidFillColorPBGRA = null;
                            }
                            this._invalidate();
                        };
                        BitmapData.prototype.floodFill = function (x, y, color) {
                            x = x | 0;
                            y = y | 0;
                            color = color >>> 0;
                            notImplemented("public flash.display.BitmapData::floodFill");
                            return;
                        };
                        BitmapData.prototype.generateFilterRect = function (sourceRect, filter) {
                            sourceRect = sourceRect;
                            filter = filter;
                            notImplemented("public flash.display.BitmapData::generateFilterRect");
                            return;
                        };
                        BitmapData.prototype.getColorBoundsRect = function (mask, color, findColor) {
                            if (findColor === void 0) { findColor = true; }
                            mask = mask >>> 0;
                            color = color >>> 0;
                            findColor = !!findColor;
                            notImplemented("public flash.display.BitmapData::getColorBoundsRect");
                            return;
                        };
                        BitmapData.prototype.getPixels = function (rect) {
                            var outputByteArray = new flash.utils.ByteArray();
                            this.copyPixelsToByteArray(rect, outputByteArray);
                            return outputByteArray;
                        };
                        BitmapData.prototype.copyPixelsToByteArray = function (rect, data) {
                            var pixelData = this._getPixelData(rect);
                            if (!pixelData) {
                                return;
                            }
                            data.writeRawBytes(new Uint8Array(pixelData));
                        };
                        BitmapData.prototype.getVector = function (rect) {
                            var outputVector = new AS.Uint32Vector(pixelData.length);
                            var pixelData = this._getPixelData(rect);
                            if (!pixelData) {
                                return outputVector;
                            }
                            outputVector.length = pixelData.length;
                            outputVector._view().set(pixelData);
                            return outputVector;
                        };
                        BitmapData.prototype.hitTest = function (firstPoint, firstAlphaThreshold, secondObject, secondBitmapDataPoint, secondAlphaThreshold) {
                            if (secondBitmapDataPoint === void 0) { secondBitmapDataPoint = null; }
                            if (secondAlphaThreshold === void 0) { secondAlphaThreshold = 1; }
                            firstPoint = firstPoint;
                            firstAlphaThreshold = firstAlphaThreshold >>> 0;
                            secondObject = secondObject;
                            secondBitmapDataPoint = secondBitmapDataPoint;
                            secondAlphaThreshold = secondAlphaThreshold >>> 0;
                            notImplemented("public flash.display.BitmapData::hitTest");
                            return;
                        };
                        BitmapData.prototype.merge = function (sourceBitmapData, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            redMultiplier = redMultiplier >>> 0;
                            greenMultiplier = greenMultiplier >>> 0;
                            blueMultiplier = blueMultiplier >>> 0;
                            alphaMultiplier = alphaMultiplier >>> 0;
                            somewhatImplemented("public flash.display.BitmapData::merge");
                        };
                        BitmapData.prototype.noise = function (randomSeed, low, high, channelOptions, grayScale) {
                            if (low === void 0) { low = 0; }
                            if (high === void 0) { high = 255; }
                            if (channelOptions === void 0) { channelOptions = 7; }
                            if (grayScale === void 0) { grayScale = false; }
                            randomSeed = randomSeed | 0;
                            low = low >>> 0;
                            high = high >>> 0;
                            channelOptions = channelOptions >>> 0;
                            grayScale = !!grayScale;
                            somewhatImplemented("public flash.display.BitmapData::noise");
                        };
                        BitmapData.prototype.paletteMap = function (sourceBitmapData, sourceRect, destPoint, redArray, greenArray, blueArray, alphaArray) {
                            if (redArray === void 0) { redArray = null; }
                            if (greenArray === void 0) { greenArray = null; }
                            if (blueArray === void 0) { blueArray = null; }
                            if (alphaArray === void 0) { alphaArray = null; }
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            redArray = redArray;
                            greenArray = greenArray;
                            blueArray = blueArray;
                            alphaArray = alphaArray;
                            somewhatImplemented("public flash.display.BitmapData::paletteMap");
                        };
                        BitmapData.prototype.perlinNoise = function (baseX, baseY, numOctaves, randomSeed, stitch, fractalNoise, channelOptions, grayScale, offsets) {
                            if (channelOptions === void 0) { channelOptions = 7; }
                            if (grayScale === void 0) { grayScale = false; }
                            if (offsets === void 0) { offsets = null; }
                            baseX = +baseX;
                            baseY = +baseY;
                            numOctaves = numOctaves >>> 0;
                            randomSeed = randomSeed | 0;
                            stitch = !!stitch;
                            fractalNoise = !!fractalNoise;
                            channelOptions = channelOptions >>> 0;
                            grayScale = !!grayScale;
                            offsets = offsets;
                            somewhatImplemented("public flash.display.BitmapData::perlinNoise");
                        };
                        BitmapData.prototype.pixelDissolve = function (sourceBitmapData, sourceRect, destPoint, randomSeed, numPixels, fillColor) {
                            if (randomSeed === void 0) { randomSeed = 0; }
                            if (numPixels === void 0) { numPixels = 0; }
                            if (fillColor === void 0) { fillColor = 0; }
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            randomSeed = randomSeed | 0;
                            numPixels = numPixels | 0;
                            fillColor = fillColor >>> 0;
                            notImplemented("public flash.display.BitmapData::pixelDissolve");
                            return;
                        };
                        BitmapData.prototype.scroll = function (x, y) {
                            x = x | 0;
                            y = y | 0;
                            notImplemented("public flash.display.BitmapData::scroll");
                            return;
                        };
                        BitmapData.prototype.setPixels = function (rect, inputByteArray) {
                            this._putPixelData(rect, new Int32Array(inputByteArray.readRawBytes()));
                        };
                        BitmapData.prototype.setVector = function (rect, inputVector) {
                            this._putPixelData(rect, inputVector._view());
                        };
                        BitmapData.prototype.threshold = function (sourceBitmapData, sourceRect, destPoint, operation, threshold, color, mask, copySource) {
                            if (color === void 0) { color = 0; }
                            if (mask === void 0) { mask = 4294967295; }
                            if (copySource === void 0) { copySource = false; }
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            operation = asCoerceString(operation);
                            threshold = threshold >>> 0;
                            color = color >>> 0;
                            mask = mask >>> 0;
                            copySource = !!copySource;
                            notImplemented("public flash.display.BitmapData::threshold");
                            return;
                        };
                        BitmapData.prototype.lock = function () {
                            this._locked = true;
                        };
                        BitmapData.prototype.unlock = function (changeRect) {
                            if (changeRect === void 0) { changeRect = null; }
                            this._locked = false;
                        };
                        BitmapData.prototype.histogram = function (hRect) {
                            if (hRect === void 0) { hRect = null; }
                            hRect = hRect;
                            notImplemented("public flash.display.BitmapData::histogram");
                            return;
                        };
                        BitmapData.prototype.encode = function (rect, compressor, byteArray) {
                            if (byteArray === void 0) { byteArray = null; }
                            rect = rect;
                            compressor = compressor;
                            byteArray = byteArray;
                            notImplemented("public flash.display.BitmapData::encode");
                            return;
                        };
                        BitmapData.prototype._ensureBitmapData = function () {
                            if (this._isRemoteDirty) {
                                var serializer = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                                var data = serializer.requestBitmapData(this);
                                this._setData(data.getBytes(), 3 /* StraightAlphaRGBA */);
                                this._isRemoteDirty = false;
                                this._isDirty = false;
                                this._solidFillColorPBGRA = null;
                            }
                            release || assert(!(this._type === 4 /* JPEG */ || this._type === 5 /* PNG */ || this._type === 6 /* GIF */));
                            if (this._type !== 1 /* PremultipliedAlphaARGB */) {
                                Shumway.ColorUtilities.convertImage(this._type, 1 /* PremultipliedAlphaARGB */, this._view, this._view);
                                this._type = 1 /* PremultipliedAlphaARGB */;
                                this._solidFillColorPBGRA = null;
                            }
                            release || assert(this._data);
                            release || assert(this._dataBuffer);
                            release || assert(this._view);
                        };
                        BitmapData.classInitializer = function () {
                        };
                        BitmapData.initializer = function (symbol) {
                            this._symbol = symbol;
                        };
                        BitmapData.classSymbols = null;
                        BitmapData.instanceSymbols = null;
                        BitmapData.MAXIMUM_WIDTH = 8191;
                        BitmapData.MAXIMUM_HEIGHT = 8191;
                        BitmapData.MAXIMUM_DIMENSION = 16777215;
                        BitmapData._temporaryRectangles = [
                            new flash.geom.Rectangle(),
                            new flash.geom.Rectangle(),
                            new flash.geom.Rectangle()
                        ];
                        return BitmapData;
                    })(AS.ASNative);
                    display.BitmapData = BitmapData;
                    var BitmapSymbol = (function (_super) {
                        __extends(BitmapSymbol, _super);
                        function BitmapSymbol(data) {
                            _super.call(this, data, flash.display.BitmapData, false);
                            this.ready = false;
                        }
                        BitmapSymbol.FromData = function (data) {
                            var symbol = new BitmapSymbol(data);
                            symbol.width = data.width || -1;
                            symbol.height = data.height || -1;
                            symbol.syncId = flash.display.DisplayObject.getNextSyncID();
                            symbol.data = data.data;
                            switch (data.mimeType) {
                                case "application/octet-stream":
                                    symbol.type = data.dataType;
                                    symbol.ready = true;
                                    break;
                                case "image/jpeg":
                                    symbol.type = 4 /* JPEG */;
                                    break;
                                case "image/png":
                                    symbol.type = 5 /* PNG */;
                                    break;
                                case "image/gif":
                                    symbol.type = 6 /* GIF */;
                                    break;
                                default:
                                    notImplemented(data.mimeType);
                            }
                            return symbol;
                        };
                        BitmapSymbol.prototype.getSharedInstance = function () {
                            return this.sharedInstance || this.createSharedInstance();
                        };
                        BitmapSymbol.prototype.createSharedInstance = function () {
                            release || assert(this.ready);
                            this.sharedInstance = this.symbolClass.initializeFrom(this);
                            this.symbolClass.instanceConstructorNoInitialize.call(this.sharedInstance);
                            return this.sharedInstance;
                        };
                        Object.defineProperty(BitmapSymbol.prototype, "resolveAssetCallback", {
                            get: function () {
                                return this._unboundResolveAssetCallback.bind(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        BitmapSymbol.prototype._unboundResolveAssetCallback = function (data) {
                            release || assert(!this.ready);
                            this.ready = true;
                            if (!data) {
                                release || Shumway.Debug.error("Error while decoding image");
                                return;
                            }
                            release || assert(data.width);
                            release || assert(data.height);
                            this.width = data.width;
                            this.height = data.height;
                        };
                        return BitmapSymbol;
                    })(Shumway.Timeline.DisplaySymbol);
                    display.BitmapSymbol = BitmapSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = _AVM2.AS || (_AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var BitmapDataChannel = (function (_super) {
                        __extends(BitmapDataChannel, _super);
                        function BitmapDataChannel() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.BitmapDataChannel");
                        }
                        BitmapDataChannel.classInitializer = null;
                        BitmapDataChannel.initializer = null;
                        BitmapDataChannel.classSymbols = null;
                        BitmapDataChannel.instanceSymbols = null;
                        BitmapDataChannel.RED = 1;
                        BitmapDataChannel.GREEN = 2;
                        BitmapDataChannel.BLUE = 4;
                        BitmapDataChannel.ALPHA = 8;
                        return BitmapDataChannel;
                    })(AS.ASNative);
                    display.BitmapDataChannel = BitmapDataChannel;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var BitmapEncodingColorSpace = (function (_super) {
                        __extends(BitmapEncodingColorSpace, _super);
                        function BitmapEncodingColorSpace() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.BitmapEncodingColorSpace");
                        }
                        BitmapEncodingColorSpace.classInitializer = null;
                        BitmapEncodingColorSpace.initializer = null;
                        BitmapEncodingColorSpace.classSymbols = null;
                        BitmapEncodingColorSpace.instanceSymbols = null;
                        BitmapEncodingColorSpace.COLORSPACE_AUTO = "auto";
                        BitmapEncodingColorSpace.COLORSPACE_4_4_4 = "4:4:4";
                        BitmapEncodingColorSpace.COLORSPACE_4_2_2 = "4:2:2";
                        BitmapEncodingColorSpace.COLORSPACE_4_2_0 = "4:2:0";
                        return BitmapEncodingColorSpace;
                    })(AS.ASNative);
                    display.BitmapEncodingColorSpace = BitmapEncodingColorSpace;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var JPEGEncoderOptions = (function (_super) {
                        __extends(JPEGEncoderOptions, _super);
                        function JPEGEncoderOptions(quality) {
                            if (quality === void 0) { quality = 80; }
                            quality = quality >>> 0;
                            false && _super.call(this);
                            dummyConstructor("public flash.display.JPEGEncoderOptions");
                        }
                        JPEGEncoderOptions.classInitializer = null;
                        JPEGEncoderOptions.initializer = null;
                        JPEGEncoderOptions.classSymbols = null;
                        JPEGEncoderOptions.instanceSymbols = null;
                        return JPEGEncoderOptions;
                    })(AS.ASNative);
                    display.JPEGEncoderOptions = JPEGEncoderOptions;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (_AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var assert = Shumway.Debug.assert;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var ActionScriptVersion = flash.display.ActionScriptVersion;
                    var AVM2 = Shumway.AVM2.Runtime.AVM2;
                    var events = flash.events;
                    var FileLoader = Shumway.FileLoader;
                    var AbcFile = Shumway.AVM2.ABC.AbcFile;
                    var SWFFile = Shumway.SWF.SWFFile;
                    var enterTimeline = Shumway.AVM2.enterTimeline;
                    var leaveTimeline = Shumway.AVM2.leaveTimeline;
                    var LoadStatus;
                    (function (LoadStatus) {
                        LoadStatus[LoadStatus["Unloaded"] = 0] = "Unloaded";
                        LoadStatus[LoadStatus["Opened"] = 1] = "Opened";
                        LoadStatus[LoadStatus["Initialized"] = 2] = "Initialized";
                        LoadStatus[LoadStatus["Complete"] = 3] = "Complete";
                    })(LoadStatus || (LoadStatus = {}));
                    var LoadingType;
                    (function (LoadingType) {
                        LoadingType[LoadingType["External"] = 0] = "External";
                        LoadingType[LoadingType["Bytes"] = 1] = "Bytes";
                    })(LoadingType || (LoadingType = {}));
                    var Loader = (function (_super) {
                        __extends(Loader, _super);
                        function Loader() {
                            false && _super.call(this);
                            display.DisplayObjectContainer.instanceConstructorNoInitialize.call(this);
                            this._content = null;
                            if (Loader._rootLoader) {
                                this._contentID = display.DisplayObject._instanceID++;
                            }
                            else {
                            }
                            this._contentLoaderInfo = new display.LoaderInfo(display.LoaderInfo.CtorToken);
                            this._contentLoaderInfo._loader = this;
                            var currentAbc = AVM2.currentAbc();
                            if (currentAbc) {
                                this._contentLoaderInfo._loaderUrl = currentAbc.env.loaderInfo.url;
                            }
                            this._fileLoader = null;
                            this._loadStatus = 0 /* Unloaded */;
                        }
                        Loader.getRootLoader = function () {
                            if (Loader._rootLoader) {
                                return Loader._rootLoader;
                            }
                            var loader = new flash.display.Loader();
                            flash.display.DisplayObject._instanceID--;
                            loader._contentLoaderInfo._loader = null;
                            Loader._rootLoader = loader;
                            return loader;
                        };
                        Loader.reset = function () {
                            Loader._loadQueue.forEach(function (loader) { return loader.unload(); });
                            Loader.classInitializer();
                        };
                        Loader.processEvents = function () {
                            Loader.processEarlyEvents();
                            Loader.processLateEvents();
                        };
                        Loader.processEarlyEvents = function () {
                            var queue = Loader._loadQueue;
                            for (var i = 0; i < queue.length; i++) {
                                var instance = queue[i];
                                release || assert(instance._loadStatus !== 3 /* Complete */);
                                var loaderInfo = instance._contentLoaderInfo;
                                var imageSymbol = instance._imageSymbol;
                                if (loaderInfo._file instanceof Shumway.ImageFile) {
                                    if (!imageSymbol || !imageSymbol.ready || instance._queuedLoadUpdate) {
                                        continue;
                                    }
                                    release || assert(loaderInfo.bytesLoaded === loaderInfo.bytesTotal);
                                    instance._applyDecodedImage(imageSymbol);
                                    release || assert(instance._content);
                                }
                                if (instance._loadStatus === 1 /* Opened */ && instance._content) {
                                    enterTimeline("Loader.INIT");
                                    try {
                                        loaderInfo.dispatchEvent(events.Event.getInstance(events.Event.INIT));
                                    }
                                    catch (e) {
                                        console.warn('caught error under loaderInfo INIT event:', e);
                                    }
                                    leaveTimeline();
                                    instance._loadStatus = 2 /* Initialized */;
                                    if (instance === Loader._rootLoader) {
                                        enterTimeline("Loader.Progress", 'rootLoader');
                                        try {
                                            loaderInfo.dispatchEvent(new events.ProgressEvent(events.ProgressEvent.PROGRESS, false, false, loaderInfo.bytesLoaded, loaderInfo.bytesTotal));
                                        }
                                        catch (e) {
                                            console.warn('caught error under loaderInfo PROGRESS event:', e);
                                        }
                                        leaveTimeline();
                                    }
                                }
                                if (instance._loadStatus === 2 /* Initialized */ && loaderInfo.bytesLoaded === loaderInfo.bytesTotal) {
                                    queue.splice(i--, 1);
                                    release || assert(queue.indexOf(instance) === -1);
                                    instance._loadStatus = 3 /* Complete */;
                                    enterTimeline("Loader.Complete");
                                    try {
                                        loaderInfo.dispatchEvent(events.Event.getInstance(events.Event.COMPLETE));
                                    }
                                    catch (e) {
                                        console.warn('caught error under loaderInfo COMPLETE event: ', e);
                                    }
                                    leaveTimeline();
                                }
                            }
                        };
                        Loader.processLateEvents = function () {
                            var queue = Loader._loadQueue;
                            for (var i = 0; i < queue.length; i++) {
                                var instance = queue[i];
                                release || assert(instance._loadStatus !== 3 /* Complete */);
                                var loaderInfo = instance._contentLoaderInfo;
                                var update = instance._queuedLoadUpdate;
                                var bytesTotal = loaderInfo._bytesTotal;
                                if ((!update || !bytesTotal) && instance._loadStatus !== 1 /* Opened */) {
                                    continue;
                                }
                                instance._queuedLoadUpdate = null;
                                if (instance._loadStatus === 0 /* Unloaded */) {
                                    if (instance._loadingType === 0 /* External */) {
                                        enterTimeline("Loader.Open");
                                        try {
                                            loaderInfo.dispatchEvent(events.Event.getInstance(events.Event.OPEN));
                                        }
                                        catch (e) {
                                            console.warn('caught error under loaderInfo OPEN event: ', e);
                                        }
                                        leaveTimeline();
                                    }
                                    enterTimeline("Loader.Progress");
                                    try {
                                        loaderInfo.dispatchEvent(new events.ProgressEvent(events.ProgressEvent.PROGRESS, false, false, 0, bytesTotal));
                                    }
                                    catch (e) {
                                        console.warn('caught error under loaderInfo PROGRESS event: ', e);
                                    }
                                    leaveTimeline();
                                    instance._loadStatus = 1 /* Opened */;
                                }
                                if (update) {
                                    instance._applyLoadUpdate(update);
                                    enterTimeline("Loader.Progress");
                                    try {
                                        loaderInfo.dispatchEvent(new events.ProgressEvent(events.ProgressEvent.PROGRESS, false, false, update.bytesLoaded, bytesTotal));
                                    }
                                    catch (e) {
                                        console.warn('caught error under loaderInfo PROGRESS event: ', e);
                                    }
                                    leaveTimeline();
                                }
                            }
                        };
                        Loader.prototype._setStage = function (stage) {
                            release || assert(this === Loader.getRootLoader());
                            this._stage = stage;
                        };
                        Loader.prototype._initFrame = function (advance) {
                        };
                        Loader.prototype._constructFrame = function () {
                            if (this === Loader.getRootLoader() && this._content) {
                                display.DisplayObject._advancableInstances.remove(this);
                                this._children[0] = this._content;
                                this._constructChildren();
                                this._children.length = 0;
                                return;
                            }
                            this._constructChildren();
                        };
                        Loader.prototype.addChild = function (child) {
                            throwError('IllegalOperationError', _AVM2.Errors.InvalidLoaderMethodError);
                            return null;
                        };
                        Loader.prototype.addChildAt = function (child, index) {
                            throwError('IllegalOperationError', _AVM2.Errors.InvalidLoaderMethodError);
                            return null;
                        };
                        Loader.prototype.removeChild = function (child) {
                            throwError('IllegalOperationError', _AVM2.Errors.InvalidLoaderMethodError);
                            return null;
                        };
                        Loader.prototype.removeChildAt = function (index) {
                            throwError('IllegalOperationError', _AVM2.Errors.InvalidLoaderMethodError);
                            return null;
                        };
                        Loader.prototype.setChildIndex = function (child, index) {
                            throwError('IllegalOperationError', _AVM2.Errors.InvalidLoaderMethodError);
                        };
                        Loader.prototype._describeData = function (data) {
                            var keyValueParis = [];
                            for (var k in data) {
                                keyValueParis.push(k + ":" + Shumway.StringUtilities.toSafeString(data[k]));
                            }
                            return "{" + keyValueParis.join(", ") + "}";
                        };
                        Object.defineProperty(Loader.prototype, "content", {
                            get: function () {
                                if (this._loadStatus === 0 /* Unloaded */) {
                                    return null;
                                }
                                return this._content;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Loader.prototype, "contentLoaderInfo", {
                            get: function () {
                                return this._contentLoaderInfo;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Loader.prototype._getJPEGLoaderContextdeblockingfilter = function (context) {
                            if (flash.system.JPEGLoaderContext.isType(context)) {
                                return context.deblockingFilter;
                            }
                            return 0.0;
                        };
                        Object.defineProperty(Loader.prototype, "uncaughtErrorEvents", {
                            get: function () {
                                somewhatImplemented("public flash.display.Loader::uncaughtErrorEvents");
                                if (!this._uncaughtErrorEvents) {
                                    this._uncaughtErrorEvents = new events.UncaughtErrorEvents();
                                }
                                return this._uncaughtErrorEvents;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Loader.prototype._canLoadSWFFromDomain = function (url) {
                            url = Shumway.FileLoadingService.instance.resolveUrl(url);
                            var whitelist = AVM2.instance.globals['Shumway.Player.Utils'];
                            return whitelist.checkDomainForSWFLoading(url);
                        };
                        Loader.prototype.load = function (request, context) {
                            this.close();
                            this._contentLoaderInfo._url = request.url;
                            this._applyLoaderContext(context);
                            this._loadingType = 0 /* External */;
                            this._fileLoader = new FileLoader(this);
                            if (!release && AS.traceLoaderOption.value) {
                                console.log("Loading url " + request.url);
                            }
                            Promise.resolve(undefined).then(function (fileLoader, fileRequest) {
                                if (this._canLoadSWFFromDomain(fileRequest.url)) {
                                    fileLoader.loadFile(fileRequest);
                                }
                                else {
                                    console.error('Loading of ' + fileRequest.url + ' was rejected based on allowDomain heuristic.');
                                }
                            }.bind(this, this._fileLoader, request._toFileRequest()));
                            this._queuedLoadUpdate = null;
                            release || assert(Loader._loadQueue.indexOf(this) === -1);
                            Loader._loadQueue.push(this);
                        };
                        Loader.prototype.loadBytes = function (data, context) {
                            this.close();
                            this._contentLoaderInfo._url = (this.loaderInfo ? this.loaderInfo._url : '') + '/[[DYNAMIC]]/' + (++Loader._embeddedContentLoadCount);
                            this._applyLoaderContext(context);
                            this._loadingType = 1 /* Bytes */;
                            this._fileLoader = new FileLoader(this);
                            this._queuedLoadUpdate = null;
                            if (!release && AS.traceLoaderOption.value) {
                                console.log("Loading embedded symbol " + this._contentLoaderInfo._url);
                            }
                            this._fileLoader.loadBytes(new Uint8Array(data.bytes, 0, data.length));
                            release || assert(Loader._loadQueue.indexOf(this) === -1);
                            Loader._loadQueue.push(this);
                        };
                        Loader.prototype.close = function () {
                            var queueIndex = Loader._loadQueue.indexOf(this);
                            if (queueIndex > -1) {
                                Loader._loadQueue.splice(queueIndex, 1);
                            }
                            this._contentLoaderInfo.reset();
                            if (!this._fileLoader) {
                                return;
                            }
                            this._fileLoader.abortLoad();
                            this._fileLoader = null;
                        };
                        Loader.prototype._unload = function (stopExecution, gc) {
                            if (this._loadStatus < 2 /* Initialized */) {
                                this._loadStatus = 0 /* Unloaded */;
                                return;
                            }
                            this.close();
                            this._content = null;
                            this._contentLoaderInfo._loader = null;
                            this._loadStatus = 0 /* Unloaded */;
                            this.dispatchEvent(events.Event.getInstance(events.Event.UNLOAD));
                        };
                        Loader.prototype.unload = function () {
                            this._unload(false, false);
                        };
                        Loader.prototype.unloadAndStop = function (gc) {
                            this._unload(true, !!gc);
                        };
                        Loader.prototype._applyLoaderContext = function (context) {
                            var parameters = {};
                            if (context && context.parameters) {
                                var contextParameters = context.parameters;
                                for (var key in contextParameters) {
                                    var value = contextParameters[key];
                                    if (!Shumway.isString(value)) {
                                        throwError('IllegalOperationError', _AVM2.Errors.ObjectWithStringsParamError, 'LoaderContext.parameters');
                                    }
                                    parameters[key] = value;
                                }
                            }
                            if (context && context.applicationDomain) {
                                var domain = new flash.system.ApplicationDomain(flash.system.ApplicationDomain.currentDomain);
                                this._contentLoaderInfo._applicationDomain = domain;
                            }
                            this._contentLoaderInfo._parameters = parameters;
                        };
                        Loader.prototype.onLoadOpen = function (file) {
                            this._contentLoaderInfo.setFile(file);
                        };
                        Loader.prototype.onLoadProgress = function (update) {
                            release || assert(update);
                            this._queuedLoadUpdate = update;
                        };
                        Loader.prototype.onNewEagerlyParsedSymbols = function (dictionaryEntries, delta) {
                            var promises = [];
                            for (var i = dictionaryEntries.length - delta; i < dictionaryEntries.length; i++) {
                                var dictionaryEntry = dictionaryEntries[i];
                                var symbol = this._contentLoaderInfo.getSymbolById(dictionaryEntry.id);
                                if (symbol.ready) {
                                    continue;
                                }
                                release || assert(symbol.resolveAssetPromise);
                                release || assert(symbol.ready === false);
                                promises.push(symbol.resolveAssetPromise.promise);
                            }
                            return Promise.all(promises);
                        };
                        Loader.prototype.onImageBytesLoaded = function () {
                            var file = this._contentLoaderInfo._file;
                            release || assert(file instanceof Shumway.ImageFile);
                            var data = {
                                id: -1,
                                data: file.data,
                                mimeType: file.mimeType,
                                dataType: file.type,
                                type: 'image'
                            };
                            var symbol = display.BitmapSymbol.FromData(data);
                            this._imageSymbol = symbol;
                            var resolver = AVM2.instance.globals['Shumway.Player.Utils'];
                            resolver.registerImage(symbol, data);
                            release || assert(symbol.resolveAssetPromise);
                        };
                        Loader.prototype._applyDecodedImage = function (symbol) {
                            var bitmapData = symbol.createSharedInstance();
                            this._content = new flash.display.Bitmap(bitmapData);
                            this._contentLoaderInfo._width = this._content.width * 20;
                            this._contentLoaderInfo._height = this._content.height * 20;
                            this.addTimelineObjectAtDepth(this._content, 0);
                        };
                        Loader.prototype._applyLoadUpdate = function (update) {
                            var loaderInfo = this._contentLoaderInfo;
                            loaderInfo._bytesLoaded = update.bytesLoaded;
                            var file = loaderInfo._file;
                            if (!(file instanceof SWFFile)) {
                                return;
                            }
                            if (file.framesLoaded === 0) {
                                return;
                            }
                            if (loaderInfo._allowCodeExecution) {
                                var appDomain = AVM2.instance.applicationDomain;
                                var abcBlocksLoaded = file.abcBlocks.length;
                                var abcBlocksLoadedDelta = abcBlocksLoaded - loaderInfo._abcBlocksLoaded;
                                if (abcBlocksLoadedDelta > 0) {
                                    for (var i = loaderInfo._abcBlocksLoaded; i < abcBlocksLoaded; i++) {
                                        var abcBlock = file.abcBlocks[i];
                                        var abc = new AbcFile(abcBlock.data, abcBlock.name);
                                        abc.env.loaderInfo = loaderInfo;
                                        if (abcBlock.flags) {
                                            appDomain.loadAbc(abc);
                                        }
                                        else {
                                            appDomain.executeAbc(abc);
                                        }
                                    }
                                    loaderInfo._abcBlocksLoaded = abcBlocksLoaded;
                                }
                                var mappedSymbolsLoaded = file.symbolClassesList.length;
                                var mappedSymbolsLoadedDelta = mappedSymbolsLoaded - loaderInfo._mappedSymbolsLoaded;
                                if (mappedSymbolsLoadedDelta > 0) {
                                    for (var i = loaderInfo._mappedSymbolsLoaded; i < mappedSymbolsLoaded; i++) {
                                        var symbolMapping = file.symbolClassesList[i];
                                        var symbolClass = appDomain.getClass(symbolMapping.className);
                                        Object.defineProperty(symbolClass, "defaultInitializerArgument", { get: loaderInfo.getSymbolResolver(symbolClass, symbolMapping.id), configurable: true });
                                    }
                                    loaderInfo._mappedSymbolsLoaded = mappedSymbolsLoaded;
                                }
                            }
                            if (inFirefox) {
                                var fontsLoaded = file.fonts.length;
                                var fontsLoadedDelta = fontsLoaded - loaderInfo._fontsLoaded;
                                if (fontsLoadedDelta > 0) {
                                    for (var i = loaderInfo._fontsLoaded; i < fontsLoaded; i++) {
                                        flash.text.Font.registerEmbeddedFont(file.fonts[i], loaderInfo);
                                    }
                                    loaderInfo._fontsLoaded = fontsLoaded;
                                }
                            }
                            var rootSymbol = loaderInfo.getRootSymbol();
                            var framesLoadedDelta = file.framesLoaded - rootSymbol.frames.length;
                            if (framesLoadedDelta === 0) {
                                return;
                            }
                            var root = this._content;
                            if (!root) {
                                root = this.createContentRoot(rootSymbol, file.sceneAndFrameLabelData);
                            }
                            var rootSprite = root;
                            for (var i = 0; i < framesLoadedDelta; i++) {
                                var frameInfo = loaderInfo.getFrame(null, rootSymbol.frames.length);
                                rootSprite._addFrame(frameInfo);
                            }
                        };
                        Loader.prototype.onLoadComplete = function () {
                        };
                        Loader.prototype.onLoadError = function () {
                            release || Shumway.Debug.warning('Not implemented: flash.display.Loader loading-error handling');
                        };
                        Loader.prototype.createContentRoot = function (symbol, sceneData) {
                            if (symbol.isAVM1Object) {
                                this._initAvm1(symbol);
                            }
                            var root = symbol.symbolClass.initializeFrom(symbol);
                            flash.display.DisplayObject._instanceID--;
                            if (this === Loader._rootLoader) {
                                root._name = 'root1';
                            }
                            else {
                                root._name = 'instance' + this._contentID;
                            }
                            if (display.MovieClip.isType(root)) {
                                var mc = root;
                                if (sceneData) {
                                    var scenes = sceneData.scenes;
                                    for (var i = 0, n = scenes.length; i < n; i++) {
                                        var sceneInfo = scenes[i];
                                        var offset = sceneInfo.offset;
                                        var endFrame = i < n - 1 ? scenes[i + 1].offset : symbol.numFrames;
                                        mc.addScene(sceneInfo.name, [], offset, endFrame - offset);
                                    }
                                    var labels = sceneData.labels;
                                    for (var i = 0; i < labels.length; i++) {
                                        var labelInfo = labels[i];
                                        mc.addFrameLabel(labelInfo.name, labelInfo.frame + 1);
                                    }
                                }
                                else {
                                    mc.addScene('Scene 1', [], 0, symbol.numFrames);
                                }
                            }
                            var loaderInfo = this._contentLoaderInfo;
                            root._loaderInfo = loaderInfo;
                            var rootTimeline = root;
                            if (loaderInfo.actionScriptVersion === ActionScriptVersion.ACTIONSCRIPT2) {
                                root = this._initAvm1Root(root);
                            }
                            else if (this === Loader.getRootLoader()) {
                                display.MovieClip.frameNavigationModel = loaderInfo.swfVersion < 10 ? 9 /* SWF9 */ : 10 /* SWF10 */;
                            }
                            this._content = root;
                            if (this === Loader.getRootLoader()) {
                                Loader.runtimeStartTime = Date.now();
                                this._stage.setRoot(root);
                            }
                            else {
                                this.addTimelineObjectAtDepth(root, 0);
                            }
                            return rootTimeline;
                        };
                        Loader.prototype._initAvm1 = function (symbol) {
                            var contentLoaderInfo = this._contentLoaderInfo;
                            var context;
                            if (this.loaderInfo && this.loaderInfo._avm1Context) {
                                context = contentLoaderInfo._avm1Context = this.loaderInfo._avm1Context;
                            }
                            else {
                                Shumway.AVM1.Lib.installObjectMethods();
                                context = Shumway.AVM1.AVM1Context.create(contentLoaderInfo);
                                contentLoaderInfo._avm1Context = context;
                                if (this === Loader.getRootLoader()) {
                                    context.globals.Key._bind(this._stage, context);
                                    context.globals.Mouse._bind(this._stage, context);
                                    display.MovieClip.frameNavigationModel = 1 /* SWF1 */;
                                }
                            }
                            symbol.avm1Context = context;
                        };
                        Loader.prototype._initAvm1Root = function (root) {
                            var avm1Context = this._contentLoaderInfo._avm1Context;
                            var as2Object = Shumway.AVM1.Lib.getAVM1Object(root, avm1Context);
                            if (this.loaderInfo && this.loaderInfo._avm1Context) {
                                as2Object.context = this.loaderInfo._avm1Context;
                                return root;
                            }
                            avm1Context.root = as2Object;
                            root.addEventListener('frameConstructed', avm1Context.flushPendingScripts.bind(avm1Context), false, Number.MAX_VALUE);
                            var avm1Movie = new flash.display.AVM1Movie(root);
                            var parameters = this._contentLoaderInfo._parameters;
                            for (var paramName in parameters) {
                                if (!(paramName in as2Object)) {
                                    as2Object[paramName] = parameters[paramName];
                                }
                            }
                            return avm1Movie;
                        };
                        Loader.classInitializer = function () {
                            Loader._rootLoader = null;
                            Loader._loadQueue = [];
                            Loader.runtimeStartTime = 0;
                            Loader._embeddedContentLoadCount = 0;
                        };
                        Loader.initializer = function () {
                            var self = this;
                            display.DisplayObject._advancableInstances.push(self);
                        };
                        Loader.classSymbols = null;
                        Loader.instanceSymbols = null;
                        return Loader;
                    })(flash.display.DisplayObjectContainer);
                    display.Loader = Loader;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = _AVM2.AS || (_AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var assert = Shumway.Debug.assert;
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SWFFile = Shumway.SWF.SWFFile;
                    var LoaderInfo = (function (_super) {
                        __extends(LoaderInfo, _super);
                        function LoaderInfo(token) {
                            false && _super.call(this);
                            if (token !== LoaderInfo.CtorToken) {
                                throwError('ArgumentError', AVM2.Errors.CantInstantiateError, 'LoaderInfo$');
                            }
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._loader = null;
                            this._loaderUrl = '';
                            this.reset();
                        }
                        LoaderInfo.prototype.reset = function () {
                            this._url = '';
                            this._file = null;
                            this._bytesLoaded = 0;
                            this._bytesTotal = 0;
                            this._applicationDomain = null;
                            this._parameters = null;
                            this._width = 0;
                            this._height = 0;
                            this._sharedEvents = null;
                            this._parentSandboxBridge = null;
                            this._childSandboxBridge = null;
                            this._content = null;
                            this._bytes = null;
                            this._uncaughtErrorEvents = null;
                            this._allowCodeExecution = true;
                            this._dictionary = [];
                            this._abcBlocksLoaded = 0;
                            this._mappedSymbolsLoaded = 0;
                            this._fontsLoaded = 0;
                            this._avm1Context = null;
                        };
                        LoaderInfo.prototype.setFile = function (file) {
                            release || assert(!this._file);
                            this._file = file;
                            this._bytesTotal = file.bytesTotal;
                            if (file instanceof SWFFile) {
                                var bbox = file.bounds;
                                this._width = bbox.xMax - bbox.xMin;
                                this._height = bbox.yMax - bbox.yMin;
                            }
                            else {
                                release || assert(file instanceof Shumway.ImageFile);
                            }
                        };
                        LoaderInfo.getLoaderInfoByDefinition = function (object) {
                            object = object;
                            notImplemented("public flash.display.LoaderInfo::static getLoaderInfoByDefinition");
                            return;
                        };
                        Object.defineProperty(LoaderInfo.prototype, "loaderURL", {
                            get: function () {
                                if (!this._loader) {
                                    var service = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                                    return (this._url === service.swfUrl && service.loaderUrl) || this._url;
                                }
                                return this._loaderUrl;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "url", {
                            get: function () {
                                if (!this._file) {
                                    return null;
                                }
                                return this._url;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "isURLInaccessible", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get isURLInaccessible");
                                return this._file ? false : true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "bytesLoaded", {
                            get: function () {
                                return this._bytesLoaded;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "bytesTotal", {
                            get: function () {
                                return this._bytesTotal;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "applicationDomain", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get applicationDomain");
                                return this._file ? flash.system.ApplicationDomain.currentDomain : null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "swfVersion", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                if (!(this._file instanceof SWFFile)) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotSWFError);
                                }
                                return this._file.swfVersion;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "actionScriptVersion", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                if (!(this._file instanceof SWFFile)) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotSWFError);
                                }
                                return this._file.useAVM1 ? display.ActionScriptVersion.ACTIONSCRIPT2 : display.ActionScriptVersion.ACTIONSCRIPT3;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "frameRate", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                if (!(this._file instanceof SWFFile)) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotSWFError);
                                }
                                return this._file.frameRate;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "width", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                return (this._width / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "height", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                return (this._height / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "contentType", {
                            get: function () {
                                if (!this._file) {
                                    return null;
                                }
                                return this._file instanceof Shumway.ImageFile ? this._file.mimeType : 'application/x-shockwave-flash';
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "sharedEvents", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get sharedEvents");
                                if (!this._sharedEvents) {
                                    this._sharedEvents = new flash.events.EventDispatcher();
                                }
                                return this._sharedEvents;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "parentSandboxBridge", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get parentSandboxBridge");
                                return this._parentSandboxBridge;
                            },
                            set: function (door) {
                                somewhatImplemented("public flash.display.LoaderInfo::set parentSandboxBridge");
                                this._parentSandboxBridge = door;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "childSandboxBridge", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get childSandboxBridge");
                                return this._childSandboxBridge;
                            },
                            set: function (door) {
                                somewhatImplemented("public flash.display.LoaderInfo::set childSandboxBridge");
                                this._childSandboxBridge = door;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "sameDomain", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                somewhatImplemented("public flash.display.LoaderInfo::get sameDomain");
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "childAllowsParent", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                somewhatImplemented("public flash.display.LoaderInfo::get childAllowsParent");
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "parentAllowsChild", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                somewhatImplemented("public flash.display.LoaderInfo::get parentAllowsChild");
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "loader", {
                            get: function () {
                                return this._loader;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "content", {
                            get: function () {
                                return this._loader && this._loader.content;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "bytes", {
                            get: function () {
                                if (!this._file) {
                                    return new flash.utils.ByteArray();
                                }
                                notImplemented("public flash.display.LoaderInfo::get bytes");
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "parameters", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get parameters");
                                if (this._parameters) {
                                    return Shumway.ObjectUtilities.cloneObject(this._parameters);
                                }
                                return {};
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "uncaughtErrorEvents", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::_getUncaughtErrorEvents");
                                if (!this._uncaughtErrorEvents) {
                                    this._uncaughtErrorEvents = new flash.events.UncaughtErrorEvents();
                                }
                                return this._uncaughtErrorEvents;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        LoaderInfo.prototype.getSymbolResolver = function (classDefinition, symbolId) {
                            return this.resolveClassSymbol.bind(this, classDefinition, symbolId);
                        };
                        LoaderInfo.prototype.getSymbolById = function (id) {
                            var symbol = this._dictionary[id];
                            if (symbol) {
                                if (symbol.ready === false) {
                                    release || Shumway.Debug.warning("Accessing symbol that's not yet ready.");
                                    return null;
                                }
                                return symbol;
                            }
                            release || assert(this._file instanceof SWFFile);
                            var data = this._file.getSymbol(id);
                            if (!data) {
                                if (id !== 65535) {
                                    Shumway.Debug.warning("Unknown symbol requested: " + id);
                                }
                                return null;
                            }
                            switch (data.type) {
                                case 'shape':
                                    symbol = flash.display.ShapeSymbol.FromData(data, this);
                                    break;
                                case 'morphshape':
                                    symbol = flash.display.MorphShapeSymbol.FromData(data, this);
                                    break;
                                case 'image':
                                    if (data.definition) {
                                        data = data.definition;
                                    }
                                    symbol = flash.display.BitmapSymbol.FromData(data);
                                    break;
                                case 'label':
                                    symbol = flash.text.TextSymbol.FromLabelData(data, this);
                                    break;
                                case 'text':
                                    symbol = flash.text.TextSymbol.FromTextData(data, this);
                                    this._syncAVM1Attributes(symbol);
                                    break;
                                case 'button':
                                    symbol = flash.display.ButtonSymbol.FromData(data, this);
                                    this._syncAVM1Attributes(symbol);
                                    break;
                                case 'sprite':
                                    symbol = flash.display.SpriteSymbol.FromData(data, this);
                                    break;
                                case 'font':
                                    if (data.definition) {
                                        data = data.definition;
                                    }
                                    symbol = flash.text.FontSymbol.FromData(data);
                                    var font = flash.text.Font.initializeFrom(symbol);
                                    flash.text.Font.instanceConstructorNoInitialize.call(font);
                                    break;
                                case 'sound':
                                    symbol = flash.media.SoundSymbol.FromData(data);
                                    break;
                                case 'binary':
                                    symbol = Shumway.Timeline.BinarySymbol.FromData(data);
                                    break;
                            }
                            release || assert(symbol, "Unknown symbol type " + data.type);
                            this._dictionary[id] = symbol;
                            if (symbol.ready === false) {
                                this._registerFontOrImage(symbol, data);
                            }
                            return symbol;
                        };
                        LoaderInfo.prototype._registerFontOrImage = function (symbol, data) {
                            var resolver = AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                            switch (data.type) {
                                case 'font':
                                    resolver.registerFont(symbol, data);
                                    break;
                                case 'image':
                                    resolver.registerImage(symbol, data);
                                    break;
                                default:
                                    throw new Error('Unsupported assert type: ' + data.type);
                            }
                        };
                        LoaderInfo.prototype.getRootSymbol = function () {
                            release || assert(this._file instanceof SWFFile);
                            release || assert(this._file.framesLoaded > 0);
                            var symbol = this._dictionary[0];
                            if (!symbol) {
                                symbol = new flash.display.SpriteSymbol({ id: 0, className: this._file.symbolClassesMap[0] }, this);
                                symbol.isRoot = true;
                                symbol.numFrames = this._file.frameCount;
                                this._syncAVM1Attributes(symbol);
                                this._dictionary[0] = symbol;
                            }
                            return symbol;
                        };
                        LoaderInfo.prototype._syncAVM1Attributes = function (symbol) {
                            if (this.actionScriptVersion === display.ActionScriptVersion.ACTIONSCRIPT2) {
                                symbol.isAVM1Object = true;
                                symbol.avm1Context = this._avm1Context;
                            }
                        };
                        LoaderInfo.prototype.getFrame = function (sprite, index) {
                            var file = this._file;
                            release || assert(file instanceof SWFFile);
                            if (!sprite) {
                                sprite = file;
                            }
                            return sprite.frames[index];
                        };
                        LoaderInfo.prototype.resolveClassSymbol = function (classDefinition, symbolId) {
                            var symbol = this.getSymbolById(symbolId);
                            if (!symbol) {
                                Shumway.Debug.warning("Attempt to resolve symbol for AVM2 class failed: Symbol " + symbolId + " not found.");
                            }
                            else {
                                Object.defineProperty(classDefinition, "defaultInitializerArgument", { value: symbol });
                                return symbol;
                            }
                        };
                        LoaderInfo.classInitializer = null;
                        LoaderInfo.initializer = null;
                        LoaderInfo.classSymbols = null;
                        LoaderInfo.instanceSymbols = null;
                        LoaderInfo.CtorToken = {};
                        return LoaderInfo;
                    })(flash.events.EventDispatcher);
                    display.LoaderInfo = LoaderInfo;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var MorphShape = (function (_super) {
                        __extends(MorphShape, _super);
                        function MorphShape() {
                            false && _super.call(this);
                            display.DisplayObject.instanceConstructorNoInitialize.call(this);
                        }
                        MorphShape.prototype._canHaveGraphics = function () {
                            return true;
                        };
                        MorphShape.prototype._getGraphics = function () {
                            return this._graphics;
                        };
                        Object.defineProperty(MorphShape.prototype, "graphics", {
                            get: function () {
                                return this._ensureGraphics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MorphShape.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            var graphics = this._getGraphics();
                            return graphics && graphics._containsPoint(localX, localY, true, this._ratio / 0xffff);
                        };
                        MorphShape.classSymbols = null;
                        MorphShape.instanceSymbols = null;
                        MorphShape.classInitializer = null;
                        MorphShape.initializer = function (symbol) {
                            var self = this;
                            self._graphics = null;
                            if (symbol) {
                                this._setStaticContentFromSymbol(symbol);
                            }
                            this._setFlags(32768 /* ContainsMorph */);
                        };
                        return MorphShape;
                    })(flash.display.DisplayObject);
                    display.MorphShape = MorphShape;
                    var MorphShapeSymbol = (function (_super) {
                        __extends(MorphShapeSymbol, _super);
                        function MorphShapeSymbol(data) {
                            _super.call(this, data, flash.display.MorphShape);
                        }
                        MorphShapeSymbol.FromData = function (data, loaderInfo) {
                            var symbol = new MorphShapeSymbol(data);
                            symbol._setBoundsFromData(data);
                            symbol.graphics = flash.display.Graphics.FromData(data);
                            symbol.processRequires(data.require, loaderInfo);
                            symbol.morphFillBounds = data.morphFillBounds;
                            symbol.morphLineBounds = data.morphLineBounds;
                            return symbol;
                        };
                        return MorphShapeSymbol;
                    })(flash.display.ShapeSymbol);
                    display.MorphShapeSymbol = MorphShapeSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var NativeMenu = (function (_super) {
                        __extends(NativeMenu, _super);
                        function NativeMenu() {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                        }
                        NativeMenu.classInitializer = null;
                        NativeMenu.initializer = null;
                        NativeMenu.classSymbols = null;
                        NativeMenu.instanceSymbols = null;
                        return NativeMenu;
                    })(flash.events.EventDispatcher);
                    display.NativeMenu = NativeMenu;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var NativeMenuItem = (function (_super) {
                        __extends(NativeMenuItem, _super);
                        function NativeMenuItem() {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._enabled = true;
                        }
                        Object.defineProperty(NativeMenuItem.prototype, "enabled", {
                            get: function () {
                                somewhatImplemented("public flash.display.NativeMenuItem::get enabled");
                                return this._enabled;
                            },
                            set: function (isSeparator) {
                                isSeparator = !!isSeparator;
                                somewhatImplemented("public flash.display.NativeMenuItem::set enabled");
                                this._enabled = isSeparator;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NativeMenuItem.classInitializer = null;
                        NativeMenuItem.initializer = null;
                        NativeMenuItem.classSymbols = null;
                        NativeMenuItem.instanceSymbols = null;
                        return NativeMenuItem;
                    })(flash.events.EventDispatcher);
                    display.NativeMenuItem = NativeMenuItem;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var PNGEncoderOptions = (function (_super) {
                        __extends(PNGEncoderOptions, _super);
                        function PNGEncoderOptions(fastCompression) {
                            if (fastCompression === void 0) { fastCompression = false; }
                            fastCompression = !!fastCompression;
                            false && _super.call(this);
                            dummyConstructor("public flash.display.PNGEncoderOptions");
                        }
                        PNGEncoderOptions.classInitializer = null;
                        PNGEncoderOptions.initializer = null;
                        PNGEncoderOptions.classSymbols = null;
                        PNGEncoderOptions.instanceSymbols = null;
                        return PNGEncoderOptions;
                    })(AS.ASNative);
                    display.PNGEncoderOptions = PNGEncoderOptions;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var PixelSnapping = (function (_super) {
                        __extends(PixelSnapping, _super);
                        function PixelSnapping() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.PixelSnapping");
                        }
                        PixelSnapping.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return PixelSnapping.NEVER;
                                case 1:
                                    return PixelSnapping.ALWAYS;
                                case 2:
                                    return PixelSnapping.AUTO;
                                default:
                                    return null;
                            }
                        };
                        PixelSnapping.toNumber = function (value) {
                            switch (value) {
                                case PixelSnapping.NEVER:
                                    return 0;
                                case PixelSnapping.ALWAYS:
                                    return 1;
                                case PixelSnapping.AUTO:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        PixelSnapping.classInitializer = null;
                        PixelSnapping.initializer = null;
                        PixelSnapping.classSymbols = null;
                        PixelSnapping.instanceSymbols = null;
                        PixelSnapping.NEVER = "never";
                        PixelSnapping.ALWAYS = "always";
                        PixelSnapping.AUTO = "auto";
                        return PixelSnapping;
                    })(AS.ASNative);
                    display.PixelSnapping = PixelSnapping;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SWFVersion = (function (_super) {
                        __extends(SWFVersion, _super);
                        function SWFVersion() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.SWFVersion");
                        }
                        SWFVersion.classInitializer = null;
                        SWFVersion.initializer = null;
                        SWFVersion.classSymbols = null;
                        SWFVersion.instanceSymbols = null;
                        SWFVersion.FLASH1 = 1;
                        SWFVersion.FLASH2 = 2;
                        SWFVersion.FLASH3 = 3;
                        SWFVersion.FLASH4 = 4;
                        SWFVersion.FLASH5 = 5;
                        SWFVersion.FLASH6 = 6;
                        SWFVersion.FLASH7 = 7;
                        SWFVersion.FLASH8 = 8;
                        SWFVersion.FLASH9 = 9;
                        SWFVersion.FLASH10 = 10;
                        SWFVersion.FLASH11 = 11;
                        SWFVersion.FLASH12 = 12;
                        return SWFVersion;
                    })(AS.ASNative);
                    display.SWFVersion = SWFVersion;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Scene = (function (_super) {
                        __extends(Scene, _super);
                        function Scene(name, labels, offset, numFrames) {
                            false && _super.call(this);
                            this._name = asCoerceString(name);
                            this._labels = labels;
                            this.offset = offset;
                            this._numFrames = numFrames | 0;
                        }
                        Object.defineProperty(Scene.prototype, "name", {
                            get: function () {
                                return this._name;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Scene.prototype, "labels", {
                            get: function () {
                                return this._labels;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Scene.prototype, "numFrames", {
                            get: function () {
                                return this._numFrames;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Scene.prototype.clone = function () {
                            var labels = this._labels.map(function (label) {
                                return label.clone();
                            });
                            return new Scene(this._name, labels, this.offset, this._numFrames);
                        };
                        Scene.prototype.getLabelByName = function (name, ignoreCase) {
                            if (ignoreCase) {
                                name = name.toLowerCase();
                            }
                            var labels = this._labels;
                            for (var i = 0; i < labels.length; i++) {
                                var label = labels[i];
                                if (ignoreCase ? label.name.toLowerCase() === name : label.name === name) {
                                    return label;
                                }
                            }
                            return null;
                        };
                        Scene.prototype.getLabelByFrame = function (frame) {
                            var labels = this._labels;
                            for (var i = 0; i < labels.length; i++) {
                                var label = labels[i];
                                if (label.frame === frame) {
                                    return label;
                                }
                            }
                            return null;
                        };
                        Scene.classInitializer = null;
                        Scene.initializer = null;
                        Scene.classSymbols = null;
                        Scene.instanceSymbols = null;
                        return Scene;
                    })(AS.ASNative);
                    display.Scene = Scene;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageAlignFlags = Shumway.Remoting.StageAlignFlags;
                    var StageAlign = (function (_super) {
                        __extends(StageAlign, _super);
                        function StageAlign() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.StageAlign");
                        }
                        StageAlign.fromNumber = function (n) {
                            if (n === 0) {
                                return "";
                            }
                            var s = "";
                            if (n & 1 /* Top */) {
                                s += "T";
                            }
                            if (n & 2 /* Bottom */) {
                                s += "B";
                            }
                            if (n & 4 /* Left */) {
                                s += "L";
                            }
                            if (n & 8 /* Right */) {
                                s += "R";
                            }
                            return s;
                        };
                        StageAlign.toNumber = function (value) {
                            var n = 0;
                            value = value.toUpperCase();
                            if (value.indexOf("T") >= 0) {
                                n |= 1 /* Top */;
                            }
                            if (value.indexOf("B") >= 0) {
                                n |= 2 /* Bottom */;
                            }
                            if (value.indexOf("L") >= 0) {
                                n |= 4 /* Left */;
                            }
                            if (value.indexOf("R") >= 0) {
                                n |= 8 /* Right */;
                            }
                            return n;
                        };
                        StageAlign.classInitializer = null;
                        StageAlign.initializer = null;
                        StageAlign.classSymbols = null;
                        StageAlign.instanceSymbols = null;
                        StageAlign.TOP = "T";
                        StageAlign.LEFT = "L";
                        StageAlign.BOTTOM = "B";
                        StageAlign.RIGHT = "R";
                        StageAlign.TOP_LEFT = "TL";
                        StageAlign.TOP_RIGHT = "TR";
                        StageAlign.BOTTOM_LEFT = "BL";
                        StageAlign.BOTTOM_RIGHT = "BR";
                        return StageAlign;
                    })(AS.ASNative);
                    display.StageAlign = StageAlign;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageDisplayState = (function (_super) {
                        __extends(StageDisplayState, _super);
                        function StageDisplayState() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.StageDisplayState");
                        }
                        StageDisplayState.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return StageDisplayState.FULL_SCREEN;
                                case 1:
                                    return StageDisplayState.FULL_SCREEN_INTERACTIVE;
                                case 2:
                                    return StageDisplayState.NORMAL;
                                default:
                                    return null;
                            }
                        };
                        StageDisplayState.toNumber = function (value) {
                            switch (value) {
                                case StageDisplayState.FULL_SCREEN:
                                    return 0;
                                case StageDisplayState.FULL_SCREEN_INTERACTIVE:
                                    return 1;
                                case StageDisplayState.NORMAL:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        StageDisplayState.classInitializer = null;
                        StageDisplayState.initializer = null;
                        StageDisplayState.classSymbols = null;
                        StageDisplayState.instanceSymbols = null;
                        StageDisplayState.FULL_SCREEN = "fullScreen";
                        StageDisplayState.FULL_SCREEN_INTERACTIVE = "fullScreenInteractive";
                        StageDisplayState.NORMAL = "normal";
                        return StageDisplayState;
                    })(AS.ASNative);
                    display.StageDisplayState = StageDisplayState;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageQuality = (function (_super) {
                        __extends(StageQuality, _super);
                        function StageQuality() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.StageQuality");
                        }
                        StageQuality.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return StageQuality.LOW;
                                case 1:
                                    return StageQuality.MEDIUM;
                                case 2:
                                    return StageQuality.HIGH;
                                case 3:
                                    return StageQuality.BEST;
                                case 4:
                                    return StageQuality.HIGH_8X8;
                                case 5:
                                    return StageQuality.HIGH_8X8_LINEAR;
                                case 6:
                                    return StageQuality.HIGH_16X16;
                                case 7:
                                    return StageQuality.HIGH_16X16_LINEAR;
                                default:
                                    return null;
                            }
                        };
                        StageQuality.toNumber = function (value) {
                            switch (value) {
                                case StageQuality.LOW:
                                    return 0;
                                case StageQuality.MEDIUM:
                                    return 1;
                                case StageQuality.HIGH:
                                    return 2;
                                case StageQuality.BEST:
                                    return 3;
                                case StageQuality.HIGH_8X8:
                                    return 4;
                                case StageQuality.HIGH_8X8_LINEAR:
                                    return 5;
                                case StageQuality.HIGH_16X16:
                                    return 6;
                                case StageQuality.HIGH_16X16_LINEAR:
                                    return 7;
                                default:
                                    return -1;
                            }
                        };
                        StageQuality.classInitializer = null;
                        StageQuality.initializer = null;
                        StageQuality.classSymbols = null;
                        StageQuality.instanceSymbols = null;
                        StageQuality.LOW = "low";
                        StageQuality.MEDIUM = "medium";
                        StageQuality.HIGH = "high";
                        StageQuality.BEST = "best";
                        StageQuality.HIGH_8X8 = "8x8";
                        StageQuality.HIGH_8X8_LINEAR = "8x8linear";
                        StageQuality.HIGH_16X16 = "16x16";
                        StageQuality.HIGH_16X16_LINEAR = "16x16linear";
                        return StageQuality;
                    })(AS.ASNative);
                    display.StageQuality = StageQuality;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageScaleMode = (function (_super) {
                        __extends(StageScaleMode, _super);
                        function StageScaleMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.StageScaleMode");
                        }
                        StageScaleMode.fromNumber = function (n) {
                            switch (n) {
                                case 0 /* ShowAll */:
                                    return StageScaleMode.SHOW_ALL;
                                case 1 /* ExactFit */:
                                    return StageScaleMode.EXACT_FIT;
                                case 2 /* NoBorder */:
                                    return StageScaleMode.NO_BORDER;
                                case 4 /* NoScale */:
                                    return StageScaleMode.NO_SCALE;
                                default:
                                    return null;
                            }
                        };
                        StageScaleMode.toNumber = function (value) {
                            switch (value.toLowerCase()) {
                                case StageScaleMode.SHOW_ALL_LOWERCASE:
                                    return 0 /* ShowAll */;
                                case StageScaleMode.EXACT_FIT_LOWERCASE:
                                    return 1 /* ExactFit */;
                                case StageScaleMode.NO_BORDER_LOWERCASE:
                                    return 2 /* NoBorder */;
                                case StageScaleMode.NO_SCALE_LOWERCASE:
                                    return 4 /* NoScale */;
                                default:
                                    return -1;
                            }
                        };
                        StageScaleMode.classInitializer = null;
                        StageScaleMode.initializer = null;
                        StageScaleMode.classSymbols = null;
                        StageScaleMode.instanceSymbols = null;
                        StageScaleMode.SHOW_ALL = "showAll";
                        StageScaleMode.EXACT_FIT = "exactFit";
                        StageScaleMode.NO_BORDER = "noBorder";
                        StageScaleMode.NO_SCALE = "noScale";
                        StageScaleMode.SHOW_ALL_LOWERCASE = "showall";
                        StageScaleMode.EXACT_FIT_LOWERCASE = "exactfit";
                        StageScaleMode.NO_BORDER_LOWERCASE = "noborder";
                        StageScaleMode.NO_SCALE_LOWERCASE = "noscale";
                        return StageScaleMode;
                    })(AS.ASNative);
                    display.StageScaleMode = StageScaleMode;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TriangleCulling = (function (_super) {
                        __extends(TriangleCulling, _super);
                        function TriangleCulling() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.TriangleCulling");
                        }
                        TriangleCulling.classInitializer = null;
                        TriangleCulling.initializer = null;
                        TriangleCulling.classSymbols = null;
                        TriangleCulling.instanceSymbols = null;
                        TriangleCulling.NONE = "none";
                        TriangleCulling.POSITIVE = "positive";
                        TriangleCulling.NEGATIVE = "negative";
                        return TriangleCulling;
                    })(AS.ASNative);
                    display.TriangleCulling = TriangleCulling;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var AVM1Movie = (function (_super) {
                        __extends(AVM1Movie, _super);
                        function AVM1Movie(content) {
                            false && _super.call(this);
                            flash.display.DisplayObject.instanceConstructorNoInitialize.call(this);
                            this._children = [];
                            this._children[0] = this._content = content;
                            content._setParent(this, 0);
                            this._setDirtyFlags(2097152 /* DirtyChildren */);
                            this._invalidateFillAndLineBounds(true, true);
                            display.DisplayObject._advancableInstances.push(this);
                            this._constructed = false;
                        }
                        AVM1Movie.prototype.call = function (functionName) {
                            notImplemented('AVM1Movie#call');
                        };
                        AVM1Movie.prototype.addCallback = function (functionName, closure) {
                            notImplemented('AVM1Movie#call');
                        };
                        AVM1Movie.prototype._addFrame = function (frame) {
                            this._content._addFrame(frame);
                        };
                        AVM1Movie.prototype._initFrame = function (advance) {
                        };
                        AVM1Movie.prototype._constructFrame = function () {
                            if (!this._constructed) {
                                this._constructed = true;
                                display.DisplayObjectContainer.prototype._constructChildren.call(this);
                            }
                            this._content._constructFrame();
                        };
                        AVM1Movie.prototype._enqueueFrameScripts = function () {
                            this._removeFlags(16384 /* ContainsFrameScriptPendingChildren */);
                            this._content._enqueueFrameScripts();
                        };
                        AVM1Movie.prototype._propagateFlagsDown = function (flags) {
                            if (this._hasFlags(flags)) {
                                return;
                            }
                            this._setFlags(flags);
                            this._content._propagateFlagsDown(flags);
                        };
                        AVM1Movie.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            if (testingType === 3 /* Mouse */) {
                                return this._content._containsPoint(globalX, globalY, localX, localY, testingType, objects);
                            }
                            if (testingType !== 0 /* HitTestBounds */ || !this._getContentBounds().contains(localX, localY)) {
                                return 0 /* None */;
                            }
                            return 1 /* Bounds */;
                        };
                        AVM1Movie.prototype._getChildBounds = function (bounds, includeStrokes) {
                            var childBounds = this._content._getContentBounds(includeStrokes).clone();
                            this._getConcatenatedMatrix().transformBounds(childBounds);
                            bounds.unionInPlace(childBounds);
                        };
                        AVM1Movie.classInitializer = null;
                        AVM1Movie.initializer = null;
                        AVM1Movie.classSymbols = null;
                        AVM1Movie.instanceSymbols = null;
                        return AVM1Movie;
                    })(flash.display.DisplayObject);
                    display.AVM1Movie = AVM1Movie;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var errors;
                (function (errors) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var IllegalOperationError = (function (_super) {
                        __extends(IllegalOperationError, _super);
                        function IllegalOperationError(message, id) {
                            if (message === void 0) { message = ""; }
                            if (id === void 0) { id = 0; }
                            message = asCoerceString(message);
                            id = id | 0;
                            false && _super.call(this, undefined, undefined);
                            dummyConstructor("public flash.errors.IllegalOperationError");
                        }
                        IllegalOperationError.classInitializer = null;
                        IllegalOperationError.initializer = null;
                        IllegalOperationError.classSymbols = null;
                        IllegalOperationError.instanceSymbols = null;
                        return IllegalOperationError;
                    })(AS.ASError);
                    errors.IllegalOperationError = IllegalOperationError;
                })(errors = flash.errors || (flash.errors = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var external;
                (function (external) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Telemetry = Shumway.Telemetry;
                    var forEachPublicProperty = Shumway.AVM2.Runtime.forEachPublicProperty;
                    var ExternalInterfaceService = Shumway.ExternalInterfaceService;
                    var ExternalInterface = (function (_super) {
                        __extends(ExternalInterface, _super);
                        function ExternalInterface() {
                            false && _super.call(this);
                            dummyConstructor("public flash.external.ExternalInterface");
                        }
                        ExternalInterface._getAvailable = function () {
                            return ExternalInterfaceService.instance.enabled;
                        };
                        ExternalInterface._initJS = function () {
                            if (ExternalInterface.initialized) {
                                return;
                            }
                            Telemetry.instance.reportTelemetry({ topic: 'feature', feature: 1 /* EXTERNAL_INTERFACE_FEATURE */ });
                            ExternalInterface.initialized = true;
                            ExternalInterfaceService.instance.initJS(ExternalInterface._callIn);
                        };
                        ExternalInterface._callIn = function (functionName, args) {
                            var callback = ExternalInterface.registeredCallbacks[functionName];
                            if (!callback) {
                                return;
                            }
                            return callback(functionName, AS.ASJSON.transformJSValueToAS(args, true));
                        };
                        ExternalInterface._getPropNames = function (obj) {
                            var keys = [];
                            forEachPublicProperty(obj, function (key) {
                                keys.push(key);
                            }, null);
                            return keys;
                        };
                        ExternalInterface._addCallback = function (functionName, closure, hasNullCallback) {
                            if (hasNullCallback) {
                                ExternalInterfaceService.instance.unregisterCallback(functionName);
                                delete ExternalInterface.registeredCallbacks[functionName];
                            }
                            else {
                                ExternalInterfaceService.instance.registerCallback(functionName);
                                ExternalInterface.registeredCallbacks[functionName] = closure;
                            }
                        };
                        ExternalInterface._evalJS = function (expression) {
                            expression = asCoerceString(expression);
                            return ExternalInterfaceService.instance.eval(expression);
                        };
                        ExternalInterface._callOut = function (request) {
                            request = asCoerceString(request);
                            return ExternalInterfaceService.instance.call(request);
                        };
                        Object.defineProperty(ExternalInterface, "available", {
                            get: function () {
                                return ExternalInterface._getAvailable();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ExternalInterface, "objectID", {
                            get: function () {
                                return ExternalInterfaceService.instance.getId();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ExternalInterface, "activeX", {
                            get: function () {
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ExternalInterface.classInitializer = null;
                        ExternalInterface.initializer = null;
                        ExternalInterface.classSymbols = null;
                        ExternalInterface.instanceSymbols = null;
                        ExternalInterface.initialized = false;
                        ExternalInterface.registeredCallbacks = Object.create(null);
                        return ExternalInterface;
                    })(AS.ASNative);
                    external.ExternalInterface = ExternalInterface;
                })(external = flash.external || (flash.external = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var BitmapFilterQuality = (function (_super) {
                        __extends(BitmapFilterQuality, _super);
                        function BitmapFilterQuality() {
                            false && _super.call(this);
                        }
                        BitmapFilterQuality.classInitializer = null;
                        BitmapFilterQuality.initializer = null;
                        BitmapFilterQuality.classSymbols = null;
                        BitmapFilterQuality.instanceSymbols = null;
                        BitmapFilterQuality.LOW = 1;
                        BitmapFilterQuality.MEDIUM = 2;
                        BitmapFilterQuality.HIGH = 3;
                        return BitmapFilterQuality;
                    })(AS.ASNative);
                    filters.BitmapFilterQuality = BitmapFilterQuality;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var BitmapFilterType = (function (_super) {
                        __extends(BitmapFilterType, _super);
                        function BitmapFilterType() {
                            false && _super.call(this);
                        }
                        BitmapFilterType.classInitializer = null;
                        BitmapFilterType.initializer = null;
                        BitmapFilterType.classSymbols = null;
                        BitmapFilterType.instanceSymbols = null;
                        BitmapFilterType.INNER = "inner";
                        BitmapFilterType.OUTER = "outer";
                        BitmapFilterType.FULL = "full";
                        return BitmapFilterType;
                    })(AS.ASNative);
                    filters.BitmapFilterType = BitmapFilterType;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var BitmapFilter = (function (_super) {
                        __extends(BitmapFilter, _super);
                        function BitmapFilter() {
                            false && _super.call(this);
                        }
                        BitmapFilter._updateBlurBounds = function (bounds, blurX, blurY, quality, isBlurFilter) {
                            if (isBlurFilter === void 0) { isBlurFilter = false; }
                            var stepWidth = BitmapFilter.blurFilterStepWidths[quality - 1];
                            if (isBlurFilter) {
                                var stepWidth4 = stepWidth / 4;
                                blurX -= stepWidth4;
                                blurY -= stepWidth4;
                            }
                            var bh = Math.ceil((blurX < 1 ? 1 : blurX) * stepWidth);
                            var bv = Math.ceil((blurY < 1 ? 1 : blurY) * stepWidth);
                            bounds.inflate(bh, bv);
                        };
                        BitmapFilter.prototype._updateFilterBounds = function (bounds) {
                        };
                        BitmapFilter.prototype._serialize = function (message) {
                            message.writeInt(-1);
                        };
                        BitmapFilter.prototype.clone = function () {
                            return null;
                        };
                        BitmapFilter.classInitializer = null;
                        BitmapFilter.initializer = null;
                        BitmapFilter.classSymbols = null;
                        BitmapFilter.instanceSymbols = null;
                        BitmapFilter.EPS = 0.000000001;
                        BitmapFilter.blurFilterStepWidths = [0.5, 1.05, 1.35, 1.55, 1.75, 1.9, 2, 2.1, 2.2, 2.3, 2.5, 3, 3, 3.5, 3.5];
                        return BitmapFilter;
                    })(AS.ASNative);
                    filters.BitmapFilter = BitmapFilter;
                    var GradientArrays = (function () {
                        function GradientArrays() {
                        }
                        GradientArrays.sanitize = function (colors, alphas, ratios) {
                            if (Shumway.isNullOrUndefined(colors) || colors.length === 0) {
                                this.colors = [];
                                this.alphas = [];
                                this.ratios = [];
                            }
                            else {
                                var len;
                                if (Shumway.isNullOrUndefined(ratios)) {
                                    this.colors = this.sanitizeColors(colors);
                                    len = this.colors.length;
                                    this.ratios = this.initArray(len);
                                    if (Shumway.isNullOrUndefined(alphas)) {
                                        this.alphas = this.initArray(len);
                                    }
                                    else {
                                        this.alphas = this.sanitizeAlphas(alphas, len, len, 1);
                                    }
                                }
                                else {
                                    if (ratios.length === 0) {
                                        this.colors = [];
                                        this.alphas = [];
                                        this.ratios = [];
                                    }
                                    else {
                                        len = Math.min(colors.length, ratios.length, 16);
                                        this.colors = this.sanitizeColors(colors, len);
                                        this.ratios = this.sanitizeRatios(ratios, len);
                                        if (Shumway.isNullOrUndefined(alphas)) {
                                            this.alphas = this.initArray(len);
                                        }
                                        else {
                                            this.alphas = this.sanitizeAlphas(alphas, len, len, 1);
                                        }
                                    }
                                }
                            }
                        };
                        GradientArrays.sanitizeColors = function (colors, maxLen) {
                            if (maxLen === void 0) { maxLen = 16; }
                            var arr = [];
                            for (var i = 0, n = Math.min(colors.length, maxLen); i < n; i++) {
                                arr[i] = (colors[i] >>> 0) & 0xffffff;
                            }
                            return arr;
                        };
                        GradientArrays.sanitizeAlphas = function (alphas, maxLen, minLen, value) {
                            if (maxLen === void 0) { maxLen = 16; }
                            if (minLen === void 0) { minLen = 0; }
                            if (value === void 0) { value = 0; }
                            var arr = [];
                            for (var i = 0, n = Math.min(alphas.length, maxLen); i < n; i++) {
                                arr[i] = Shumway.NumberUtilities.clamp(+alphas[i], 0, 1);
                            }
                            while (i < minLen) {
                                arr[i++] = value;
                            }
                            return arr;
                        };
                        GradientArrays.sanitizeRatios = function (ratios, maxLen, minLen, value) {
                            if (maxLen === void 0) { maxLen = 16; }
                            if (minLen === void 0) { minLen = 0; }
                            if (value === void 0) { value = 0; }
                            var arr = [];
                            for (var i = 0, n = Math.min(ratios.length, maxLen); i < n; i++) {
                                arr[i] = Shumway.NumberUtilities.clamp(+ratios[i], 0, 255);
                            }
                            while (i < minLen) {
                                arr[i++] = value;
                            }
                            return arr;
                        };
                        GradientArrays.initArray = function (len, value) {
                            if (value === void 0) { value = 0; }
                            var arr = Array(len);
                            for (var i = 0; i < len; i++) {
                                arr[i] = value;
                            }
                            return arr;
                        };
                        return GradientArrays;
                    })();
                    filters.GradientArrays = GradientArrays;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var assert = Shumway.Debug.assert;
                    var BevelFilter = (function (_super) {
                        __extends(BevelFilter, _super);
                        function BevelFilter(distance, angle, highlightColor, highlightAlpha, shadowColor, shadowAlpha, blurX, blurY, strength, quality, type, knockout) {
                            if (distance === void 0) { distance = 4; }
                            if (angle === void 0) { angle = 45; }
                            if (highlightColor === void 0) { highlightColor = 16777215; }
                            if (highlightAlpha === void 0) { highlightAlpha = 1; }
                            if (shadowColor === void 0) { shadowColor = 0; }
                            if (shadowAlpha === void 0) { shadowAlpha = 1; }
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (strength === void 0) { strength = 1; }
                            if (quality === void 0) { quality = 1; }
                            if (type === void 0) { type = "inner"; }
                            if (knockout === void 0) { knockout = false; }
                            false && _super.call(this);
                            this.distance = distance;
                            this.angle = angle;
                            this.highlightColor = highlightColor;
                            this.highlightAlpha = highlightAlpha;
                            this.shadowColor = shadowColor;
                            this.shadowAlpha = shadowAlpha;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.type = type;
                            this.knockout = knockout;
                        }
                        BevelFilter.FromUntyped = function (obj) {
                            var highlightColor = obj.highlightColor >>> 8;
                            var highlightAlpha = (obj.highlightColor & 0xff) / 0xff;
                            release || assert(obj.colors && obj.colors.length === 1, "colors must be Array of length 1");
                            var shadowColor = obj.colors[0] >>> 8;
                            var shadowAlpha = (obj.colors[0] & 0xff) / 0xff;
                            var type = flash.filters.BitmapFilterType.OUTER;
                            if (!!obj.onTop) {
                                type = flash.filters.BitmapFilterType.FULL;
                            }
                            else if (!!obj.inner) {
                                type = flash.filters.BitmapFilterType.INNER;
                            }
                            var angle = obj.angle * 180 / Math.PI;
                            return new BevelFilter(obj.distance, angle, highlightColor, highlightAlpha, shadowColor, shadowAlpha, obj.blurX, obj.blurY, obj.strength, obj.quality, type, obj.knockout);
                        };
                        BevelFilter.prototype._updateFilterBounds = function (bounds) {
                            if (this.type !== filters.BitmapFilterType.INNER) {
                                filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                                if (this._distance !== 0) {
                                    var a = this._angle * Math.PI / 180;
                                    bounds.x += Math.floor(Math.cos(a) * this._distance);
                                    bounds.y += Math.floor(Math.sin(a) * this._distance);
                                    if (bounds.left > 0) {
                                        bounds.left = 0;
                                    }
                                    if (bounds.top > 0) {
                                        bounds.top = 0;
                                    }
                                }
                            }
                        };
                        Object.defineProperty(BevelFilter.prototype, "distance", {
                            get: function () {
                                return this._distance;
                            },
                            set: function (value) {
                                this._distance = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "angle", {
                            get: function () {
                                return this._angle;
                            },
                            set: function (value) {
                                this._angle = +value % 360;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "highlightColor", {
                            get: function () {
                                return this._highlightColor;
                            },
                            set: function (value) {
                                this._highlightColor = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "highlightAlpha", {
                            get: function () {
                                return this._highlightAlpha;
                            },
                            set: function (value) {
                                this._highlightAlpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "shadowColor", {
                            get: function () {
                                return this._shadowColor;
                            },
                            set: function (value) {
                                this._shadowColor = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "shadowAlpha", {
                            get: function () {
                                return this._shadowAlpha;
                            },
                            set: function (value) {
                                this._shadowAlpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === null) {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                                }
                                else {
                                    if (value === filters.BitmapFilterType.INNER || value === filters.BitmapFilterType.OUTER) {
                                        this._type = value;
                                    }
                                    else {
                                        this._type = filters.BitmapFilterType.FULL;
                                    }
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        BevelFilter.prototype.clone = function () {
                            return new BevelFilter(this._distance, this._angle, this._highlightColor, this._highlightAlpha, this._shadowColor, this._shadowAlpha, this._blurX, this._blurY, this._strength, this._quality, this._type, this._knockout);
                        };
                        BevelFilter.classInitializer = null;
                        BevelFilter.initializer = null;
                        BevelFilter.classSymbols = null;
                        BevelFilter.instanceSymbols = null;
                        return BevelFilter;
                    })(flash.filters.BitmapFilter);
                    filters.BevelFilter = BevelFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var BlurFilter = (function (_super) {
                        __extends(BlurFilter, _super);
                        function BlurFilter(blurX, blurY, quality) {
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (quality === void 0) { quality = 1; }
                            false && _super.call(this);
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.quality = quality;
                        }
                        BlurFilter.FromUntyped = function (obj) {
                            return new BlurFilter(obj.blurX, obj.blurY, obj.quality);
                        };
                        BlurFilter.prototype._updateFilterBounds = function (bounds) {
                            filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality, true);
                        };
                        BlurFilter.prototype._serialize = function (message) {
                            message.ensureAdditionalCapacity(16);
                            message.writeIntUnsafe(1);
                            message.writeFloatUnsafe(this._blurX);
                            message.writeFloatUnsafe(this._blurY);
                            message.writeIntUnsafe(this._quality);
                        };
                        Object.defineProperty(BlurFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BlurFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BlurFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        BlurFilter.prototype.clone = function () {
                            return new BlurFilter(this._blurX, this._blurY, this._quality);
                        };
                        BlurFilter.classInitializer = null;
                        BlurFilter.initializer = null;
                        BlurFilter.classSymbols = null;
                        BlurFilter.instanceSymbols = null;
                        return BlurFilter;
                    })(flash.filters.BitmapFilter);
                    filters.BlurFilter = BlurFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var ColorMatrixFilter = (function (_super) {
                        __extends(ColorMatrixFilter, _super);
                        function ColorMatrixFilter(matrix) {
                            if (matrix === void 0) { matrix = null; }
                            false && _super.call(this);
                            if (matrix) {
                                this.matrix = matrix;
                            }
                            else {
                                this._matrix = [
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0
                                ];
                            }
                        }
                        ColorMatrixFilter.FromUntyped = function (obj) {
                            return new ColorMatrixFilter(obj.matrix);
                        };
                        ColorMatrixFilter.prototype._serialize = function (message) {
                            var matrix = this._matrix;
                            message.ensureAdditionalCapacity((matrix.length + 1) * 4);
                            message.writeIntUnsafe(6);
                            for (var i = 0; i < matrix.length; i++) {
                                message.writeFloatUnsafe(matrix[i]);
                            }
                        };
                        Object.defineProperty(ColorMatrixFilter.prototype, "matrix", {
                            get: function () {
                                return this._matrix.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    var matrix = [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                    ];
                                    for (var i = 0, n = Math.min(value.length, 20); i < n; i++) {
                                        matrix[i] = Shumway.toNumber(value[i]);
                                    }
                                    this._matrix = matrix;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "matrix");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ColorMatrixFilter.prototype.clone = function () {
                            return new ColorMatrixFilter(this.matrix);
                        };
                        ColorMatrixFilter.classInitializer = null;
                        ColorMatrixFilter.initializer = null;
                        ColorMatrixFilter.classSymbols = null;
                        ColorMatrixFilter.instanceSymbols = null;
                        return ColorMatrixFilter;
                    })(flash.filters.BitmapFilter);
                    filters.ColorMatrixFilter = ColorMatrixFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var ConvolutionFilter = (function (_super) {
                        __extends(ConvolutionFilter, _super);
                        function ConvolutionFilter(matrixX, matrixY, matrix, divisor, bias, preserveAlpha, clamp, color, alpha) {
                            if (matrixX === void 0) { matrixX = 0; }
                            if (matrixY === void 0) { matrixY = 0; }
                            if (matrix === void 0) { matrix = null; }
                            if (divisor === void 0) { divisor = 1; }
                            if (bias === void 0) { bias = 0; }
                            if (preserveAlpha === void 0) { preserveAlpha = true; }
                            if (clamp === void 0) { clamp = true; }
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 0; }
                            false && _super.call(this);
                            this.matrixX = matrixX;
                            this.matrixY = matrixY;
                            if (matrix) {
                                this.matrix = matrix;
                            }
                            else {
                                this._matrix = this._expandArray([], this._matrixX * this._matrixY);
                            }
                            this.divisor = divisor;
                            this.bias = bias;
                            this.preserveAlpha = preserveAlpha;
                            this.clamp = clamp;
                            this.color = color;
                            this.alpha = alpha;
                        }
                        ConvolutionFilter.FromUntyped = function (obj) {
                            return new ConvolutionFilter(obj.matrixX, obj.matrixY, obj.matrix, obj.divisor, obj.bias, obj.preserveAlpha, obj.clamp, obj.color >>> 8, (obj.color & 0xff) / 0xff);
                        };
                        ConvolutionFilter.prototype._expandArray = function (a, newLen, value) {
                            if (value === void 0) { value = 0; }
                            if (a) {
                                var i = a.length;
                                while (i < newLen) {
                                    a[i++] = 0;
                                }
                            }
                            return a;
                        };
                        Object.defineProperty(ConvolutionFilter.prototype, "matrix", {
                            get: function () {
                                return this._matrix.slice(0, this._matrixX * this._matrixY);
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    var actualLen = this._matrixX * this._matrixY;
                                    var minLen = Math.min(value.length, actualLen);
                                    var matrix = Array(minLen);
                                    for (var i = 0; i < minLen; i++) {
                                        matrix[i] = Shumway.toNumber(value[i]);
                                    }
                                    this._expandArray(matrix, actualLen);
                                    this._matrix = matrix;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "matrix");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "matrixX", {
                            get: function () {
                                return this._matrixX;
                            },
                            set: function (value) {
                                var mx = Shumway.NumberUtilities.clamp(+value, 0, 15) | 0;
                                if (this._matrixX !== mx) {
                                    this._matrixX = mx;
                                    this._expandArray(this._matrix, mx * this._matrixY);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "matrixY", {
                            get: function () {
                                return this._matrixY;
                            },
                            set: function (value) {
                                var my = Shumway.NumberUtilities.clamp(+value, 0, 15) | 0;
                                if (this._matrixY !== my) {
                                    this._matrixY = my;
                                    this._expandArray(this._matrix, my * this._matrixX);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "divisor", {
                            get: function () {
                                return this._divisor;
                            },
                            set: function (value) {
                                this._divisor = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "bias", {
                            get: function () {
                                return this._bias;
                            },
                            set: function (value) {
                                this._bias = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "preserveAlpha", {
                            get: function () {
                                return this._preserveAlpha;
                            },
                            set: function (value) {
                                this._preserveAlpha = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "clamp", {
                            get: function () {
                                return this._clamp;
                            },
                            set: function (value) {
                                this._clamp = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                this._color = value >>> 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "alpha", {
                            get: function () {
                                return this._alpha;
                            },
                            set: function (value) {
                                this._alpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ConvolutionFilter.prototype.clone = function () {
                            return new ConvolutionFilter(this._matrixX, this._matrixY, this.matrix, this._divisor, this._bias, this._preserveAlpha, this._clamp, this._color, this._alpha);
                        };
                        ConvolutionFilter.classInitializer = null;
                        ConvolutionFilter.initializer = null;
                        ConvolutionFilter.classSymbols = null;
                        ConvolutionFilter.instanceSymbols = null;
                        return ConvolutionFilter;
                    })(flash.filters.BitmapFilter);
                    filters.ConvolutionFilter = ConvolutionFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var DisplacementMapFilterMode = (function (_super) {
                        __extends(DisplacementMapFilterMode, _super);
                        function DisplacementMapFilterMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.filters.DisplacementMapFilterMode");
                        }
                        DisplacementMapFilterMode.classInitializer = null;
                        DisplacementMapFilterMode.initializer = null;
                        DisplacementMapFilterMode.classSymbols = null;
                        DisplacementMapFilterMode.instanceSymbols = null;
                        DisplacementMapFilterMode.WRAP = "wrap";
                        DisplacementMapFilterMode.CLAMP = "clamp";
                        DisplacementMapFilterMode.IGNORE = "ignore";
                        DisplacementMapFilterMode.COLOR = "color";
                        return DisplacementMapFilterMode;
                    })(AS.ASNative);
                    filters.DisplacementMapFilterMode = DisplacementMapFilterMode;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var DisplacementMapFilter = (function (_super) {
                        __extends(DisplacementMapFilter, _super);
                        function DisplacementMapFilter(mapBitmap, mapPoint, componentX, componentY, scaleX, scaleY, mode, color, alpha) {
                            if (mapBitmap === void 0) { mapBitmap = null; }
                            if (mapPoint === void 0) { mapPoint = null; }
                            if (componentX === void 0) { componentX = 0; }
                            if (componentY === void 0) { componentY = 0; }
                            if (scaleX === void 0) { scaleX = 0; }
                            if (scaleY === void 0) { scaleY = 0; }
                            if (mode === void 0) { mode = "wrap"; }
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 0; }
                            false && _super.call(this);
                            this.mapBitmap = mapBitmap;
                            this.mapPoint = mapPoint;
                            this.componentX = componentX;
                            this.componentY = componentY;
                            this.scaleX = scaleX;
                            this.scaleY = scaleY;
                            this.mode = mode;
                            this.color = color;
                            this.alpha = alpha;
                        }
                        DisplacementMapFilter.FromUntyped = function (obj) {
                            return new DisplacementMapFilter(obj.mapBitmap, obj.mapPoint, obj.componentX, obj.componentY, obj.scaleX, obj.scaleY, obj.mode, obj.color, obj.alpha);
                        };
                        Object.defineProperty(DisplacementMapFilter.prototype, "mapBitmap", {
                            get: function () {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::get mapBitmap");
                                return this._mapBitmap;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set mapBitmap");
                                this._mapBitmap = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "mapPoint", {
                            get: function () {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::get mapPoint");
                                return this._mapPoint;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set mapPoint");
                                this._mapPoint = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "componentX", {
                            get: function () {
                                return this._componentX;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set componentX");
                                this._componentX = value >>> 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "componentY", {
                            get: function () {
                                return this._componentY;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set componentY");
                                this._componentY = value >>> 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "scaleX", {
                            get: function () {
                                return this._scaleX;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set scaleX");
                                this._scaleX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "scaleY", {
                            get: function () {
                                return this._scaleY;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set scaleY");
                                this._scaleY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "mode", {
                            get: function () {
                                return this._mode;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set mode");
                                this._mode = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set color");
                                this._color = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "alpha", {
                            get: function () {
                                return this._alpha;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set alpha");
                                this._alpha = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplacementMapFilter.prototype.clone = function () {
                            return new DisplacementMapFilter(this._mapBitmap, this._mapPoint, this._componentX, this._componentY, this._scaleX, this._scaleY, this._mode, this._color, this._alpha);
                        };
                        DisplacementMapFilter.classInitializer = null;
                        DisplacementMapFilter.initializer = null;
                        DisplacementMapFilter.classSymbols = null;
                        DisplacementMapFilter.instanceSymbols = null;
                        return DisplacementMapFilter;
                    })(flash.filters.BitmapFilter);
                    filters.DisplacementMapFilter = DisplacementMapFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var assert = Shumway.Debug.assert;
                    var DropShadowFilter = (function (_super) {
                        __extends(DropShadowFilter, _super);
                        function DropShadowFilter(distance, angle, color, alpha, blurX, blurY, strength, quality, inner, knockout, hideObject) {
                            if (distance === void 0) { distance = 4; }
                            if (angle === void 0) { angle = 45; }
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 1; }
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (strength === void 0) { strength = 1; }
                            if (quality === void 0) { quality = 1; }
                            if (inner === void 0) { inner = false; }
                            if (knockout === void 0) { knockout = false; }
                            if (hideObject === void 0) { hideObject = false; }
                            false && _super.call(this);
                            this.distance = distance;
                            this.angle = angle;
                            this.color = color;
                            this.alpha = alpha;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.inner = inner;
                            this.knockout = knockout;
                            this.hideObject = hideObject;
                        }
                        DropShadowFilter.FromUntyped = function (obj) {
                            release || assert(obj.colors && obj.colors.length === 1, "colors must be Array of length 1");
                            var color = obj.colors[0] >>> 8;
                            var alpha = (obj.colors[0] & 0xff) / 0xff;
                            var angle = obj.angle * 180 / Math.PI;
                            var hideObject = !obj.compositeSource;
                            return new DropShadowFilter(obj.distance, angle, color, alpha, obj.blurX, obj.blurY, obj.strength, obj.quality, obj.inner, obj.knockout, hideObject);
                        };
                        DropShadowFilter.prototype._updateFilterBounds = function (bounds) {
                            if (!this.inner) {
                                filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                                if (this._distance !== 0) {
                                    var a = this._angle * Math.PI / 180;
                                    bounds.x += Math.floor(Math.cos(a) * this._distance);
                                    bounds.y += Math.floor(Math.sin(a) * this._distance);
                                    if (bounds.left > 0) {
                                        bounds.left = 0;
                                    }
                                    if (bounds.top > 0) {
                                        bounds.top = 0;
                                    }
                                }
                            }
                        };
                        Object.defineProperty(DropShadowFilter.prototype, "distance", {
                            get: function () {
                                return this._distance;
                            },
                            set: function (value) {
                                this._distance = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "angle", {
                            get: function () {
                                return this._angle;
                            },
                            set: function (value) {
                                this._angle = +value % 360;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                this._color = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "alpha", {
                            get: function () {
                                return this._alpha;
                            },
                            set: function (value) {
                                this._alpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "hideObject", {
                            get: function () {
                                return this._hideObject;
                            },
                            set: function (value) {
                                this._hideObject = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "inner", {
                            get: function () {
                                return this._inner;
                            },
                            set: function (value) {
                                this._inner = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DropShadowFilter.prototype.clone = function () {
                            return new DropShadowFilter(this._distance, this._angle, this._color, this._alpha, this._blurX, this._blurY, this._strength, this._quality, this._inner, this._knockout, this._hideObject);
                        };
                        DropShadowFilter.classInitializer = null;
                        DropShadowFilter.initializer = null;
                        DropShadowFilter.classSymbols = null;
                        DropShadowFilter.instanceSymbols = null;
                        return DropShadowFilter;
                    })(flash.filters.BitmapFilter);
                    filters.DropShadowFilter = DropShadowFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var assert = Shumway.Debug.assert;
                    var GlowFilter = (function (_super) {
                        __extends(GlowFilter, _super);
                        function GlowFilter(color, alpha, blurX, blurY, strength, quality, inner, knockout) {
                            if (color === void 0) { color = 16711680; }
                            if (alpha === void 0) { alpha = 1; }
                            if (blurX === void 0) { blurX = 6; }
                            if (blurY === void 0) { blurY = 6; }
                            if (strength === void 0) { strength = 2; }
                            if (quality === void 0) { quality = 1; }
                            if (inner === void 0) { inner = false; }
                            if (knockout === void 0) { knockout = false; }
                            false && _super.call(this);
                            this.color = color;
                            this.alpha = alpha;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.inner = inner;
                            this.knockout = knockout;
                        }
                        GlowFilter.FromUntyped = function (obj) {
                            release || assert(obj.colors && obj.colors.length === 1, "colors must be Array of length 1");
                            var color = obj.colors[0] >>> 8;
                            var alpha = (obj.colors[0] & 0xff) / 0xff;
                            return new GlowFilter(color, alpha, obj.blurX, obj.blurY, obj.strength, obj.quality, obj.inner, obj.knockout);
                        };
                        GlowFilter.prototype._updateFilterBounds = function (bounds) {
                            filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                        };
                        Object.defineProperty(GlowFilter.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                this._color = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "alpha", {
                            get: function () {
                                return this._alpha;
                            },
                            set: function (value) {
                                this._alpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "inner", {
                            get: function () {
                                return this._inner;
                            },
                            set: function (value) {
                                this._inner = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GlowFilter.prototype.clone = function () {
                            return new GlowFilter(this._color, this._alpha, this._blurX, this._blurY, this._strength, this._quality, this._inner, this._knockout);
                        };
                        GlowFilter.classInitializer = null;
                        GlowFilter.initializer = null;
                        GlowFilter.classSymbols = null;
                        GlowFilter.instanceSymbols = null;
                        return GlowFilter;
                    })(flash.filters.BitmapFilter);
                    filters.GlowFilter = GlowFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GradientBevelFilter = (function (_super) {
                        __extends(GradientBevelFilter, _super);
                        function GradientBevelFilter(distance, angle, colors, alphas, ratios, blurX, blurY, strength, quality, type, knockout) {
                            if (distance === void 0) { distance = 4; }
                            if (angle === void 0) { angle = 45; }
                            if (colors === void 0) { colors = null; }
                            if (alphas === void 0) { alphas = null; }
                            if (ratios === void 0) { ratios = null; }
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (strength === void 0) { strength = 1; }
                            if (quality === void 0) { quality = 1; }
                            if (type === void 0) { type = "inner"; }
                            if (knockout === void 0) { knockout = false; }
                            false && _super.call(this);
                            this.distance = distance;
                            this.angle = angle;
                            filters.GradientArrays.sanitize(colors, alphas, ratios);
                            this._colors = filters.GradientArrays.colors;
                            this._alphas = filters.GradientArrays.alphas;
                            this._ratios = filters.GradientArrays.ratios;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.type = type;
                            this.knockout = knockout;
                        }
                        GradientBevelFilter.FromUntyped = function (obj) {
                            var colors = [];
                            var alphas = [];
                            for (var i = 0; i < obj.colors.length; i++) {
                                var color = obj.colors[i];
                                colors.push(color >>> 8);
                                alphas.push(color & 0xff) / 0xff;
                            }
                            var type = flash.filters.BitmapFilterType.OUTER;
                            if (!!obj.onTop) {
                                type = flash.filters.BitmapFilterType.FULL;
                            }
                            else if (!!obj.inner) {
                                type = flash.filters.BitmapFilterType.INNER;
                            }
                            var angle = obj.angle * 180 / Math.PI;
                            return new GradientBevelFilter(obj.distance, angle, colors, alphas, obj.ratios, obj.blurX, obj.blurY, obj.strength, obj.quality, type, obj.knockout);
                        };
                        GradientBevelFilter.prototype._updateFilterBounds = function (bounds) {
                            if (this.type !== filters.BitmapFilterType.INNER) {
                                filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                                if (this._distance !== 0) {
                                    var a = this._angle * Math.PI / 180;
                                    bounds.x += Math.floor(Math.cos(a) * this._distance);
                                    bounds.y += Math.floor(Math.sin(a) * this._distance);
                                    if (bounds.left > 0) {
                                        bounds.left = 0;
                                    }
                                    if (bounds.top > 0) {
                                        bounds.top = 0;
                                    }
                                }
                            }
                        };
                        Object.defineProperty(GradientBevelFilter.prototype, "distance", {
                            get: function () {
                                return this._distance;
                            },
                            set: function (value) {
                                this._distance = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "angle", {
                            get: function () {
                                return this._angle;
                            },
                            set: function (value) {
                                this._angle = +value % 360;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "colors", {
                            get: function () {
                                return this._colors.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    this._colors = filters.GradientArrays.sanitizeColors(value);
                                    var len = this._colors.length;
                                    this._alphas = filters.GradientArrays.sanitizeAlphas(this._alphas, len, len);
                                    this._ratios = filters.GradientArrays.sanitizeRatios(this._ratios, len, len);
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "colors");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "alphas", {
                            get: function () {
                                return this._alphas.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    filters.GradientArrays.sanitize(this._colors, value, this._ratios);
                                    this._colors = filters.GradientArrays.colors;
                                    this._alphas = filters.GradientArrays.alphas;
                                    this._ratios = filters.GradientArrays.ratios;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "alphas");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "ratios", {
                            get: function () {
                                return this._ratios.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    filters.GradientArrays.sanitize(this._colors, this._alphas, value);
                                    this._colors = filters.GradientArrays.colors;
                                    this._alphas = filters.GradientArrays.alphas;
                                    this._ratios = filters.GradientArrays.ratios;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "ratios");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === null) {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                                }
                                else {
                                    if (value === filters.BitmapFilterType.INNER || value === filters.BitmapFilterType.OUTER) {
                                        this._type = value;
                                    }
                                    else {
                                        this._type = filters.BitmapFilterType.FULL;
                                    }
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GradientBevelFilter.prototype.clone = function () {
                            return new GradientBevelFilter(this._distance, this._angle, this._colors, this._alphas, this._ratios, this._blurX, this._blurY, this._strength, this._quality, this._type, this._knockout);
                        };
                        GradientBevelFilter.classInitializer = null;
                        GradientBevelFilter.initializer = null;
                        GradientBevelFilter.classSymbols = null;
                        GradientBevelFilter.instanceSymbols = null;
                        return GradientBevelFilter;
                    })(flash.filters.BitmapFilter);
                    filters.GradientBevelFilter = GradientBevelFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GradientGlowFilter = (function (_super) {
                        __extends(GradientGlowFilter, _super);
                        function GradientGlowFilter(distance, angle, colors, alphas, ratios, blurX, blurY, strength, quality, type, knockout) {
                            if (distance === void 0) { distance = 4; }
                            if (angle === void 0) { angle = 45; }
                            if (colors === void 0) { colors = null; }
                            if (alphas === void 0) { alphas = null; }
                            if (ratios === void 0) { ratios = null; }
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (strength === void 0) { strength = 1; }
                            if (quality === void 0) { quality = 1; }
                            if (type === void 0) { type = "inner"; }
                            if (knockout === void 0) { knockout = false; }
                            false && _super.call(this);
                            this.distance = distance;
                            this.angle = angle;
                            filters.GradientArrays.sanitize(colors, alphas, ratios);
                            this._colors = filters.GradientArrays.colors;
                            this._alphas = filters.GradientArrays.alphas;
                            this._ratios = filters.GradientArrays.ratios;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.type = type;
                            this.knockout = knockout;
                        }
                        GradientGlowFilter.FromUntyped = function (obj) {
                            var colors = [];
                            var alphas = [];
                            for (var i = 0; i < obj.colors.length; i++) {
                                var color = obj.colors[i];
                                colors.push(color >>> 8);
                                alphas.push(color & 0xff) / 0xff;
                            }
                            var type = flash.filters.BitmapFilterType.OUTER;
                            if (!!obj.onTop) {
                                type = flash.filters.BitmapFilterType.FULL;
                            }
                            else if (!!obj.inner) {
                                type = flash.filters.BitmapFilterType.INNER;
                            }
                            var angle = obj.angle * 180 / Math.PI;
                            return new GradientGlowFilter(obj.distance, angle, colors, alphas, obj.ratios, obj.blurX, obj.blurY, obj.strength, obj.quality, type, obj.knockout);
                        };
                        GradientGlowFilter.prototype._updateFilterBounds = function (bounds) {
                            if (this.type !== filters.BitmapFilterType.INNER) {
                                filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                                if (this._distance !== 0) {
                                    var a = this._angle * Math.PI / 180;
                                    bounds.x += Math.floor(Math.cos(a) * this._distance);
                                    bounds.y += Math.floor(Math.sin(a) * this._distance);
                                    if (bounds.left > 0) {
                                        bounds.left = 0;
                                    }
                                    if (bounds.top > 0) {
                                        bounds.top = 0;
                                    }
                                }
                            }
                        };
                        Object.defineProperty(GradientGlowFilter.prototype, "distance", {
                            get: function () {
                                return this._distance;
                            },
                            set: function (value) {
                                this._distance = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "angle", {
                            get: function () {
                                return this._angle;
                            },
                            set: function (value) {
                                this._angle = +value % 360;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "colors", {
                            get: function () {
                                return this._colors.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    this._colors = filters.GradientArrays.sanitizeColors(value);
                                    var len = this._colors.length;
                                    this._alphas = filters.GradientArrays.sanitizeAlphas(this._alphas, len, len);
                                    this._ratios = filters.GradientArrays.sanitizeRatios(this._ratios, len, len);
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "colors");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "alphas", {
                            get: function () {
                                return this._alphas.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    filters.GradientArrays.sanitize(this._colors, value, this._ratios);
                                    this._colors = filters.GradientArrays.colors;
                                    this._alphas = filters.GradientArrays.alphas;
                                    this._ratios = filters.GradientArrays.ratios;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "alphas");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "ratios", {
                            get: function () {
                                return this._ratios.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    filters.GradientArrays.sanitize(this._colors, this._alphas, value);
                                    this._colors = filters.GradientArrays.colors;
                                    this._alphas = filters.GradientArrays.alphas;
                                    this._ratios = filters.GradientArrays.ratios;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "ratios");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === null) {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                                }
                                else {
                                    if (value === filters.BitmapFilterType.INNER || value === filters.BitmapFilterType.OUTER) {
                                        this._type = value;
                                    }
                                    else {
                                        this._type = filters.BitmapFilterType.FULL;
                                    }
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GradientGlowFilter.prototype.clone = function () {
                            return new GradientGlowFilter(this._distance, this._angle, this._colors, this._alphas, this._ratios, this._blurX, this._blurY, this._strength, this._quality, this._type, this._knockout);
                        };
                        GradientGlowFilter.classInitializer = null;
                        GradientGlowFilter.initializer = null;
                        GradientGlowFilter.classSymbols = null;
                        GradientGlowFilter.instanceSymbols = null;
                        return GradientGlowFilter;
                    })(flash.filters.BitmapFilter);
                    filters.GradientGlowFilter = GradientGlowFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var toS16 = Shumway.IntegerUtilities.toS16;
                    var clampS8U8 = Shumway.IntegerUtilities.clampS8U8;
                    var ColorTransform = (function (_super) {
                        __extends(ColorTransform, _super);
                        function ColorTransform(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
                            if (redMultiplier === void 0) { redMultiplier = 1; }
                            if (greenMultiplier === void 0) { greenMultiplier = 1; }
                            if (blueMultiplier === void 0) { blueMultiplier = 1; }
                            if (alphaMultiplier === void 0) { alphaMultiplier = 1; }
                            if (redOffset === void 0) { redOffset = 0; }
                            if (greenOffset === void 0) { greenOffset = 0; }
                            if (blueOffset === void 0) { blueOffset = 0; }
                            if (alphaOffset === void 0) { alphaOffset = 0; }
                            false && _super.call(this);
                            this.redMultiplier = +redMultiplier;
                            this.greenMultiplier = +greenMultiplier;
                            this.blueMultiplier = +blueMultiplier;
                            this.alphaMultiplier = +alphaMultiplier;
                            this.redOffset = +redOffset;
                            this.greenOffset = +greenOffset;
                            this.blueOffset = +blueOffset;
                            this.alphaOffset = +alphaOffset;
                        }
                        Object.defineProperty(ColorTransform.prototype, "native_redMultiplier", {
                            get: function () {
                                return this.redMultiplier;
                            },
                            set: function (redMultiplier) {
                                this.redMultiplier = +redMultiplier;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_greenMultiplier", {
                            get: function () {
                                return this.greenMultiplier;
                            },
                            set: function (greenMultiplier) {
                                this.greenMultiplier = +greenMultiplier;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_blueMultiplier", {
                            get: function () {
                                return this.blueMultiplier;
                            },
                            set: function (blueMultiplier) {
                                this.blueMultiplier = +blueMultiplier;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_alphaMultiplier", {
                            get: function () {
                                return this.alphaMultiplier;
                            },
                            set: function (alphaMultiplier) {
                                this.alphaMultiplier = +alphaMultiplier;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_redOffset", {
                            get: function () {
                                return this.redOffset;
                            },
                            set: function (redOffset) {
                                this.redOffset = +redOffset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_greenOffset", {
                            get: function () {
                                return this.greenOffset;
                            },
                            set: function (greenOffset) {
                                this.greenOffset = +greenOffset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_blueOffset", {
                            get: function () {
                                return this.blueOffset;
                            },
                            set: function (blueOffset) {
                                this.blueOffset = +blueOffset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_alphaOffset", {
                            get: function () {
                                return this.alphaOffset;
                            },
                            set: function (alphaOffset) {
                                this.alphaOffset = +alphaOffset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ColorTransform.prototype.ColorTransform = function (redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
                            if (redMultiplier === void 0) { redMultiplier = 1; }
                            if (greenMultiplier === void 0) { greenMultiplier = 1; }
                            if (blueMultiplier === void 0) { blueMultiplier = 1; }
                            if (alphaMultiplier === void 0) { alphaMultiplier = 1; }
                            if (redOffset === void 0) { redOffset = 0; }
                            if (greenOffset === void 0) { greenOffset = 0; }
                            if (blueOffset === void 0) { blueOffset = 0; }
                            if (alphaOffset === void 0) { alphaOffset = 0; }
                            this.redMultiplier = redMultiplier;
                            this.greenMultiplier = greenMultiplier;
                            this.blueMultiplier = blueMultiplier;
                            this.alphaMultiplier = alphaMultiplier;
                            this.redOffset = redOffset;
                            this.greenOffset = greenOffset;
                            this.blueOffset = blueOffset;
                            this.alphaOffset = alphaOffset;
                        };
                        Object.defineProperty(ColorTransform.prototype, "color", {
                            get: function () {
                                return (this.redOffset << 16) | (this.greenOffset << 8) | this.blueOffset;
                            },
                            set: function (newColor) {
                                this.redOffset = (newColor >> 16) & 0xff;
                                this.greenOffset = (newColor >> 8) & 0xff;
                                this.blueOffset = newColor & 0xff;
                                this.redMultiplier = this.greenMultiplier = this.blueMultiplier = 1;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ColorTransform.prototype.concat = function (second) {
                            this.redMultiplier *= second.redMultiplier;
                            this.greenMultiplier *= second.greenMultiplier;
                            this.blueMultiplier *= second.blueMultiplier;
                            this.alphaMultiplier *= second.alphaMultiplier;
                            this.redOffset += second.redOffset;
                            this.greenOffset += second.greenOffset;
                            this.blueOffset += second.blueOffset;
                            this.alphaOffset += second.alphaOffset;
                        };
                        ColorTransform.prototype.preMultiply = function (second) {
                            this.redOffset += second.redOffset * this.redMultiplier;
                            this.greenOffset += second.greenOffset * this.greenMultiplier;
                            this.blueOffset += second.blueOffset * this.blueMultiplier;
                            this.alphaOffset += second.alphaOffset * this.alphaMultiplier;
                            this.redMultiplier *= second.redMultiplier;
                            this.greenMultiplier *= second.greenMultiplier;
                            this.blueMultiplier *= second.blueMultiplier;
                            this.alphaMultiplier *= second.alphaMultiplier;
                        };
                        ColorTransform.prototype.copyFrom = function (sourceColorTransform) {
                            this.redMultiplier = sourceColorTransform.redMultiplier;
                            this.greenMultiplier = sourceColorTransform.greenMultiplier;
                            this.blueMultiplier = sourceColorTransform.blueMultiplier;
                            this.alphaMultiplier = sourceColorTransform.alphaMultiplier;
                            this.redOffset = sourceColorTransform.redOffset;
                            this.greenOffset = sourceColorTransform.greenOffset;
                            this.blueOffset = sourceColorTransform.blueOffset;
                            this.alphaOffset = sourceColorTransform.alphaOffset;
                        };
                        ColorTransform.prototype.copyFromUntyped = function (object) {
                            this.redMultiplier = object.redMultiplier / 256;
                            this.greenMultiplier = object.greenMultiplier / 256;
                            this.blueMultiplier = object.blueMultiplier / 256;
                            this.alphaMultiplier = object.alphaMultiplier / 256;
                            this.redOffset = object.redOffset;
                            this.greenOffset = object.greenOffset;
                            this.blueOffset = object.blueOffset;
                            this.alphaOffset = object.alphaOffset;
                        };
                        ColorTransform.prototype.setTo = function (redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
                            this.redMultiplier = redMultiplier;
                            this.greenMultiplier = greenMultiplier;
                            this.blueMultiplier = blueMultiplier;
                            this.alphaMultiplier = alphaMultiplier;
                            this.redOffset = redOffset;
                            this.greenOffset = greenOffset;
                            this.blueOffset = blueOffset;
                            this.alphaOffset = alphaOffset;
                        };
                        ColorTransform.prototype.clone = function () {
                            return new ColorTransform(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);
                        };
                        ColorTransform.prototype.convertToFixedPoint = function () {
                            this.redMultiplier = clampS8U8(this.redMultiplier);
                            this.greenMultiplier = clampS8U8(this.greenMultiplier);
                            this.blueMultiplier = clampS8U8(this.blueMultiplier);
                            this.alphaMultiplier = clampS8U8(this.alphaMultiplier);
                            this.redOffset = toS16(this.redOffset);
                            this.greenOffset = toS16(this.greenOffset);
                            this.blueOffset = toS16(this.blueOffset);
                            this.alphaOffset = toS16(this.alphaOffset);
                            return this;
                        };
                        ColorTransform.prototype.toString = function () {
                            return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
                        };
                        ColorTransform.classInitializer = null;
                        ColorTransform.initializer = null;
                        ColorTransform.classSymbols = null;
                        ColorTransform.instanceSymbols = null;
                        ColorTransform.FROZEN_IDENTITY_COLOR_TRANSFORM = Object.freeze(new ColorTransform());
                        ColorTransform.TEMP_COLOR_TRANSFORM = new ColorTransform();
                        return ColorTransform;
                    })(AS.ASNative);
                    geom.ColorTransform = ColorTransform;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Camera = (function (_super) {
                        __extends(Camera, _super);
                        function Camera() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.media.Camera");
                        }
                        Object.defineProperty(Camera.prototype, "names", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get names");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "isSupported", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get isSupported");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Camera.getCamera = function (name) {
                            if (name === void 0) { name = null; }
                            name = asCoerceString(name);
                            notImplemented("public flash.media.Camera::static getCamera");
                            return;
                        };
                        Camera._scanHardware = function () {
                            notImplemented("public flash.media.Camera::static _scanHardware");
                            return;
                        };
                        Object.defineProperty(Camera.prototype, "activityLevel", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get activityLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "bandwidth", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get bandwidth");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "currentFPS", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get currentFPS");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "fps", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get fps");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "height", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get height");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "index", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get index");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "keyFrameInterval", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get keyFrameInterval");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "loopback", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get loopback");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "motionLevel", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get motionLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "motionTimeout", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get motionTimeout");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "muted", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get muted");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "name", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get name");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "position", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get position");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "quality", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get quality");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "width", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get width");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Camera.prototype.setCursor = function (value) {
                            value = !!value;
                            notImplemented("public flash.media.Camera::setCursor");
                            return;
                        };
                        Camera.prototype.setKeyFrameInterval = function (keyFrameInterval) {
                            keyFrameInterval = keyFrameInterval | 0;
                            notImplemented("public flash.media.Camera::setKeyFrameInterval");
                            return;
                        };
                        Camera.prototype.setLoopback = function (compress) {
                            if (compress === void 0) { compress = false; }
                            compress = !!compress;
                            notImplemented("public flash.media.Camera::setLoopback");
                            return;
                        };
                        Camera.prototype.setMode = function (width, height, fps, favorArea) {
                            if (favorArea === void 0) { favorArea = true; }
                            width = width | 0;
                            height = height | 0;
                            fps = +fps;
                            favorArea = !!favorArea;
                            notImplemented("public flash.media.Camera::setMode");
                            return;
                        };
                        Camera.prototype.setMotionLevel = function (motionLevel, timeout) {
                            if (timeout === void 0) { timeout = 2000; }
                            motionLevel = motionLevel | 0;
                            timeout = timeout | 0;
                            notImplemented("public flash.media.Camera::setMotionLevel");
                            return;
                        };
                        Camera.prototype.setQuality = function (bandwidth, quality) {
                            bandwidth = bandwidth | 0;
                            quality = quality | 0;
                            notImplemented("public flash.media.Camera::setQuality");
                            return;
                        };
                        Camera.prototype.drawToBitmapData = function (destination) {
                            destination = destination;
                            notImplemented("public flash.media.Camera::drawToBitmapData");
                            return;
                        };
                        Camera.prototype.copyToByteArray = function (rect, destination) {
                            rect = rect;
                            destination = destination;
                            notImplemented("public flash.media.Camera::copyToByteArray");
                            return;
                        };
                        Camera.prototype.copyToVector = function (rect, destination) {
                            rect = rect;
                            destination = destination;
                            notImplemented("public flash.media.Camera::copyToVector");
                            return;
                        };
                        Camera.classInitializer = null;
                        Camera.initializer = null;
                        Camera.classSymbols = null;
                        Camera.instanceSymbols = null;
                        return Camera;
                    })(flash.events.EventDispatcher);
                    media.Camera = Camera;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ID3Info = (function (_super) {
                        __extends(ID3Info, _super);
                        function ID3Info() {
                            false && _super.call(this);
                            dummyConstructor("public flash.media.ID3Info");
                        }
                        ID3Info.classInitializer = null;
                        ID3Info.initializer = null;
                        ID3Info.classSymbols = null;
                        ID3Info.instanceSymbols = ["songName", "artist", "album", "year", "comment", "genre", "track"];
                        return ID3Info;
                    })(AS.ASNative);
                    media.ID3Info = ID3Info;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Microphone = (function (_super) {
                        __extends(Microphone, _super);
                        function Microphone() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.media.Microphone");
                        }
                        Object.defineProperty(Microphone, "names", {
                            get: function () {
                                somewhatImplemented("public flash.media.Microphone::get names");
                                return [];
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone, "isSupported", {
                            get: function () {
                                somewhatImplemented("public flash.media.Microphone::get isSupported");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Microphone.getMicrophone = function (index) {
                            if (index === void 0) { index = -1; }
                            index = index | 0;
                            notImplemented("public flash.media.Microphone::static getMicrophone");
                            return;
                        };
                        Microphone.getEnhancedMicrophone = function (index) {
                            if (index === void 0) { index = -1; }
                            index = index | 0;
                            notImplemented("public flash.media.Microphone::static getEnhancedMicrophone");
                            return;
                        };
                        Object.defineProperty(Microphone.prototype, "rate", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get rate");
                                return;
                            },
                            set: function (rate) {
                                rate = rate | 0;
                                notImplemented("public flash.media.Microphone::set rate");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "codec", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get codec");
                                return;
                            },
                            set: function (codec) {
                                codec = asCoerceString(codec);
                                notImplemented("public flash.media.Microphone::set codec");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "framesPerPacket", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get framesPerPacket");
                                return;
                            },
                            set: function (frames) {
                                frames = frames | 0;
                                notImplemented("public flash.media.Microphone::set framesPerPacket");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "encodeQuality", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get encodeQuality");
                                return;
                            },
                            set: function (quality) {
                                quality = quality | 0;
                                notImplemented("public flash.media.Microphone::set encodeQuality");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "noiseSuppressionLevel", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get noiseSuppressionLevel");
                                return;
                            },
                            set: function (level) {
                                level = level | 0;
                                notImplemented("public flash.media.Microphone::set noiseSuppressionLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "enableVAD", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get enableVAD");
                                return;
                            },
                            set: function (enable) {
                                enable = !!enable;
                                notImplemented("public flash.media.Microphone::set enableVAD");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "activityLevel", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get activityLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "gain", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get gain");
                                return;
                            },
                            set: function (gain) {
                                gain = +gain;
                                notImplemented("public flash.media.Microphone::set gain");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "index", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get index");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "muted", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get muted");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "name", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get name");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "silenceLevel", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get silenceLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "silenceTimeout", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get silenceTimeout");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "useEchoSuppression", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get useEchoSuppression");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "soundTransform", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get soundTransform");
                                return;
                            },
                            set: function (sndTransform) {
                                sndTransform = sndTransform;
                                notImplemented("public flash.media.Microphone::set soundTransform");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "enhancedOptions", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get enhancedOptions");
                                return;
                            },
                            set: function (options) {
                                options = options;
                                notImplemented("public flash.media.Microphone::set enhancedOptions");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Microphone.prototype.setSilenceLevel = function (silenceLevel, timeout) {
                            if (timeout === void 0) { timeout = -1; }
                            silenceLevel = +silenceLevel;
                            timeout = timeout | 0;
                            notImplemented("public flash.media.Microphone::setSilenceLevel");
                            return;
                        };
                        Microphone.prototype.setUseEchoSuppression = function (useEchoSuppression) {
                            useEchoSuppression = !!useEchoSuppression;
                            notImplemented("public flash.media.Microphone::setUseEchoSuppression");
                            return;
                        };
                        Microphone.prototype.setLoopBack = function (state) {
                            if (state === void 0) { state = true; }
                            state = !!state;
                            notImplemented("public flash.media.Microphone::setLoopBack");
                            return;
                        };
                        Microphone.classInitializer = null;
                        Microphone.initializer = null;
                        Microphone.classSymbols = null;
                        Microphone.instanceSymbols = null;
                        return Microphone;
                    })(flash.events.EventDispatcher);
                    media.Microphone = Microphone;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var Telemetry = Shumway.Telemetry;
                    var Multiname = Shumway.AVM2.ABC.Multiname;
                    function getAudioDescription(soundData, onComplete) {
                        var audioElement = document.createElement('audio');
                        if (!audioElement.canPlayType(soundData.mimeType)) {
                            onComplete({
                                duration: 0
                            });
                            return;
                        }
                        audioElement.preload = 'metadata';
                        var blob = new Blob([soundData.data], { type: soundData.mimeType });
                        audioElement.src = URL.createObjectURL(blob);
                        audioElement.load();
                        audioElement.addEventListener("loadedmetadata", function () {
                            onComplete({
                                duration: this.duration * 1000
                            });
                        });
                    }
                    var SoundData = (function () {
                        function SoundData() {
                        }
                        return SoundData;
                    })();
                    var Sound = (function (_super) {
                        __extends(Sound, _super);
                        function Sound(stream, context) {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._isURLInaccessible = false;
                            this._isBuffering = false;
                            this.load(stream, context);
                        }
                        Object.defineProperty(Sound.prototype, "url", {
                            get: function () {
                                return this._url;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "isURLInaccessible", {
                            get: function () {
                                somewhatImplemented("public flash.media.Sound::get isURLInaccessible");
                                return this._isURLInaccessible;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "length", {
                            get: function () {
                                return this._length;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "isBuffering", {
                            get: function () {
                                somewhatImplemented("public flash.media.Sound::get isBuffering");
                                return this._isBuffering;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "bytesLoaded", {
                            get: function () {
                                return this._bytesLoaded;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "bytesTotal", {
                            get: function () {
                                return this._bytesTotal;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "id3", {
                            get: function () {
                                return this._id3;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Sound.prototype.loadCompressedDataFromByteArray = function (bytes, bytesLength) {
                            bytes = bytes;
                            bytesLength = bytesLength >>> 0;
                            notImplemented("public flash.media.Sound::loadCompressedDataFromByteArray");
                            return;
                        };
                        Sound.prototype.loadPCMFromByteArray = function (bytes, samples, format, stereo, sampleRate) {
                            if (format === void 0) { format = "float"; }
                            if (stereo === void 0) { stereo = true; }
                            if (sampleRate === void 0) { sampleRate = 44100; }
                            bytes = bytes;
                            samples = samples >>> 0;
                            format = asCoerceString(format);
                            stereo = !!stereo;
                            sampleRate = +sampleRate;
                            notImplemented("public flash.media.Sound::loadPCMFromByteArray");
                            return;
                        };
                        Sound.prototype.play = function (startTime, loops, sndTransform) {
                            if (startTime === void 0) { startTime = 0; }
                            if (loops === void 0) { loops = 0; }
                            if (sndTransform === void 0) { sndTransform = null; }
                            startTime = +startTime;
                            loops = loops | 0;
                            var channel = new flash.media.SoundChannel();
                            channel._sound = this;
                            channel._soundTransform = Shumway.isNullOrUndefined(sndTransform) ? new flash.media.SoundTransform() : sndTransform;
                            this._playQueue.push({
                                channel: channel,
                                startTime: startTime
                            });
                            if (AS.disableAudioOption.value) {
                                return channel;
                            }
                            if (this._soundData) {
                                if (!AS.webAudioOption.value && !AS.webAudioMP3Option.value) {
                                    channel._playSoundDataViaAudio(this._soundData, startTime, loops);
                                }
                                else if (!this._soundData.pcm) {
                                    if (this._soundData.mimeType === 'audio/mpeg' && AS.webAudioMP3Option.value) {
                                        Shumway.SWF.MP3DecoderSession.processAll(new Uint8Array(this._soundData.data)).then(function (result) {
                                            this._soundData.pcm = result.data;
                                            this._soundData.end = result.data.length;
                                            channel._playSoundDataViaChannel(this._soundData, startTime, loops);
                                        }.bind(this), function (reason) {
                                            console.warn('Unable to decode MP3 data: ' + reason);
                                        });
                                    }
                                    else {
                                        console.warn('Unable to decode packaged sound data of type: ' + this._soundData.mimeType);
                                    }
                                }
                                else {
                                    channel._playSoundDataViaChannel(this._soundData, startTime, loops);
                                }
                            }
                            return channel;
                        };
                        Sound.prototype.close = function () {
                            somewhatImplemented("public flash.media.Sound::close");
                        };
                        Sound.prototype.extract = function (target, length, startPosition) {
                            if (startPosition === void 0) { startPosition = -1; }
                            target = target;
                            length = +length;
                            startPosition = +startPosition;
                            notImplemented("public flash.media.Sound::extract");
                            return;
                        };
                        Sound.prototype.load = function (request, context) {
                            if (!request) {
                                return;
                            }
                            var checkPolicyFile = context ? context.checkPolicyFile : false;
                            var bufferTime = context ? context.bufferTime : 1000;
                            var _this = this;
                            var stream = this._stream = new flash.net.URLStream();
                            var data = new flash.utils.ByteArray();
                            var dataPosition = 0;
                            var playUsingWebAudio = AS.webAudioOption.value;
                            var mp3DecodingSession = null;
                            var soundData = new SoundData();
                            soundData.completed = false;
                            stream.addEventListener("progress", function (event) {
                                _this._bytesLoaded = event[Multiname.getPublicQualifiedName("bytesLoaded")];
                                _this._bytesTotal = event[Multiname.getPublicQualifiedName("bytesTotal")];
                                if (playUsingWebAudio && !mp3DecodingSession) {
                                    mp3DecodingSession = decodeMP3(soundData, function (duration, final) {
                                        if (_this._length === 0) {
                                            _this._soundData = soundData;
                                            _this._playQueue.forEach(function (item) {
                                                item.channel._playSoundDataViaChannel(soundData, item.startTime);
                                            });
                                        }
                                        _this._length = final ? duration * 1000 : Math.max(duration, mp3DecodingSession.estimateDuration(_this._bytesTotal)) * 1000;
                                    });
                                }
                                var bytesAvailable = stream.bytesAvailable;
                                stream.readBytes(data, dataPosition, bytesAvailable);
                                if (mp3DecodingSession) {
                                    mp3DecodingSession.pushData(new Uint8Array(data._buffer, dataPosition, bytesAvailable));
                                }
                                dataPosition += bytesAvailable;
                                _this.dispatchEvent(event);
                            });
                            stream.addEventListener("complete", function (event) {
                                _this.dispatchEvent(event);
                                soundData.data = data._buffer;
                                soundData.mimeType = 'audio/mpeg';
                                soundData.completed = true;
                                if (!playUsingWebAudio) {
                                    _this._soundData = soundData;
                                    getAudioDescription(soundData, function (description) {
                                        _this._length = description.duration;
                                    });
                                    _this._playQueue.forEach(function (item) {
                                        item.channel._playSoundDataViaAudio(soundData, item.startTime);
                                    });
                                }
                                if (mp3DecodingSession) {
                                    mp3DecodingSession.close();
                                }
                            });
                            stream.load(request);
                        };
                        Sound.classInitializer = null;
                        Sound.initializer = function (symbol) {
                            this._playQueue = [];
                            this._url = null;
                            this._length = 0;
                            this._bytesTotal = 0;
                            this._bytesLoaded = 0;
                            this._id3 = new flash.media.ID3Info();
                            Telemetry.instance.reportTelemetry({ topic: 'feature', feature: 5 /* SOUND_FEATURE */ });
                            if (symbol) {
                                var soundData = new SoundData();
                                soundData.sampleRate = symbol.sampleRate;
                                soundData.channels = symbol.channels;
                                soundData.completed = true;
                                if (symbol.pcm) {
                                    soundData.pcm = symbol.pcm;
                                    soundData.end = symbol.pcm.length;
                                }
                                if (symbol.packaged) {
                                    soundData.data = symbol.packaged.data.buffer;
                                    soundData.mimeType = symbol.packaged.mimeType;
                                }
                                var self = this;
                                getAudioDescription(soundData, function (description) {
                                    self._length = description.duration;
                                });
                                this._soundData = soundData;
                            }
                        };
                        Sound.classSymbols = null;
                        Sound.instanceSymbols = null;
                        return Sound;
                    })(flash.events.EventDispatcher);
                    media.Sound = Sound;
                    var SoundSymbol = (function (_super) {
                        __extends(SoundSymbol, _super);
                        function SoundSymbol(data) {
                            _super.call(this, data, flash.media.Sound);
                        }
                        SoundSymbol.FromData = function (data) {
                            var symbol = new SoundSymbol(data);
                            symbol.channels = data.channels;
                            symbol.sampleRate = data.sampleRate;
                            symbol.pcm = data.pcm;
                            symbol.packaged = data.packaged;
                            return symbol;
                        };
                        return SoundSymbol;
                    })(Shumway.Timeline.Symbol);
                    media.SoundSymbol = SoundSymbol;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var assert = Shumway.Debug.assert;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var error = Shumway.Debug.error;
                    function createAudioChannel(sampleRate, channels) {
                        if (WebAudioChannel.isSupported) {
                            return new WebAudioChannel(sampleRate, channels);
                        }
                        else {
                            error('PCM data playback is not supported by the browser');
                        }
                    }
                    var AudioResampler = (function () {
                        function AudioResampler(sourceRate, targetRate) {
                            this._sourceRate = sourceRate;
                            this._targetRate = targetRate;
                            this._tail = [];
                            this._sourceOffset = 0;
                        }
                        AudioResampler.prototype.getData = function (channelsData, count) {
                            var k = this._sourceRate / this._targetRate;
                            var offset = this._sourceOffset;
                            var needed = Math.ceil((count - 1) * k + offset) + 1;
                            var sourceData = [];
                            for (var channel = 0; channel < channelsData.length; channel++) {
                                sourceData.push(new Float32Array(needed));
                            }
                            var e = { data: sourceData, count: needed };
                            this.ondatarequested(e);
                            for (var channel = 0; channel < channelsData.length; channel++) {
                                var data = channelsData[channel];
                                var source = sourceData[channel];
                                for (var j = 0; j < count; j++) {
                                    var i = j * k + offset;
                                    var i1 = i | 0, i2 = Math.ceil(i) | 0;
                                    var source_i1 = i1 < 0 ? this._tail[channel] : source[i1];
                                    if (i1 === i2) {
                                        data[j] = source_i1;
                                    }
                                    else {
                                        var alpha = i - i1;
                                        data[j] = source_i1 * (1 - alpha) + source[i2] * alpha;
                                    }
                                }
                                this._tail[channel] = source[needed - 1];
                            }
                            this._sourceOffset = ((count - 1) * k + offset) - (needed - 1);
                        };
                        return AudioResampler;
                    })();
                    var WebAudioChannel = (function () {
                        function WebAudioChannel(sampleRate, channels) {
                            var context = WebAudioChannel._cachedContext;
                            if (!context) {
                                context = new AudioContext();
                                WebAudioChannel._cachedContext = context;
                            }
                            this._context = context;
                            this._contextSampleRate = context.sampleRate || 44100;
                            this._channels = channels;
                            this._sampleRate = sampleRate;
                            if (this._contextSampleRate !== sampleRate) {
                                this._resampler = new AudioResampler(sampleRate, this._contextSampleRate);
                                this._resampler.ondatarequested = function (e) {
                                    this.requestData(e.data, e.count);
                                }.bind(this);
                            }
                        }
                        WebAudioChannel.prototype.setVolume = function (value) {
                        };
                        WebAudioChannel.prototype.start = function () {
                            var source = this._context.createScriptProcessor(2048, 0, this._channels);
                            var self = this;
                            source.onaudioprocess = function (e) {
                                var channelsData = [];
                                for (var i = 0; i < self._channels; i++) {
                                    channelsData.push(e.outputBuffer.getChannelData(i));
                                }
                                var count = channelsData[0].length;
                                if (self._resampler) {
                                    self._resampler.getData(channelsData, count);
                                }
                                else {
                                    self.requestData(channelsData, count);
                                }
                            };
                            source.connect(this._context.destination);
                            this._source = source;
                        };
                        WebAudioChannel.prototype.stop = function () {
                            this._source.disconnect(this._context.destination);
                        };
                        WebAudioChannel.prototype.requestData = function (channelsData, count) {
                            var channels = this._channels;
                            var buffer = new Float32Array(count * channels);
                            var e = { data: buffer, count: buffer.length };
                            this.ondatarequested(e);
                            for (var j = 0, p = 0; j < count; j++) {
                                for (var i = 0; i < channels; i++) {
                                    channelsData[i][j] = buffer[p++];
                                }
                            }
                        };
                        WebAudioChannel.isSupported = function () {
                            return typeof AudioContext !== 'undefined';
                        };
                        return WebAudioChannel;
                    })();
                    var SoundChannel = (function (_super) {
                        __extends(SoundChannel, _super);
                        function SoundChannel() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.media.SoundChannel");
                        }
                        Object.defineProperty(SoundChannel.prototype, "position", {
                            get: function () {
                                return this._position;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundChannel.prototype, "soundTransform", {
                            get: function () {
                                return this._soundTransform;
                            },
                            set: function (sndTransform) {
                                somewhatImplemented("public flash.media.SoundChannel::set soundTransform");
                                this._soundTransform = Shumway.isNullOrUndefined(sndTransform) ? new flash.media.SoundTransform() : sndTransform;
                                media.SoundMixer._updateSoundSource(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundChannel.prototype, "leftPeak", {
                            get: function () {
                                return this._leftPeak;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundChannel.prototype, "rightPeak", {
                            get: function () {
                                return this._rightPeak;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundChannel.prototype, "playing", {
                            get: function () {
                                return this._playing;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SoundChannel.prototype.stop = function () {
                            if (this._element) {
                                media.SoundMixer._unregisterSoundSource(this);
                                this._element.loop = false;
                                this._element.pause();
                                this._element.removeAttribute('src');
                                this._playing = false;
                            }
                            if (this._audioChannel) {
                                media.SoundMixer._unregisterSoundSource(this);
                                this._audioChannel.stop();
                                this._playing = false;
                            }
                        };
                        SoundChannel.prototype._playSoundDataViaAudio = function (soundData, startTime, loops) {
                            if (!soundData.mimeType) {
                                return;
                            }
                            media.SoundMixer._registerSoundSource(this);
                            this._position = startTime;
                            var self = this;
                            var lastCurrentTime = 0;
                            var element = document.createElement('audio');
                            if (!element.canPlayType(soundData.mimeType)) {
                                console.error('ERROR: \"' + soundData.mimeType + '\" ' + 'type playback is not supported by the browser');
                                return;
                            }
                            element.preload = 'metadata';
                            element.loop = loops > 0;
                            var blob = new Blob([soundData.data], { type: soundData.mimeType });
                            element.src = URL.createObjectURL(blob);
                            element.addEventListener("loadeddata", function loaded() {
                                element.currentTime = startTime / 1000;
                                element.play();
                            });
                            element.addEventListener("timeupdate", function timeupdate() {
                                var currentTime = element.currentTime;
                                if (loops && lastCurrentTime > currentTime) {
                                    --loops;
                                    if (!loops) {
                                        element.loop = false;
                                    }
                                    if (currentTime < startTime / 1000) {
                                        element.currentTime = startTime / 1000;
                                    }
                                }
                                self._position = (lastCurrentTime = currentTime) * 1000;
                            });
                            element.addEventListener("ended", function ended() {
                                media.SoundMixer._unregisterSoundSource(self);
                                self._element = null;
                                self._playing = false;
                                self.dispatchEvent(new flash.events.Event("soundComplete", false, false));
                            });
                            this._element = element;
                            this._playing = true;
                            media.SoundMixer._updateSoundSource(this);
                        };
                        SoundChannel.prototype._playSoundDataViaChannel = function (soundData, startTime, loops) {
                            release || assert(soundData.pcm, 'no pcm data found');
                            media.SoundMixer._registerSoundSource(this);
                            var self = this;
                            var startPosition = Math.round(startTime / 1000 * soundData.sampleRate) * soundData.channels;
                            var position = startPosition;
                            this._position = startTime;
                            this._audioChannel = createAudioChannel(soundData.sampleRate, soundData.channels);
                            this._audioChannel.ondatarequested = function (e) {
                                var end = soundData.end;
                                if (position >= end && soundData.completed) {
                                    media.SoundMixer._unregisterSoundSource(this);
                                    self._audioChannel.stop();
                                    self._playing = false;
                                    self.dispatchEvent(new flash.events.Event("soundComplete", false, false));
                                    return;
                                }
                                var left = e.count;
                                var data = e.data;
                                var source = soundData.pcm;
                                do {
                                    var count = Math.min(end - position, left);
                                    for (var j = 0; j < count; j++) {
                                        data[j] = source[position++];
                                    }
                                    left -= count;
                                    if (position >= end) {
                                        if (!loops) {
                                            break;
                                        }
                                        loops--;
                                        position = startPosition;
                                    }
                                } while (left > 0);
                                self._position = position / soundData.sampleRate / soundData.channels * 1000;
                            };
                            this._audioChannel.start();
                            this._playing = true;
                            media.SoundMixer._updateSoundSource(this);
                        };
                        SoundChannel.prototype.stopSound = function () {
                            this.stop();
                        };
                        SoundChannel.prototype.updateSoundLevels = function (volume) {
                            if (this._element) {
                                this._element.volume = volume <= 0 ? 0 : volume >= 1.0 ? 1.0 : volume;
                            }
                            if (this._audioChannel) {
                                this._audioChannel.setVolume(volume);
                            }
                        };
                        SoundChannel.classInitializer = null;
                        SoundChannel.initializer = function (symbol) {
                            this._element = null;
                            this._position = 0;
                            this._leftPeak = 0;
                            this._rightPeak = 0;
                            this._pcmData = null;
                            this._soundTransform = new flash.media.SoundTransform();
                            this._playing = false;
                        };
                        SoundChannel.classSymbols = null;
                        SoundChannel.instanceSymbols = null;
                        return SoundChannel;
                    })(flash.events.EventDispatcher);
                    media.SoundChannel = SoundChannel;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SoundLoaderContext = (function (_super) {
                        __extends(SoundLoaderContext, _super);
                        function SoundLoaderContext(bufferTime, checkPolicyFile) {
                            if (bufferTime === void 0) { bufferTime = 1000; }
                            if (checkPolicyFile === void 0) { checkPolicyFile = false; }
                            bufferTime = +bufferTime;
                            checkPolicyFile = !!checkPolicyFile;
                            false && _super.call(this);
                            dummyConstructor("public flash.media.SoundLoaderContext");
                        }
                        SoundLoaderContext.classInitializer = null;
                        SoundLoaderContext.initializer = null;
                        SoundLoaderContext.classSymbols = null;
                        SoundLoaderContext.instanceSymbols = null;
                        return SoundLoaderContext;
                    })(AS.ASNative);
                    media.SoundLoaderContext = SoundLoaderContext;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SoundMixer = (function (_super) {
                        __extends(SoundMixer, _super);
                        function SoundMixer() {
                            false && _super.call(this);
                            dummyConstructor("public flash.media.SoundMixer");
                        }
                        Object.defineProperty(SoundMixer, "bufferTime", {
                            get: function () {
                                notImplemented("public flash.media.SoundMixer::get bufferTime");
                                return SoundMixer._bufferTime;
                            },
                            set: function (bufferTime) {
                                somewhatImplemented("public flash.media.SoundMixer::set bufferTime");
                                SoundMixer._bufferTime = bufferTime | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundMixer, "soundTransform", {
                            get: function () {
                                somewhatImplemented("public flash.media.SoundMixer::get soundTransform");
                                return Shumway.isNullOrUndefined(SoundMixer._soundTransform) ? new flash.media.SoundTransform() : new flash.media.SoundTransform(SoundMixer._soundTransform.volume, SoundMixer._soundTransform.pan);
                            },
                            set: function (sndTransform) {
                                somewhatImplemented("public flash.media.SoundMixer::set soundTransform");
                                SoundMixer._soundTransform = Shumway.isNullOrUndefined(sndTransform) ? new flash.media.SoundTransform() : sndTransform;
                                SoundMixer._updateAllSoundSources();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundMixer, "audioPlaybackMode", {
                            get: function () {
                                notImplemented("public flash.media.SoundMixer::get audioPlaybackMode");
                                return;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                notImplemented("public flash.media.SoundMixer::set audioPlaybackMode");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundMixer, "useSpeakerphoneForVoice", {
                            get: function () {
                                notImplemented("public flash.media.SoundMixer::get useSpeakerphoneForVoice");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.media.SoundMixer::set useSpeakerphoneForVoice");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SoundMixer.stopAll = function () {
                            SoundMixer._registeredSoundSources.forEach(function (channel) {
                                channel.stopSound();
                            });
                            SoundMixer._registeredSoundSources = [];
                        };
                        SoundMixer.computeSpectrum = function (outputArray, FFTMode, stretchFactor) {
                            if (FFTMode === void 0) { FFTMode = false; }
                            if (stretchFactor === void 0) { stretchFactor = 0; }
                            FFTMode = !!FFTMode;
                            stretchFactor = stretchFactor | 0;
                            somewhatImplemented("public flash.media.SoundMixer::static computeSpectrum");
                            var data = new Float32Array(1024);
                            for (var i = 0; i < 1024; i++) {
                                data[i] = Math.random();
                            }
                            outputArray.writeRawBytes(data);
                            outputArray.position = 0;
                        };
                        SoundMixer.areSoundsInaccessible = function () {
                            notImplemented("public flash.media.SoundMixer::static areSoundsInaccessible");
                            return;
                        };
                        SoundMixer._getMasterVolume = function () {
                            return SoundMixer._masterVolume;
                        };
                        SoundMixer._setMasterVolume = function (volume) {
                            volume = +volume;
                            SoundMixer._masterVolume = volume;
                            SoundMixer._updateAllSoundSources();
                        };
                        SoundMixer._registerSoundSource = function (source) {
                            SoundMixer._registeredSoundSources.push(source);
                        };
                        SoundMixer._unregisterSoundSource = function (source) {
                            var index = SoundMixer._registeredSoundSources.indexOf(source);
                            if (index >= 0) {
                                SoundMixer._registeredSoundSources.splice(index, 1);
                            }
                        };
                        SoundMixer._updateSoundSource = function (source) {
                            var volume = source.soundTransform.volume;
                            if (SoundMixer._soundTransform) {
                                volume *= SoundMixer._soundTransform.volume;
                            }
                            volume *= SoundMixer._getMasterVolume();
                            source.updateSoundLevels(volume);
                        };
                        SoundMixer._updateAllSoundSources = function () {
                            SoundMixer._registeredSoundSources.forEach(SoundMixer._updateSoundSource);
                        };
                        SoundMixer.classInitializer = null;
                        SoundMixer.initializer = null;
                        SoundMixer.classSymbols = null;
                        SoundMixer.instanceSymbols = null;
                        SoundMixer._masterVolume = 1;
                        SoundMixer._registeredSoundSources = [];
                        SoundMixer._bufferTime = 0;
                        return SoundMixer;
                    })(AS.ASNative);
                    media.SoundMixer = SoundMixer;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SoundTransform = (function (_super) {
                        __extends(SoundTransform, _super);
                        function SoundTransform(vol, panning) {
                            if (vol === void 0) { vol = 1; }
                            if (panning === void 0) { panning = 0; }
                            vol = +vol;
                            panning = +panning;
                            false && _super.call(this);
                            dummyConstructor("public flash.media.SoundTransform");
                        }
                        Object.defineProperty(SoundTransform.prototype, "volume", {
                            get: function () {
                                return this._volume;
                            },
                            set: function (volume) {
                                volume = +volume;
                                this._volume = volume;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "leftToLeft", {
                            get: function () {
                                return this._leftToLeft;
                            },
                            set: function (leftToLeft) {
                                leftToLeft = +leftToLeft;
                                this._leftToLeft = leftToLeft;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "leftToRight", {
                            get: function () {
                                return this._leftToRight;
                            },
                            set: function (leftToRight) {
                                leftToRight = +leftToRight;
                                this._leftToRight = leftToRight;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "rightToRight", {
                            get: function () {
                                return this._rightToRight;
                            },
                            set: function (rightToRight) {
                                rightToRight = +rightToRight;
                                this._rightToRight = rightToRight;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "rightToLeft", {
                            get: function () {
                                return this._rightToLeft;
                            },
                            set: function (rightToLeft) {
                                rightToLeft = +rightToLeft;
                                this._rightToLeft = rightToLeft;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "pan", {
                            get: function () {
                                if (this._leftToRight === 0 && this._rightToLeft === 0) {
                                    return 1 - this._leftToLeft * this._leftToLeft;
                                }
                                return 0;
                            },
                            set: function (panning) {
                                this.leftToLeft = Math.sqrt(1 - panning);
                                this.leftToRight = 0;
                                this.rightToRight = Math.sqrt(1 + panning);
                                this.rightToLeft = 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SoundTransform.prototype._updateTransform = function () {
                            somewhatImplemented("public flash.media.SoundTransform::_updateTransform");
                        };
                        SoundTransform.classInitializer = null;
                        SoundTransform.initializer = null;
                        SoundTransform.classSymbols = null;
                        SoundTransform.instanceSymbols = null;
                        return SoundTransform;
                    })(AS.ASNative);
                    media.SoundTransform = SoundTransform;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageVideo = (function (_super) {
                        __extends(StageVideo, _super);
                        function StageVideo() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.media.StageVideo");
                        }
                        Object.defineProperty(StageVideo.prototype, "viewPort", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get viewPort");
                                return;
                            },
                            set: function (rect) {
                                rect = rect;
                                notImplemented("public flash.media.StageVideo::set viewPort");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "pan", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get pan");
                                return;
                            },
                            set: function (point) {
                                point = point;
                                notImplemented("public flash.media.StageVideo::set pan");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "zoom", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get zoom");
                                return;
                            },
                            set: function (point) {
                                point = point;
                                notImplemented("public flash.media.StageVideo::set zoom");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "depth", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get depth");
                                return;
                            },
                            set: function (depth) {
                                depth = depth | 0;
                                notImplemented("public flash.media.StageVideo::set depth");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "videoWidth", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get videoWidth");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "videoHeight", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get videoHeight");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "colorSpaces", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get colorSpaces");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        StageVideo.prototype.attachNetStream = function (netStream) {
                            netStream = netStream;
                            notImplemented("public flash.media.StageVideo::attachNetStream");
                            return;
                        };
                        StageVideo.prototype.attachCamera = function (theCamera) {
                            theCamera = theCamera;
                            notImplemented("public flash.media.StageVideo::attachCamera");
                            return;
                        };
                        StageVideo.classInitializer = null;
                        StageVideo.initializer = null;
                        StageVideo.classSymbols = null;
                        StageVideo.instanceSymbols = null;
                        return StageVideo;
                    })(flash.events.EventDispatcher);
                    media.StageVideo = StageVideo;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageVideoAvailability = (function (_super) {
                        __extends(StageVideoAvailability, _super);
                        function StageVideoAvailability() {
                            false && _super.call(this);
                            dummyConstructor("public flash.media.StageVideoAvailability");
                        }
                        StageVideoAvailability.classInitializer = null;
                        StageVideoAvailability.initializer = null;
                        StageVideoAvailability.classSymbols = null;
                        StageVideoAvailability.instanceSymbols = null;
                        StageVideoAvailability.AVAILABLE = "available";
                        StageVideoAvailability.UNAVAILABLE = "unavailable";
                        return StageVideoAvailability;
                    })(AS.ASNative);
                    media.StageVideoAvailability = StageVideoAvailability;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var assert = Shumway.Debug.assert;
                    var Video = (function (_super) {
                        __extends(Video, _super);
                        function Video(width, height) {
                            if (width === void 0) { width = 320; }
                            if (height === void 0) { height = 240; }
                            false && _super.call(this);
                            flash.display.DisplayObject.instanceConstructorNoInitialize.call(this);
                            width |= 0;
                            height |= 0;
                            width = width || 320;
                            height = height || 240;
                            this._setFillAndLineBoundsFromWidthAndHeight(width * 20, height * 20);
                        }
                        Object.defineProperty(Video.prototype, "deblocking", {
                            get: function () {
                                return this._deblocking;
                            },
                            set: function (value) {
                                this._deblocking = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Video.prototype, "smoothing", {
                            get: function () {
                                return this._smoothing;
                            },
                            set: function (value) {
                                this._smoothing = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Video.prototype, "videoWidth", {
                            get: function () {
                                return this._videoWidth;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Video.prototype, "videoHeight", {
                            get: function () {
                                return this._videoHeight;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Video.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            release || assert(this._getContentBounds().contains(localX, localY));
                            return true;
                        };
                        Video.prototype.clear = function () {
                            somewhatImplemented("public flash.media.Video::clear");
                            return;
                        };
                        Video.prototype.attachNetStream = function (netStream) {
                            if (this._netStream === netStream) {
                                return;
                            }
                            if (this._netStream) {
                                this._netStream._videoReferrer = null;
                            }
                            this._netStream = netStream;
                            if (this._netStream) {
                                netStream._videoReferrer = this;
                            }
                            this._setDirtyFlags(33554432 /* DirtyNetStream */);
                        };
                        Video.prototype.attachCamera = function (camera) {
                            notImplemented("public flash.media.Video::attachCamera");
                            return;
                        };
                        Video.classInitializer = null;
                        Video.initializer = null;
                        Video.classSymbols = null;
                        Video.instanceSymbols = null;
                        return Video;
                    })(flash.display.DisplayObject);
                    media.Video = Video;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var VideoStreamSettings = (function (_super) {
                        __extends(VideoStreamSettings, _super);
                        function VideoStreamSettings() {
                            false && _super.call(this);
                            dummyConstructor("public flash.media.VideoStreamSettings");
                        }
                        VideoStreamSettings.classInitializer = null;
                        VideoStreamSettings.initializer = null;
                        VideoStreamSettings.classSymbols = null;
                        VideoStreamSettings.instanceSymbols = null;
                        return VideoStreamSettings;
                    })(AS.ASNative);
                    media.VideoStreamSettings = VideoStreamSettings;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FileFilter = (function (_super) {
                        __extends(FileFilter, _super);
                        function FileFilter(description, extension, macType) {
                            if (macType === void 0) { macType = null; }
                            false && _super.call(this);
                            dummyConstructor("public flash.net.FileFilter");
                        }
                        Object.defineProperty(FileFilter.prototype, "description", {
                            get: function () {
                                return this._description;
                            },
                            set: function (value) {
                                this._description = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(FileFilter.prototype, "extension", {
                            get: function () {
                                return this._extension;
                            },
                            set: function (value) {
                                this._extension = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(FileFilter.prototype, "macType", {
                            get: function () {
                                return this._macType;
                            },
                            set: function (value) {
                                this._macType = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        FileFilter.classInitializer = null;
                        FileFilter.initializer = null;
                        FileFilter.classSymbols = null;
                        FileFilter.instanceSymbols = null;
                        return FileFilter;
                    })(AS.ASNative);
                    net.FileFilter = FileFilter;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var FileLoadingService = Shumway.FileLoadingService;
                    var LocalConnection = (function (_super) {
                        __extends(LocalConnection, _super);
                        function LocalConnection() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.LocalConnection");
                        }
                        LocalConnection.prototype.close = function () {
                            notImplemented("public flash.net.LocalConnection::close");
                            return;
                        };
                        LocalConnection.prototype.connect = function (connectionName) {
                            connectionName = asCoerceString(connectionName);
                            notImplemented("public flash.net.LocalConnection::connect");
                            return;
                        };
                        Object.defineProperty(LocalConnection.prototype, "domain", {
                            get: function () {
                                somewhatImplemented("public flash.net.LocalConnection::get domain");
                                var url = FileLoadingService.instance.resolveUrl('/');
                                var m = /:\/\/(.+?)[:?#\/]/.exec(url);
                                return m && m[1];
                            },
                            enumerable: true,
                            configurable: true
                        });
                        LocalConnection.prototype.send = function (connectionName, methodName) {
                            connectionName = asCoerceString(connectionName);
                            methodName = asCoerceString(methodName);
                            notImplemented("public flash.net.LocalConnection::send");
                            return;
                        };
                        Object.defineProperty(LocalConnection.prototype, "client", {
                            get: function () {
                                notImplemented("public flash.net.LocalConnection::get client");
                                return;
                            },
                            set: function (client) {
                                client = client;
                                notImplemented("public flash.net.LocalConnection::set client");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LocalConnection.prototype, "isPerUser", {
                            get: function () {
                                notImplemented("public flash.net.LocalConnection::get isPerUser");
                                return;
                            },
                            set: function (newValue) {
                                newValue = !!newValue;
                                notImplemented("public flash.net.LocalConnection::set isPerUser");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        LocalConnection.prototype.allowDomain = function () {
                            notImplemented("public flash.net.LocalConnection::allowDomain");
                            return;
                        };
                        LocalConnection.prototype.allowInsecureDomain = function () {
                            notImplemented("public flash.net.LocalConnection::allowInsecureDomain");
                            return;
                        };
                        LocalConnection.classInitializer = null;
                        LocalConnection.initializer = null;
                        LocalConnection.classSymbols = null;
                        LocalConnection.instanceSymbols = null;
                        return LocalConnection;
                    })(flash.events.EventDispatcher);
                    net.LocalConnection = LocalConnection;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var wrapJSObject = Shumway.AVM2.Runtime.wrapJSObject;
                    var Telemetry = Shumway.Telemetry;
                    var events = Shumway.AVM2.AS.flash.events;
                    var NetConnection = (function (_super) {
                        __extends(NetConnection, _super);
                        function NetConnection() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.NetConnection");
                        }
                        Object.defineProperty(NetConnection, "defaultObjectEncoding", {
                            get: function () {
                                return NetConnection._defaultObjectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                NetConnection._defaultObjectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "connected", {
                            get: function () {
                                return this._connected;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "uri", {
                            get: function () {
                                return this._uri;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetConnection.prototype.connect = function (command) {
                            command = asCoerceString(command);
                            somewhatImplemented("public flash.net.NetConnection::connect");
                            this._uri = command;
                            if (!command) {
                                this._connected = true;
                                this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ level: 'status', code: 'NetConnection.Connect.Success' })));
                            }
                            else {
                                var parsedURL = RtmpJs.parseConnectionString(command);
                                if (!parsedURL || !parsedURL.host || (parsedURL.protocol !== 'rtmp' && parsedURL.protocol !== 'rtmpt' && parsedURL.protocol !== 'rtmps')) {
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ level: 'status', code: 'NetConnection.Connect.Failed' })));
                                    return;
                                }
                                var service = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                                var rtmpProps = wrapJSObject({
                                    app: parsedURL.app,
                                    flashver: flash.system.Capabilities.version,
                                    swfUrl: service.swfUrl,
                                    tcUrl: command,
                                    fpad: false,
                                    audioCodecs: 0x0FFF,
                                    videoCodecs: 0x00FF,
                                    videoFunction: 1,
                                    pageUrl: service.pageUrl || service.swfUrl,
                                    objectEncoding: 0
                                });
                                this._protocol = parsedURL.protocol;
                                var secured = parsedURL.protocol === 'rtmps' || (parsedURL.protocol === 'rtmpt' && (parsedURL.port === 443 || parsedURL.port === 8443));
                                this._usingTLS = secured;
                                var rtmpConnection = parsedURL.protocol === 'rtmp' || parsedURL.protocol === 'rtmps' ? new RtmpJs.Browser.RtmpTransport({ host: parsedURL.host, port: parsedURL.port || 1935, ssl: secured }) : new RtmpJs.Browser.RtmptTransport({ host: parsedURL.host, port: parsedURL.port || 80, ssl: secured });
                                this._rtmpConnection = rtmpConnection;
                                this._rtmpCreateStreamCallbacks = [null, null];
                                rtmpConnection.onresponse = function (e) {
                                };
                                rtmpConnection.onevent = function (e) {
                                };
                                rtmpConnection.onconnected = function (e) {
                                    this._connected = true;
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ level: 'status', code: 'NetConnection.Connect.Success' })));
                                }.bind(this);
                                rtmpConnection.onstreamcreated = function (e) {
                                    console.log('#streamcreated: ' + e.streamId);
                                    var callback = this._rtmpCreateStreamCallbacks[e.transactionId];
                                    delete this._rtmpCreateStreamCallbacks[e.transactionId];
                                    callback(e.stream, e.streamId);
                                }.bind(this);
                                rtmpConnection.connect(rtmpProps);
                            }
                        };
                        NetConnection.prototype._createRtmpStream = function (callback) {
                            var transactionId = this._rtmpCreateStreamCallbacks.length;
                            this._rtmpCreateStreamCallbacks[transactionId] = callback;
                            this._rtmpConnection.createStream(transactionId, null);
                        };
                        Object.defineProperty(NetConnection.prototype, "client", {
                            get: function () {
                                return this._client;
                            },
                            set: function (object) {
                                this._client = object;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "objectEncoding", {
                            get: function () {
                                return this._objectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                somewhatImplemented("public flash.net.NetConnection::set objectEncoding");
                                this._objectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "proxyType", {
                            get: function () {
                                return this._proxyType;
                            },
                            set: function (ptype) {
                                ptype = asCoerceString(ptype);
                                somewhatImplemented("public flash.net.NetConnection::set proxyType");
                                this._proxyType = ptype;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "connectedProxyType", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get connectedProxyType");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "usingTLS", {
                            get: function () {
                                return this._usingTLS;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "protocol", {
                            get: function () {
                                return this._protocol;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "maxPeerConnections", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get maxPeerConnections");
                                return;
                            },
                            set: function (maxPeers) {
                                maxPeers = maxPeers >>> 0;
                                notImplemented("public flash.net.NetConnection::set maxPeerConnections");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "nearID", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get nearID");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "farID", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get farID");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "nearNonce", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get nearNonce");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "farNonce", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get farNonce");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "unconnectedPeerStreams", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get unconnectedPeerStreams");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetConnection.prototype.ctor = function () {
                            this._uri = null;
                            this._connected = false;
                            this._client = null;
                            this._proxyType = 'none';
                            this._objectEncoding = NetConnection.defaultObjectEncoding;
                            this._usingTLS = false;
                            this._protocol = null;
                            Telemetry.instance.reportTelemetry({ topic: 'feature', feature: 6 /* NETCONNECTION_FEATURE */ });
                        };
                        NetConnection.prototype.invoke = function (index) {
                            index = index >>> 0;
                            return this._invoke(index, Array.prototype.slice.call(arguments, 1));
                        };
                        NetConnection.prototype.invokeWithArgsArray = function (index, p_arguments) {
                            index = index >>> 0;
                            p_arguments = p_arguments;
                            return this._invoke.call(this, index, p_arguments);
                        };
                        NetConnection.prototype._invoke = function (index, args) {
                            var simulated = false;
                            var result;
                            switch (index) {
                                case 2:
                                    simulated = true;
                                    break;
                            }
                            (simulated ? somewhatImplemented : notImplemented)("private flash.net.NetConnection::_invoke (" + index + ")");
                            return result;
                        };
                        NetConnection.classInitializer = null;
                        NetConnection.initializer = null;
                        NetConnection.classSymbols = null;
                        NetConnection.instanceSymbols = ["close", "addHeader", "call"];
                        NetConnection._defaultObjectEncoding = 3;
                        return NetConnection;
                    })(flash.events.EventDispatcher);
                    net.NetConnection = NetConnection;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (_AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (_net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var wrapJSObject = Shumway.AVM2.Runtime.wrapJSObject;
                    var events = Shumway.AVM2.AS.flash.events;
                    var net = Shumway.AVM2.AS.flash.net;
                    var utils = Shumway.AVM2.AS.flash.utils;
                    var FileLoadingService = Shumway.FileLoadingService;
                    var AVM2 = Shumway.AVM2.Runtime.AVM2;
                    var VideoPlaybackEvent = Shumway.Remoting.VideoPlaybackEvent;
                    var VideoControlEvent = Shumway.Remoting.VideoControlEvent;
                    var NetStream = (function (_super) {
                        __extends(NetStream, _super);
                        function NetStream(connection, peerID) {
                            if (peerID === void 0) { peerID = "connectToFMS"; }
                            false && _super.call(this, undefined);
                            events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._connection = connection;
                            this._peerID = asCoerceString(peerID);
                            this._id = flash.display.DisplayObject.getNextSyncID();
                            this._isDirty = true;
                            this._soundTransform = new flash.media.SoundTransform();
                            this._contentTypeHint = null;
                            this._checkPolicyFile = true;
                            this._videoStream = new VideoStream(this);
                            this._videoStream._onEnsurePlay = function () {
                                this._notifyVideoControl(9 /* EnsurePlaying */, null);
                            }.bind(this);
                            this._resourceName = null;
                            this._metaData = null;
                        }
                        NetStream.prototype.dispose = function () {
                            notImplemented("public flash.net.NetStream::dispose");
                            return;
                        };
                        NetStream.prototype._getVideoStreamURL = function () {
                            return this._videoStream.url;
                        };
                        NetStream.prototype.play = function (url) {
                            flash.media.SoundMixer._registerSoundSource(this);
                            url = asCoerceString(url);
                            var service = AVM2.instance.globals['Shumway.Player.Utils'];
                            service.registerEventListener(this._id, this.processVideoEvent.bind(this));
                            if (this._connection && this._connection.uri) {
                                this._videoStream.playInConnection(this._connection, url);
                            }
                            else if (url === null) {
                                this._videoStream.openInDataGenerationMode();
                            }
                            else {
                                this._videoStream.play(url, this.checkPolicyFile);
                            }
                            this._notifyVideoControl(1 /* Init */, {
                                url: this._videoStream.url
                            });
                        };
                        NetStream.prototype.play2 = function (param) {
                            param = param;
                            notImplemented("public flash.net.NetStream::play2");
                            return;
                        };
                        Object.defineProperty(NetStream.prototype, "info", {
                            get: function () {
                                somewhatImplemented("public flash.net.NetStream::get info");
                                var bufferSeconds = 1;
                                var playedSeconds = Math.ceil(this._invoke(304, null));
                                var audioBytesPerSecond = 32;
                                var videoBytesPerSecond = 200;
                                var dataBytesPerSecond = 1;
                                return new _net.NetStreamInfo(audioBytesPerSecond + videoBytesPerSecond, (audioBytesPerSecond + videoBytesPerSecond + dataBytesPerSecond) * (bufferSeconds + playedSeconds), audioBytesPerSecond + videoBytesPerSecond, audioBytesPerSecond, audioBytesPerSecond * (bufferSeconds + playedSeconds), videoBytesPerSecond, videoBytesPerSecond * (bufferSeconds + playedSeconds), dataBytesPerSecond, dataBytesPerSecond * (bufferSeconds + playedSeconds), (audioBytesPerSecond + videoBytesPerSecond + dataBytesPerSecond) * playedSeconds, 0, audioBytesPerSecond * bufferSeconds, videoBytesPerSecond * bufferSeconds, dataBytesPerSecond * bufferSeconds, bufferSeconds, bufferSeconds, bufferSeconds, 0, 0, 0, this._metaData, null, this._connection.uri, this._resourceName, false);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastInfo", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastInfo");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "soundTransform", {
                            get: function () {
                                return this._soundTransform;
                            },
                            set: function (sndTransform) {
                                this._soundTransform = sndTransform;
                                flash.media.SoundMixer._updateSoundSource(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "checkPolicyFile", {
                            get: function () {
                                return this._checkPolicyFile;
                            },
                            set: function (state) {
                                state = !!state;
                                this._checkPolicyFile = state;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "client", {
                            get: function () {
                                return this._client;
                            },
                            set: function (object) {
                                somewhatImplemented("public flash.net.NetStream::set client");
                                this._client = object;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "objectEncoding", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get objectEncoding");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastPushNeighborLimit", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastPushNeighborLimit");
                                return;
                            },
                            set: function (neighbors) {
                                neighbors = +neighbors;
                                notImplemented("public flash.net.NetStream::set multicastPushNeighborLimit");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastWindowDuration", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastWindowDuration");
                                return;
                            },
                            set: function (seconds) {
                                seconds = +seconds;
                                notImplemented("public flash.net.NetStream::set multicastWindowDuration");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastRelayMarginDuration", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastRelayMarginDuration");
                                return;
                            },
                            set: function (seconds) {
                                seconds = +seconds;
                                notImplemented("public flash.net.NetStream::set multicastRelayMarginDuration");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastAvailabilityUpdatePeriod", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastAvailabilityUpdatePeriod");
                                return;
                            },
                            set: function (seconds) {
                                seconds = +seconds;
                                notImplemented("public flash.net.NetStream::set multicastAvailabilityUpdatePeriod");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastFetchPeriod", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastFetchPeriod");
                                return;
                            },
                            set: function (seconds) {
                                seconds = +seconds;
                                notImplemented("public flash.net.NetStream::set multicastFetchPeriod");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastAvailabilitySendToAll", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastAvailabilitySendToAll");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.net.NetStream::set multicastAvailabilitySendToAll");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "farID", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get farID");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "nearNonce", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get nearNonce");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "farNonce", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get farNonce");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "peerStreams", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get peerStreams");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "audioReliable", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get audioReliable");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set audioReliable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "videoReliable", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get videoReliable");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set videoReliable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "dataReliable", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get dataReliable");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set dataReliable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "audioSampleAccess", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get audioSampleAccess");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set audioSampleAccess");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "videoSampleAccess", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get videoSampleAccess");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set videoSampleAccess");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetStream.prototype.appendBytes = function (bytes) {
                            var chunk = new Uint8Array(bytes._buffer, 0, bytes.length);
                            this._videoStream.appendBytes(chunk);
                        };
                        NetStream.prototype.appendBytesAction = function (netStreamAppendBytesAction) {
                            this._videoStream.appendBytesAction(netStreamAppendBytesAction);
                        };
                        Object.defineProperty(NetStream.prototype, "useHardwareDecoder", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get useHardwareDecoder");
                                return;
                            },
                            set: function (v) {
                                v = !!v;
                                notImplemented("public flash.net.NetStream::set useHardwareDecoder");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "useJitterBuffer", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get useJitterBuffer");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.net.NetStream::set useJitterBuffer");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "videoStreamSettings", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get videoStreamSettings");
                                return;
                            },
                            set: function (settings) {
                                settings = settings;
                                notImplemented("public flash.net.NetStream::set videoStreamSettings");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetStream.prototype.invoke = function (index) {
                            index = index >>> 0;
                            return this._invoke(index, Array.prototype.slice.call(arguments, 1));
                        };
                        NetStream.prototype.invokeWithArgsArray = function (index, p_arguments) {
                            index = index >>> 0;
                            p_arguments = p_arguments;
                            return this._invoke.call(this, index, p_arguments);
                        };
                        Object.defineProperty(NetStream.prototype, "inBufferSeek", {
                            get: function () {
                                return this._inBufferSeek;
                            },
                            set: function (value) {
                                this._inBufferSeek = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetStream.prototype._invoke = function (index, args) {
                            var simulated = false, result;
                            switch (index) {
                                case 4:
                                    this._videoStream.bufferTime = args[0];
                                    simulated = true;
                                    break;
                                case 202:
                                    switch (args[1]) {
                                        case 'pause':
                                            simulated = true;
                                            this._notifyVideoControl(2 /* Pause */, {
                                                paused: !!args[3],
                                                time: args[4] / 1000
                                            });
                                            break;
                                        case 'seek':
                                            simulated = true;
                                            this._notifyVideoControl(3 /* Seek */, {
                                                time: args[3] / 1000
                                            });
                                            break;
                                    }
                                    break;
                                case 300:
                                    result = this._notifyVideoControl(4 /* GetTime */, null);
                                    simulated = true;
                                    break;
                                case 302:
                                    result = this._videoStream.bufferTime;
                                    simulated = true;
                                    break;
                                case 303:
                                    result = this._notifyVideoControl(5 /* GetBufferLength */, null);
                                    simulated = true;
                                    break;
                                case 305:
                                    result = this._notifyVideoControl(7 /* GetBytesLoaded */, null);
                                    simulated = true;
                                    break;
                                case 306:
                                    result = this._notifyVideoControl(8 /* GetBytesTotal */, null);
                                    simulated = true;
                                    break;
                            }
                            (simulated ? somewhatImplemented : notImplemented)("NetStream._invoke (" + index + ")");
                            return result;
                        };
                        NetStream.prototype._notifyVideoControl = function (eventType, data) {
                            var service = AVM2.instance.globals['Shumway.Player.Utils'];
                            return service.notifyVideoControl(this._id, eventType, data);
                        };
                        NetStream.prototype.processVideoEvent = function (eventType, data) {
                            this._videoStream.processVideoPlaybackEvent(eventType, data);
                            switch (eventType) {
                                case 0 /* Initialized */:
                                    flash.media.SoundMixer._updateSoundSource(this);
                                    break;
                                case 2 /* PlayStart */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Play.Start", level: "status" })));
                                    break;
                                case 3 /* PlayStop */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Buffer.Flush", level: "status" })));
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Play.Stop", level: "status" })));
                                    flash.media.SoundMixer._unregisterSoundSource(this);
                                    break;
                                case 5 /* BufferFull */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Buffer.Full", level: "status" })));
                                    break;
                                case 4 /* BufferEmpty */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Buffer.Empty", level: "status" })));
                                    break;
                                case 11 /* Error */:
                                    var code = data.code === 4 ? "NetStream.Play.NoSupportedTrackFound" : data.code === 3 ? "NetStream.Play.FileStructureInvalid" : "NetStream.Play.StreamNotFound";
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: code, level: "error" })));
                                    break;
                                case 6 /* Pause */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Pause.Notify", level: "status" })));
                                    break;
                                case 7 /* Unpause */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Unpause.Notify", level: "status" })));
                                    break;
                                case 8 /* Seeking */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Seek.Notify", level: "status" })));
                                    break;
                                case 9 /* Seeked */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Seek.Complete", level: "status" })));
                                    break;
                                case 1 /* Metadata */:
                                    if (this._client) {
                                        var metadata = {};
                                        metadata.asSetPublicProperty('width', data.videoWidth);
                                        metadata.asSetPublicProperty('height', data.videoHeight);
                                        metadata.asSetPublicProperty('duration', data.duration);
                                        this._client.asCallPublicProperty('onMetaData', [metadata]);
                                    }
                                    break;
                            }
                        };
                        NetStream.prototype.stopSound = function () {
                            this.pause();
                        };
                        NetStream.prototype.updateSoundLevels = function (volume) {
                            this._notifyVideoControl(6 /* SetSoundLevels */, {
                                volume: volume
                            });
                        };
                        NetStream.classInitializer = null;
                        NetStream.initializer = null;
                        NetStream.classSymbols = null;
                        NetStream.instanceSymbols = null;
                        NetStream.DIRECT_CONNECTIONS = "directConnections";
                        NetStream.CONNECT_TO_FMS = "connectToFMS";
                        return NetStream;
                    })(flash.events.EventDispatcher);
                    _net.NetStream = NetStream;
                    var FLV_MIME_TYPE = 'video/x-flv';
                    var MP4_MIME_TYPE = 'video/mp4';
                    var MP3_MIME_TYPE = 'audio/mpeg';
                    function buildMimeType(baseType, codecs) {
                        var mimeType = baseType;
                        if (codecs) {
                            mimeType += ';codecs=\"' + codecs.join(',') + '\"';
                        }
                        return mimeType;
                    }
                    var VideoStreamState;
                    (function (VideoStreamState) {
                        VideoStreamState[VideoStreamState["CLOSED"] = 0] = "CLOSED";
                        VideoStreamState[VideoStreamState["OPENED"] = 1] = "OPENED";
                        VideoStreamState[VideoStreamState["ENDED"] = 2] = "ENDED";
                        VideoStreamState[VideoStreamState["OPENED_DATA_GENERATION"] = 3] = "OPENED_DATA_GENERATION";
                        VideoStreamState[VideoStreamState["ERROR"] = 4] = "ERROR";
                    })(VideoStreamState || (VideoStreamState = {}));
                    var VideoStream = (function () {
                        function VideoStream(netStream) {
                            this._domReady = new Shumway.PromiseWrapper();
                            this._metadataReady = new Shumway.PromiseWrapper();
                            this._started = false;
                            this._buffer = 'empty';
                            this._bufferTime = 0.1;
                            this._url = null;
                            this._mediaSource = null;
                            this._mediaSourceBuffer = null;
                            this._mediaSourceBufferLock = null;
                            this._contentTypeHint = null;
                            this._state = 0 /* CLOSED */;
                            this._head = null;
                            this._netStream = netStream;
                        }
                        Object.defineProperty(VideoStream.prototype, "state", {
                            get: function () {
                                return this._state;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(VideoStream.prototype, "bufferTime", {
                            get: function () {
                                return this._bufferTime;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(VideoStream.prototype, "url", {
                            get: function () {
                                return this._url;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        VideoStream.prototype.play = function (url, checkPolicyFile) {
                            var _this = this;
                            release || assert(this._state === 0 /* CLOSED */);
                            var isMediaSourceEnabled = AS.mediaSourceOption.value;
                            if (isMediaSourceEnabled && typeof MediaSource === 'undefined') {
                                console.warn('MediaSource API is not enabled, falling back to regular playback');
                                isMediaSourceEnabled = false;
                            }
                            var forceMediaSource = false;
                            if (/\.flv($|\?)/i.test(url)) {
                                if (AS.flvOption.value === 'supported') {
                                    forceMediaSource = true;
                                }
                                else if (AS.flvOption.value === 'mock') {
                                    url = 'resource://shumway/web/noflv.mp4';
                                }
                                else {
                                    setTimeout(function () {
                                        _this._netStream.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Play.NoSupportedTrackFound", level: "error" })));
                                    });
                                    return;
                                }
                            }
                            if (!forceMediaSource && !isMediaSourceEnabled) {
                                somewhatImplemented("public flash.net.NetStream::play");
                                this._state = 1 /* OPENED */;
                                this._url = FileLoadingService.instance.resolveUrl(url);
                                return;
                            }
                            this.openInDataGenerationMode();
                            var request = new net.URLRequest(url);
                            request._checkPolicyFile = checkPolicyFile;
                            var stream = new net.URLStream();
                            stream.addEventListener('httpStatus', function (e) {
                                var responseHeaders = e.asGetPublicProperty('responseHeaders');
                                var contentTypeHeader = responseHeaders.filter(function (h) {
                                    return h.asGetPublicProperty('name') === 'Content-Type';
                                })[0];
                                if (contentTypeHeader) {
                                    var hint = contentTypeHeader.asGetPublicProperty('value');
                                    if (hint !== 'application/octet-stream') {
                                    }
                                }
                            }.bind(this));
                            stream.addEventListener('progress', function (e) {
                                var available = stream.bytesAvailable;
                                var bytes = new utils.ByteArray();
                                stream.readBytes(bytes, 0, available);
                                var chunk = new Uint8Array(bytes._buffer, 0, bytes.length);
                                this.appendBytes(chunk);
                            }.bind(this));
                            stream.addEventListener('complete', function (e) {
                                this.appendBytesAction('endSequence');
                            }.bind(this));
                            stream.load(request);
                        };
                        VideoStream.prototype.playInConnection = function (connection, streamPath) {
                            this.openInDataGenerationMode();
                            var self = this;
                            var mux;
                            var mp4 = {
                                packets: 0,
                                init: function (metadata) {
                                    if (!metadata.asGetPublicProperty('audiocodecid') && !metadata.asGetPublicProperty('videocodecid')) {
                                        return;
                                    }
                                    var parsedMetadata = RtmpJs.MP4.parseFLVMetadata(metadata);
                                    mux = new RtmpJs.MP4.MP4Mux(parsedMetadata);
                                    mux.oncodecinfo = function (mediaCodecs) {
                                        this._contentTypeHint = buildMimeType(MP4_MIME_TYPE, mediaCodecs);
                                    };
                                    mux.ondata = function (data) {
                                        self.appendBytes(new Uint8Array(data));
                                    }.bind(this);
                                },
                                packet: function (type, data, timestamp) {
                                    mux.pushPacket(type, new Uint8Array(data), timestamp);
                                },
                                generate: function () {
                                    mux.flush();
                                }
                            };
                            connection._createRtmpStream(function (ns, streamId) {
                                ns.ondata = function (message) {
                                    console.log('#packet (' + message.typeId + '): @' + message.timestamp);
                                    if (message.data.length > 0) {
                                        mp4.packet(message.typeId, message.data, message.timestamp);
                                    }
                                };
                                ns.oncallback = function () {
                                    console.log('#callback');
                                };
                                ns.onscriptdata = function (type, data) {
                                    console.log('#object: ' + type);
                                    if (type === 'onMetaData') {
                                        mp4.init(data);
                                    }
                                };
                                ns.play(streamPath);
                            });
                        };
                        VideoStream.prototype.openInDataGenerationMode = function () {
                            release || assert(this._state === 0 /* CLOSED */);
                            this._state = 3 /* OPENED_DATA_GENERATION */;
                            var mediaSource = new MediaSource();
                            mediaSource.addEventListener('sourceopen', function (e) {
                                this._ensurePlaying();
                            }.bind(this));
                            mediaSource.addEventListener('sourceend', function (e) {
                                this._mediaSource = null;
                            }.bind(this));
                            this._mediaSource = mediaSource;
                            this._url = URL.createObjectURL(mediaSource);
                        };
                        VideoStream.prototype.appendBytes = function (bytes) {
                            release || assert(this._state === 3 /* OPENED_DATA_GENERATION */ || this._state === 1 /* OPENED */);
                            release || assert(this._mediaSource);
                            if (this._decoder) {
                                this._decoder.push(bytes);
                                return;
                            }
                            var cached;
                            var buffer;
                            if (this._head !== null) {
                                cached = this._head.length;
                                buffer = new Uint8Array(cached + bytes.length);
                                buffer.set(bytes, cached);
                            }
                            else {
                                cached = 0;
                                buffer = bytes;
                            }
                            if (!this._decoder) {
                                var contentType = this._detectContentType(buffer);
                                if (contentType === FLV_MIME_TYPE) {
                                    var flvDecoder = new FlvMp4Decoder();
                                    flvDecoder.onHeader = function (contentType) {
                                        this._mediaSourceBuffer = this._mediaSource.addSourceBuffer(contentType);
                                        this._mediaSourceBufferLock = Promise.resolve(undefined);
                                    }.bind(this);
                                    flvDecoder.onData = this._queueData.bind(this);
                                    this._decoder = flvDecoder;
                                }
                                else if (contentType) {
                                    this._decoder = {
                                        onData: this._queueData.bind(this),
                                        onError: function (e) {
                                        },
                                        push: function (bytes) {
                                            this.onData(bytes);
                                        },
                                        close: function () {
                                        }
                                    };
                                    this._mediaSourceBuffer = this._mediaSource.addSourceBuffer(contentType);
                                    this._mediaSourceBufferLock = Promise.resolve(undefined);
                                }
                            }
                            if (this._decoder) {
                                this._decoder.push(buffer);
                                if (cached > 0) {
                                    this._head = null;
                                }
                            }
                            else {
                                if (cached === 0) {
                                    this._head = new Uint8Array(bytes);
                                }
                                else {
                                    this._head = buffer;
                                }
                            }
                        };
                        VideoStream.prototype._queueData = function (bytes) {
                            var buffer = this._mediaSourceBuffer;
                            this._mediaSourceBufferLock = this._mediaSourceBufferLock.then(function () {
                                buffer.appendBuffer(bytes);
                                return new Promise(function (resolve) {
                                    buffer.addEventListener('update', function updateHandler() {
                                        buffer.removeEventListener('update', updateHandler);
                                        resolve();
                                    });
                                });
                            });
                        };
                        VideoStream.prototype.appendBytesAction = function (netStreamAppendBytesAction) {
                            release || assert(this._state === 3 /* OPENED_DATA_GENERATION */ || this._state === 1 /* OPENED */);
                            netStreamAppendBytesAction = asCoerceString(netStreamAppendBytesAction);
                            if (netStreamAppendBytesAction === 'endSequence') {
                                if (!this._decoder) {
                                    throw new Error('Internal appendBytes error');
                                }
                                this._decoder.close();
                                this._mediaSourceBufferLock.then(function () {
                                    if (this._mediaSource) {
                                        this._mediaSource.endOfStream();
                                    }
                                    this.close();
                                }.bind(this));
                            }
                            somewhatImplemented("public flash.net.NetStream::appendBytesAction");
                        };
                        VideoStream.prototype.close = function () {
                            this._state = 0 /* CLOSED */;
                        };
                        VideoStream.prototype._ensurePlaying = function () {
                            if (!this._onEnsurePlay) {
                                return;
                            }
                            this._onEnsurePlay();
                        };
                        VideoStream.prototype._detectContentType = function (bytes) {
                            if (bytes.length < 16) {
                                return null;
                            }
                            if (bytes[0] === 0x46 && bytes[1] === 0x4C && bytes[2] === 0x56 && bytes[3] === 1) {
                                return FLV_MIME_TYPE;
                            }
                            if (bytes[4] === 0x66 && bytes[5] === 0x74 && bytes[6] === 0x79 && bytes[7] === 0x70) {
                                if (this._contentTypeHint && /^video\/mp4;\s*codecs=/.test(this._contentTypeHint)) {
                                    return this._contentTypeHint;
                                }
                                return 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"';
                            }
                            if ((bytes[0] === 0x49 && bytes[1] === 0x44 && bytes[2] === 0x33) || (bytes[0] === 0xFF && (bytes[1] & 0xE0) === 0xE0 && (bytes[1] & 0x1E) !== 0x08)) {
                                return MP3_MIME_TYPE;
                            }
                            return this._contentTypeHint || MP4_MIME_TYPE;
                        };
                        VideoStream.prototype.processVideoPlaybackEvent = function (eventType, data) {
                            switch (eventType) {
                                case 0 /* Initialized */:
                                    this._domReady.resolve(undefined);
                                    break;
                                case 2 /* PlayStart */:
                                    if (this._started) {
                                        break;
                                    }
                                    this._started = true;
                                    break;
                                case 3 /* PlayStop */:
                                    this._started = false;
                                    break;
                                case 5 /* BufferFull */:
                                    this._buffer = 'full';
                                    break;
                                case 10 /* Progress */:
                                    this._buffer = 'progress';
                                    break;
                                case 4 /* BufferEmpty */:
                                    this._buffer = 'empty';
                                    break;
                                case 1 /* Metadata */:
                                    this._metadataReady.resolve({
                                        videoWidth: data.videoWidth,
                                        videoHeight: data.videoHeight
                                    });
                                    break;
                            }
                        };
                        return VideoStream;
                    })();
                    var FlvMp4Decoder = (function () {
                        function FlvMp4Decoder() {
                            this._flvParser = new RtmpJs.FLV.FLVParser();
                            this._flvParser.onHeader = this._onFlvHeader.bind(this);
                            this._flvParser.onTag = this._onFlvTag.bind(this);
                            this._flvParser.onClose = this._onFlvClose.bind(this);
                            this._flvParser.onError = this._onFlvError.bind(this);
                            this._mp4Mux = null;
                        }
                        FlvMp4Decoder.prototype._onFlvHeader = function (header) {
                        };
                        FlvMp4Decoder.prototype._onFlvTag = function (tag) {
                            if (tag.type === 18) {
                                var ba = new flash.utils.ByteArray();
                                ba.writeRawBytes(tag.data);
                                ba.position = 0;
                                var name = Shumway.AVM2.AMF0.read(ba);
                                var value = Shumway.AVM2.AMF0.read(ba);
                                if (name === 'onMetaData') {
                                    var metadata = RtmpJs.MP4.parseFLVMetadata(value);
                                    var mp4Mux = new RtmpJs.MP4.MP4Mux(metadata);
                                    mp4Mux.oncodecinfo = function (codecs) {
                                        this.onHeader(buildMimeType(MP4_MIME_TYPE, codecs));
                                    }.bind(this);
                                    mp4Mux.ondata = function (data) {
                                        this.onData.call(null, data);
                                    }.bind(this);
                                    this._mp4Mux = mp4Mux;
                                }
                                return;
                            }
                            this._mp4Mux.pushPacket(tag.type, new Uint8Array(tag.data), tag.timestamp);
                        };
                        FlvMp4Decoder.prototype._onFlvClose = function () {
                            this._mp4Mux.flush();
                        };
                        FlvMp4Decoder.prototype._onFlvError = function (e) {
                            if (this.onError) {
                                this.onError(e);
                            }
                        };
                        FlvMp4Decoder.prototype.push = function (bytes) {
                            try {
                                this._flvParser.push(bytes);
                            }
                            catch (e) {
                                if (this.onError) {
                                    this.onError(e);
                                }
                            }
                        };
                        FlvMp4Decoder.prototype.close = function () {
                            try {
                                this._flvParser.close();
                            }
                            catch (e) {
                                if (this.onError) {
                                    this.onError(e);
                                }
                            }
                        };
                        return FlvMp4Decoder;
                    })();
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = _AVM2.AS || (_AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var NetStreamInfo = (function (_super) {
                        __extends(NetStreamInfo, _super);
                        function NetStreamInfo(curBPS, byteCount, maxBPS, audioBPS, audioByteCount, videoBPS, videoByteCount, dataBPS, dataByteCount, playbackBPS, droppedFrames, audioBufferByteLength, videoBufferByteLength, dataBufferByteLength, audioBufferLength, videoBufferLength, dataBufferLength, srtt, audioLossRate, videoLossRate, metaData, xmpData, uri, resourceName, isLive) {
                            if (metaData === void 0) { metaData = null; }
                            if (xmpData === void 0) { xmpData = null; }
                            if (uri === void 0) { uri = null; }
                            if (resourceName === void 0) { resourceName = null; }
                            if (isLive === void 0) { isLive = true; }
                            curBPS = +curBPS;
                            byteCount = +byteCount;
                            maxBPS = +maxBPS;
                            audioBPS = +audioBPS;
                            audioByteCount = +audioByteCount;
                            videoBPS = +videoBPS;
                            videoByteCount = +videoByteCount;
                            dataBPS = +dataBPS;
                            dataByteCount = +dataByteCount;
                            playbackBPS = +playbackBPS;
                            droppedFrames = +droppedFrames;
                            audioBufferByteLength = +audioBufferByteLength;
                            videoBufferByteLength = +videoBufferByteLength;
                            dataBufferByteLength = +dataBufferByteLength;
                            audioBufferLength = +audioBufferLength;
                            videoBufferLength = +videoBufferLength;
                            dataBufferLength = +dataBufferLength;
                            srtt = +srtt;
                            audioLossRate = +audioLossRate;
                            videoLossRate = +videoLossRate;
                            metaData = metaData;
                            xmpData = xmpData;
                            uri = asCoerceString(uri);
                            resourceName = asCoerceString(resourceName);
                            isLive = !!isLive;
                            false && _super.call(this);
                            dummyConstructor("public flash.net.NetStreamInfo");
                        }
                        NetStreamInfo.classInitializer = null;
                        NetStreamInfo.initializer = null;
                        NetStreamInfo.classSymbols = null;
                        NetStreamInfo.instanceSymbols = null;
                        return NetStreamInfo;
                    })(AS.ASNative);
                    net.NetStreamInfo = NetStreamInfo;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var NetStreamMulticastInfo = (function (_super) {
                        __extends(NetStreamMulticastInfo, _super);
                        function NetStreamMulticastInfo(sendDataBytesPerSecond, sendControlBytesPerSecond, receiveDataBytesPerSecond, receiveControlBytesPerSecond, bytesPushedToPeers, fragmentsPushedToPeers, bytesRequestedByPeers, fragmentsRequestedByPeers, bytesPushedFromPeers, fragmentsPushedFromPeers, bytesRequestedFromPeers, fragmentsRequestedFromPeers, sendControlBytesPerSecondToServer, receiveDataBytesPerSecondFromServer, bytesReceivedFromServer, fragmentsReceivedFromServer, receiveDataBytesPerSecondFromIPMulticast, bytesReceivedFromIPMulticast, fragmentsReceivedFromIPMulticast) {
                            sendDataBytesPerSecond = +sendDataBytesPerSecond;
                            sendControlBytesPerSecond = +sendControlBytesPerSecond;
                            receiveDataBytesPerSecond = +receiveDataBytesPerSecond;
                            receiveControlBytesPerSecond = +receiveControlBytesPerSecond;
                            bytesPushedToPeers = +bytesPushedToPeers;
                            fragmentsPushedToPeers = +fragmentsPushedToPeers;
                            bytesRequestedByPeers = +bytesRequestedByPeers;
                            fragmentsRequestedByPeers = +fragmentsRequestedByPeers;
                            bytesPushedFromPeers = +bytesPushedFromPeers;
                            fragmentsPushedFromPeers = +fragmentsPushedFromPeers;
                            bytesRequestedFromPeers = +bytesRequestedFromPeers;
                            fragmentsRequestedFromPeers = +fragmentsRequestedFromPeers;
                            sendControlBytesPerSecondToServer = +sendControlBytesPerSecondToServer;
                            receiveDataBytesPerSecondFromServer = +receiveDataBytesPerSecondFromServer;
                            bytesReceivedFromServer = +bytesReceivedFromServer;
                            fragmentsReceivedFromServer = +fragmentsReceivedFromServer;
                            receiveDataBytesPerSecondFromIPMulticast = +receiveDataBytesPerSecondFromIPMulticast;
                            bytesReceivedFromIPMulticast = +bytesReceivedFromIPMulticast;
                            fragmentsReceivedFromIPMulticast = +fragmentsReceivedFromIPMulticast;
                            false && _super.call(this);
                            dummyConstructor("public flash.net.NetStreamMulticastInfo");
                        }
                        NetStreamMulticastInfo.classInitializer = null;
                        NetStreamMulticastInfo.initializer = null;
                        NetStreamMulticastInfo.classSymbols = null;
                        NetStreamMulticastInfo.instanceSymbols = null;
                        return NetStreamMulticastInfo;
                    })(AS.ASNative);
                    net.NetStreamMulticastInfo = NetStreamMulticastInfo;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var NetStreamPlayOptions = (function (_super) {
                        __extends(NetStreamPlayOptions, _super);
                        function NetStreamPlayOptions() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.NetStreamPlayOptions");
                        }
                        NetStreamPlayOptions.classInitializer = null;
                        NetStreamPlayOptions.initializer = null;
                        NetStreamPlayOptions.classSymbols = null;
                        NetStreamPlayOptions.instanceSymbols = null;
                        return NetStreamPlayOptions;
                    })(flash.events.EventDispatcher);
                    net.NetStreamPlayOptions = NetStreamPlayOptions;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Responder = (function (_super) {
                        __extends(Responder, _super);
                        function Responder(result, status) {
                            if (status === void 0) { status = null; }
                            false && _super.call(this);
                            dummyConstructor("public flash.net.Responder");
                        }
                        Responder.prototype.ctor = function (result, status) {
                            this._result = result;
                            this._status = status;
                        };
                        Responder.classInitializer = null;
                        Responder.initializer = null;
                        Responder.classSymbols = null;
                        Responder.instanceSymbols = null;
                        return Responder;
                    })(AS.ASNative);
                    net.Responder = Responder;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var _sharedObjectStorage;
                    function getSharedObjectStorage() {
                        if (!_sharedObjectStorage) {
                            if (typeof ShumwayCom !== 'undefined' && ShumwayCom.createSpecialStorage) {
                                _sharedObjectStorage = ShumwayCom.createSpecialStorage();
                            }
                            else {
                                _sharedObjectStorage = window.sessionStorage;
                            }
                        }
                        return _sharedObjectStorage;
                    }
                    var SharedObject = (function (_super) {
                        __extends(SharedObject, _super);
                        function SharedObject() {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._data = Object.create(null);
                        }
                        SharedObject.deleteAll = function (url) {
                            url = asCoerceString(url);
                            notImplemented("public flash.net.SharedObject::static deleteAll");
                            return;
                        };
                        SharedObject.getDiskUsage = function (url) {
                            url = asCoerceString(url);
                            notImplemented("public flash.net.SharedObject::static getDiskUsage");
                            return;
                        };
                        SharedObject._create = function (path, data) {
                            var obj = new SharedObject();
                            obj._path = path;
                            obj._data = data;
                            obj._objectEncoding = SharedObject._defaultObjectEncoding;
                            Shumway.Telemetry.instance.reportTelemetry({ topic: 'feature', feature: 3 /* SHAREDOBJECT_FEATURE */ });
                            return obj;
                        };
                        SharedObject.getLocal = function (name, localPath, secure) {
                            if (localPath === void 0) { localPath = null; }
                            if (secure === void 0) { secure = false; }
                            name = asCoerceString(name);
                            localPath = asCoerceString(localPath);
                            secure = !!secure;
                            var path = (localPath || '') + '/' + name;
                            if (SharedObject._sharedObjects[path]) {
                                return SharedObject._sharedObjects[path];
                            }
                            var data = getSharedObjectStorage().getItem(path);
                            var so = SharedObject._create(path, data ? JSON.parse(data) : {});
                            SharedObject._sharedObjects[path] = so;
                            return so;
                        };
                        SharedObject.getRemote = function (name, remotePath, persistence, secure) {
                            if (remotePath === void 0) { remotePath = null; }
                            if (persistence === void 0) { persistence = false; }
                            if (secure === void 0) { secure = false; }
                            name = asCoerceString(name);
                            remotePath = asCoerceString(remotePath);
                            secure = !!secure;
                            notImplemented("public flash.net.SharedObject::static getRemote");
                            return;
                        };
                        Object.defineProperty(SharedObject, "defaultObjectEncoding", {
                            get: function () {
                                return SharedObject._defaultObjectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                SharedObject._defaultObjectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SharedObject.prototype, "data", {
                            get: function () {
                                return this._data;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SharedObject.prototype, "objectEncoding", {
                            get: function () {
                                return this._objectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                this._objectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SharedObject.prototype, "client", {
                            get: function () {
                                notImplemented("public flash.net.SharedObject::get client");
                                return;
                            },
                            set: function (object) {
                                object = object;
                                notImplemented("public flash.net.SharedObject::set client");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SharedObject.prototype.setDirty = function (propertyName) {
                            propertyName = asCoerceString(propertyName);
                            somewhatImplemented("public flash.net.SharedObject::setDirty");
                        };
                        SharedObject.prototype.invoke = function (index) {
                            index = index >>> 0;
                            return this._invoke(index, Array.prototype.slice.call(arguments, 1));
                        };
                        SharedObject.prototype.invokeWithArgsArray = function (index, args) {
                            index = index >>> 0;
                            return this._invoke(index, args);
                        };
                        SharedObject.prototype._invoke = function (index, args) {
                            var simulated = false, result;
                            switch (index) {
                                case 4:
                                    result = JSON.stringify(this._data).length - 2;
                                    simulated = true;
                                    break;
                                case 6:
                                    this._data = {};
                                    getSharedObjectStorage().removeItem(this._path);
                                    simulated = true;
                                    break;
                                case 2:
                                    getSharedObjectStorage().setItem(this._path, JSON.stringify(this._data));
                                    simulated = true;
                                    result = true;
                                    break;
                                case 3:
                                    simulated = true;
                                    break;
                            }
                            (simulated ? somewhatImplemented : notImplemented)("private flash.net.SharedObject::_invoke (" + index + ")");
                            return result;
                        };
                        SharedObject.classInitializer = null;
                        SharedObject.initializer = null;
                        SharedObject.classSymbols = null;
                        SharedObject.instanceSymbols = null;
                        SharedObject._sharedObjects = Object.create(null);
                        SharedObject._defaultObjectEncoding = 3;
                        return SharedObject;
                    })(flash.events.EventDispatcher);
                    net.SharedObject = SharedObject;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var Errors = Shumway.AVM2.Errors;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Socket = (function (_super) {
                        __extends(Socket, _super);
                        function Socket(host, port) {
                            if (host === void 0) { host = null; }
                            if (port === void 0) { port = 0; }
                            host = asCoerceString(host);
                            port = port | 0;
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.Socket");
                        }
                        Object.defineProperty(Socket.prototype, "bytesAvailable", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get bytesAvailable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Socket.prototype, "connected", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get connected");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Socket.prototype, "objectEncoding", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get objectEncoding");
                                return;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                notImplemented("public flash.net.Socket::set objectEncoding");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Socket.prototype, "endian", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get endian");
                                return;
                            },
                            set: function (type) {
                                type = asCoerceString(type);
                                notImplemented("public flash.net.Socket::set endian");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Socket.prototype, "bytesPending", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get bytesPending");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Socket.prototype.readBytes = function (bytes, offset, length) {
                            if (offset === void 0) { offset = 0; }
                            if (length === void 0) { length = 0; }
                            bytes = bytes;
                            offset = offset >>> 0;
                            length = length >>> 0;
                            notImplemented("public flash.net.Socket::readBytes");
                            return;
                        };
                        Socket.prototype.writeBytes = function (bytes, offset, length) {
                            if (offset === void 0) { offset = 0; }
                            if (length === void 0) { length = 0; }
                            bytes = bytes;
                            offset = offset >>> 0;
                            length = length >>> 0;
                            notImplemented("public flash.net.Socket::writeBytes");
                            return;
                        };
                        Socket.prototype.writeBoolean = function (value) {
                            value = !!value;
                            notImplemented("public flash.net.Socket::writeBoolean");
                            return;
                        };
                        Socket.prototype.writeByte = function (value) {
                            value = value | 0;
                            notImplemented("public flash.net.Socket::writeByte");
                            return;
                        };
                        Socket.prototype.writeShort = function (value) {
                            value = value | 0;
                            notImplemented("public flash.net.Socket::writeShort");
                            return;
                        };
                        Socket.prototype.writeInt = function (value) {
                            value = value | 0;
                            notImplemented("public flash.net.Socket::writeInt");
                            return;
                        };
                        Socket.prototype.writeUnsignedInt = function (value) {
                            value = value >>> 0;
                            notImplemented("public flash.net.Socket::writeUnsignedInt");
                            return;
                        };
                        Socket.prototype.writeFloat = function (value) {
                            value = +value;
                            notImplemented("public flash.net.Socket::writeFloat");
                            return;
                        };
                        Socket.prototype.writeDouble = function (value) {
                            value = +value;
                            notImplemented("public flash.net.Socket::writeDouble");
                            return;
                        };
                        Socket.prototype.writeMultiByte = function (value, charSet) {
                            value = asCoerceString(value);
                            charSet = asCoerceString(charSet);
                            notImplemented("public flash.net.Socket::writeMultiByte");
                            return;
                        };
                        Socket.prototype.writeUTF = function (value) {
                            value = asCoerceString(value);
                            notImplemented("public flash.net.Socket::writeUTF");
                            return;
                        };
                        Socket.prototype.writeUTFBytes = function (value) {
                            value = asCoerceString(value);
                            notImplemented("public flash.net.Socket::writeUTFBytes");
                            return;
                        };
                        Socket.prototype.readBoolean = function () {
                            notImplemented("public flash.net.Socket::readBoolean");
                            return;
                        };
                        Socket.prototype.readByte = function () {
                            notImplemented("public flash.net.Socket::readByte");
                            return;
                        };
                        Socket.prototype.readUnsignedByte = function () {
                            notImplemented("public flash.net.Socket::readUnsignedByte");
                            return;
                        };
                        Socket.prototype.readShort = function () {
                            notImplemented("public flash.net.Socket::readShort");
                            return;
                        };
                        Socket.prototype.readUnsignedShort = function () {
                            notImplemented("public flash.net.Socket::readUnsignedShort");
                            return;
                        };
                        Socket.prototype.readInt = function () {
                            notImplemented("public flash.net.Socket::readInt");
                            return;
                        };
                        Socket.prototype.readUnsignedInt = function () {
                            notImplemented("public flash.net.Socket::readUnsignedInt");
                            return;
                        };
                        Socket.prototype.readFloat = function () {
                            notImplemented("public flash.net.Socket::readFloat");
                            return;
                        };
                        Socket.prototype.readDouble = function () {
                            notImplemented("public flash.net.Socket::readDouble");
                            return;
                        };
                        Socket.prototype.readMultiByte = function (length, charSet) {
                            length = length >>> 0;
                            charSet = asCoerceString(charSet);
                            notImplemented("public flash.net.Socket::readMultiByte");
                            return;
                        };
                        Socket.prototype.readUTF = function () {
                            notImplemented("public flash.net.Socket::readUTF");
                            return;
                        };
                        Socket.prototype.readUTFBytes = function (length) {
                            length = length >>> 0;
                            notImplemented("public flash.net.Socket::readUTFBytes");
                            return;
                        };
                        Socket.prototype.flush = function () {
                            notImplemented("public flash.net.Socket::flush");
                            return;
                        };
                        Socket.prototype.writeObject = function (object) {
                            notImplemented("public flash.net.Socket::writeObject");
                            return;
                        };
                        Socket.prototype.readObject = function () {
                            notImplemented("public flash.net.Socket::readObject");
                            return;
                        };
                        Socket.prototype.internalGetSecurityErrorMessage = function (host, port) {
                            host = asCoerceString(host);
                            port |= 0;
                            somewhatImplemented("flash.net.Socket::internalGetSecurityErrorMessage");
                            return 'SecurityErrorEvent';
                        };
                        Socket.prototype.internalConnect = function (host, port) {
                            host = asCoerceString(host);
                            port |= 0;
                            somewhatImplemented("flash.net.Socket::internalConnect");
                            throwError('SecurityError', Errors.SocketConnectError, host, port);
                        };
                        Socket.prototype.didFailureOccur = function () {
                            somewhatImplemented("flash.net.Socket::didFailureOccur");
                            return true;
                        };
                        Socket.classInitializer = null;
                        Socket.initializer = null;
                        Socket.classSymbols = null;
                        Socket.instanceSymbols = null;
                        return Socket;
                    })(flash.events.EventDispatcher);
                    net.Socket = Socket;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var Event = flash.events.Event;
                    var IOErrorEvent = flash.events.IOErrorEvent;
                    var ProgressEvent = flash.events.ProgressEvent;
                    var HTTPStatusEvent = flash.events.HTTPStatusEvent;
                    var SecurityErrorEvent = flash.events.SecurityErrorEvent;
                    var URLLoader = (function (_super) {
                        __extends(URLLoader, _super);
                        function URLLoader(request) {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            var stream = this._stream = new net.URLStream();
                            stream.addEventListener(Event.OPEN, this.onStreamOpen.bind(this));
                            stream.addEventListener(Event.COMPLETE, this.onStreamComplete.bind(this));
                            stream.addEventListener(ProgressEvent.PROGRESS, this.onStreamProgress.bind(this));
                            stream.addEventListener(IOErrorEvent.IO_ERROR, this.onStreamIOError.bind(this));
                            stream.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.onStreamHTTPStatus.bind(this));
                            stream.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, this.onStreamHTTPResponseStatus.bind(this));
                            stream.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onStreamSecurityError.bind(this));
                            this.$BgdataFormat = 'text';
                            if (request) {
                                this.load(request);
                            }
                        }
                        Object.defineProperty(URLLoader.prototype, "data", {
                            get: function () {
                                return this.$Bgdata;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLLoader.prototype, "dataFormat", {
                            get: function () {
                                return this.$BgdataFormat;
                            },
                            set: function (format) {
                                release || Shumway.Debug.assert(typeof format === 'string');
                                this.$BgdataFormat = format;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLLoader.prototype, "bytesLoaded", {
                            get: function () {
                                return this.$BgbytesLoaded;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLLoader.prototype, "bytesTotal", {
                            get: function () {
                                return this.$BgbytesTotal;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        URLLoader.prototype.load = function (request) {
                            this._stream.load(request);
                        };
                        URLLoader.prototype.close = function () {
                            this._stream.close();
                        };
                        URLLoader.prototype.complete = function () {
                            var response = new flash.utils.ByteArray();
                            this._stream.readBytes(response);
                            if (this.$BgdataFormat === 'binary') {
                                this.$Bgdata = response;
                                return;
                            }
                            var data = response.toString();
                            if (response.length > 0 && this.$BgdataFormat === 'variables') {
                                var variable = new net.URLVariables();
                                if (this._ignoreDecodeErrors) {
                                    variable._ignoreDecodingErrors = true;
                                }
                                variable.decode(String(data));
                                this.$Bgdata = variable;
                            }
                            else {
                                this.$Bgdata = data;
                            }
                        };
                        URLLoader.prototype.addEventListener = function (type, listener, useCapture, priority, useWeakReference) {
                            _super.prototype.addEventListener.call(this, type, listener, useCapture, priority, useWeakReference);
                            if (type === HTTPStatusEvent.HTTP_RESPONSE_STATUS) {
                                this._httpResponseEventBound = true;
                            }
                        };
                        URLLoader.prototype.onStreamOpen = function (e) {
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamComplete = function (e) {
                            this.complete();
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamProgress = function (e) {
                            this.$BgbytesLoaded = e.bytesLoaded;
                            this.$BgbytesTotal = e.bytesTotal;
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamIOError = function (e) {
                            this.complete();
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamHTTPStatus = function (e) {
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamHTTPResponseStatus = function (e) {
                            if (!this._httpResponseEventBound) {
                                return;
                            }
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamSecurityError = function (e) {
                            this.dispatchEvent(e);
                        };
                        URLLoader.classInitializer = null;
                        URLLoader.initializer = null;
                        URLLoader.classSymbols = null;
                        URLLoader.instanceSymbols = null;
                        return URLLoader;
                    })(flash.events.EventDispatcher);
                    net.URLLoader = URLLoader;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var URLRequest = (function (_super) {
                        __extends(URLRequest, _super);
                        function URLRequest(url) {
                            if (url === void 0) { url = null; }
                            false && _super.call(this);
                            this._url = asCoerceString(url);
                        }
                        Object.defineProperty(URLRequest.prototype, "url", {
                            get: function () {
                                return this._url;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._url = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "data", {
                            get: function () {
                                return this._data;
                            },
                            set: function (value) {
                                this._data = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "method", {
                            get: function () {
                                return this._method;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value !== 'get' && value !== 'GET' && value !== 'post' && value !== 'POST') {
                                    throwError('ArgumentError', AVM2.Errors.InvalidArgumentError);
                                }
                                this._method = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "contentType", {
                            get: function () {
                                return this._contentType;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._contentType = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "requestHeaders", {
                            get: function () {
                                return this._requestHeaders;
                            },
                            set: function (value) {
                                if (!Array.isArray(value)) {
                                    throwError('ArgumentError', AVM2.Errors.InvalidArgumentError, "value");
                                }
                                this._requestHeaders = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "digest", {
                            get: function () {
                                return this._digest;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._digest = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        URLRequest.prototype._toFileRequest = function () {
                            var obj = {};
                            obj.url = this._url;
                            obj.method = this._method;
                            obj.checkPolicyFile = this._checkPolicyFile;
                            if (this._data) {
                                obj.mimeType = this._contentType;
                                if (flash.utils.ByteArray.isType(this._data)) {
                                    obj.data = new Uint8Array(this._data._buffer, 0, this._data.length);
                                }
                                else {
                                    var data = this._data.asGetPublicProperty("toString").call(this._data);
                                    if (this._method === 'GET') {
                                        var i = obj.url.lastIndexOf('?');
                                        obj.url = (i < 0 ? obj.url : obj.url.substring(0, i)) + '?' + data;
                                    }
                                    else {
                                        obj.data = data;
                                    }
                                }
                            }
                            return obj;
                        };
                        URLRequest.classInitializer = null;
                        URLRequest.initializer = function () {
                            this._url = null;
                            this._method = 'GET';
                            this._data = null;
                            this._digest = null;
                            this._contentType = 'application/x-www-form-urlencoded';
                            this._requestHeaders = [];
                            this._checkPolicyFile = true;
                        };
                        URLRequest.classSymbols = null;
                        URLRequest.bindings = null;
                        return URLRequest;
                    })(AS.ASNative);
                    net.URLRequest = URLRequest;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var URLRequestHeader = (function (_super) {
                        __extends(URLRequestHeader, _super);
                        function URLRequestHeader(name, value) {
                            if (name === void 0) { name = ""; }
                            if (value === void 0) { value = ""; }
                            name = asCoerceString(name);
                            value = asCoerceString(value);
                            false && _super.call(this);
                        }
                        URLRequestHeader.classInitializer = null;
                        URLRequestHeader.initializer = null;
                        URLRequestHeader.classSymbols = null;
                        URLRequestHeader.instanceSymbols = ["name!", "value!"];
                        return URLRequestHeader;
                    })(AS.ASNative);
                    net.URLRequestHeader = URLRequestHeader;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FileLoadingService = Shumway.FileLoadingService;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var utils = Shumway.AVM2.AS.flash.utils;
                    var URLStream = (function (_super) {
                        __extends(URLStream, _super);
                        function URLStream() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.URLStream");
                        }
                        Object.defineProperty(URLStream.prototype, "connected", {
                            get: function () {
                                return this._connected;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "bytesAvailable", {
                            get: function () {
                                return this._buffer.length - this._buffer.position;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "objectEncoding", {
                            get: function () {
                                return this._buffer.objectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                this._buffer.objectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "endian", {
                            get: function () {
                                return this._buffer.endian;
                            },
                            set: function (type) {
                                type = asCoerceString(type);
                                this._buffer.endian = type;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "diskCacheEnabled", {
                            get: function () {
                                notImplemented("public flash.net.URLStream::get diskCacheEnabled");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "position", {
                            get: function () {
                                return this._buffer.position;
                            },
                            set: function (offset) {
                                offset = +offset;
                                this._buffer.position = offset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "length", {
                            get: function () {
                                return this._buffer.length;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        URLStream.prototype.load = function (request) {
                            var Event = flash.events.Event;
                            var IOErrorEvent = flash.events.IOErrorEvent;
                            var ProgressEvent = flash.events.ProgressEvent;
                            var HTTPStatusEvent = flash.events.HTTPStatusEvent;
                            var session = FileLoadingService.instance.createSession();
                            var self = this;
                            var initStream = true;
                            session.onprogress = function (data, progressState) {
                                var readPosition = self._buffer.position;
                                self._buffer.position = self._writePosition;
                                self._buffer.writeRawBytes(data);
                                self._writePosition = self._buffer.position;
                                self._buffer.position = readPosition;
                                self.dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, progressState.bytesLoaded, progressState.bytesTotal));
                            };
                            session.onerror = function (error) {
                                self._connected = false;
                                self.dispatchEvent(new IOErrorEvent(IOErrorEvent.IO_ERROR, false, false, error));
                            };
                            session.onopen = function () {
                                self._connected = true;
                                self.dispatchEvent(new Event(Event.OPEN, false, false));
                            };
                            session.onhttpstatus = function (location, httpStatus, httpHeaders) {
                                var httpStatusEvent = new HTTPStatusEvent(HTTPStatusEvent.HTTP_STATUS, false, false, httpStatus);
                                var headers = [];
                                httpHeaders.split(/(?:\n|\r?\n)/g).forEach(function (h) {
                                    var m = /^([^:]+): (.*)$/.exec(h);
                                    if (m) {
                                        headers.push(new flash.net.URLRequestHeader(m[1], m[2]));
                                        if (m[1] === 'Location') {
                                            location = m[2];
                                        }
                                    }
                                });
                                httpStatusEvent.asSetPublicProperty('responseHeaders', headers);
                                httpStatusEvent.asSetPublicProperty('responseURL', location);
                                self.dispatchEvent(httpStatusEvent);
                            };
                            session.onclose = function () {
                                self._connected = false;
                                self.dispatchEvent(new Event(Event.COMPLETE, false, false));
                            };
                            session.open(request._toFileRequest());
                            this._session = session;
                        };
                        URLStream.prototype.readBytes = function (bytes, offset, length) {
                            if (offset === void 0) { offset = 0; }
                            if (length === void 0) { length = 0; }
                            offset = offset >>> 0;
                            length = length >>> 0;
                            if (length < 0) {
                                throwError('ArgumentError', AVM2.Errors.InvalidArgumentError, "length");
                            }
                            this._buffer.readBytes(bytes, offset, length);
                        };
                        URLStream.prototype.readBoolean = function () {
                            notImplemented("public flash.net.URLStream::readBoolean");
                            return;
                        };
                        URLStream.prototype.readByte = function () {
                            return this._buffer.readByte();
                        };
                        URLStream.prototype.readUnsignedByte = function () {
                            notImplemented("public flash.net.URLStream::readUnsignedByte");
                            return;
                        };
                        URLStream.prototype.readShort = function () {
                            notImplemented("public flash.net.URLStream::readShort");
                            return;
                        };
                        URLStream.prototype.readUnsignedShort = function () {
                            return this._buffer.readUnsignedShort();
                        };
                        URLStream.prototype.readUnsignedInt = function () {
                            notImplemented("public flash.net.URLStream::readUnsignedInt");
                            return;
                        };
                        URLStream.prototype.readInt = function () {
                            notImplemented("public flash.net.URLStream::readInt");
                            return;
                        };
                        URLStream.prototype.readFloat = function () {
                            notImplemented("public flash.net.URLStream::readFloat");
                            return;
                        };
                        URLStream.prototype.readDouble = function () {
                            notImplemented("public flash.net.URLStream::readDouble");
                            return;
                        };
                        URLStream.prototype.readMultiByte = function (length, charSet) {
                            length = length >>> 0;
                            charSet = asCoerceString(charSet);
                            notImplemented("public flash.net.URLStream::readMultiByte");
                            return;
                        };
                        URLStream.prototype.readUTF = function () {
                            return this._buffer.readUTF();
                        };
                        URLStream.prototype.readUTFBytes = function (length) {
                            return this._buffer.readUTFBytes(length);
                        };
                        URLStream.prototype.close = function () {
                            this._session.close();
                        };
                        URLStream.prototype.readObject = function () {
                            notImplemented("public flash.net.URLStream::readObject");
                            return;
                        };
                        URLStream.prototype.stop = function () {
                            notImplemented("public flash.net.URLStream::stop");
                            return;
                        };
                        URLStream.classInitializer = null;
                        URLStream.initializer = function () {
                            this._buffer = new utils.ByteArray();
                            this._writePosition = 0;
                            this._connected = false;
                        };
                        URLStream.classSymbols = null;
                        URLStream.instanceSymbols = null;
                        return URLStream;
                    })(flash.events.EventDispatcher);
                    net.URLStream = URLStream;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var URLVariables = (function (_super) {
                        __extends(URLVariables, _super);
                        function URLVariables(source) {
                            if (source === void 0) { source = null; }
                            false && _super.call(this);
                            this._ignoreDecodingErrors = false;
                            source && this.decode(source);
                        }
                        URLVariables.prototype.decode = function (source) {
                            source = asCoerceString(source);
                            var variables = source.split('&');
                            for (var i = 0; i < variables.length; i++) {
                                var p = variables[i];
                                var j = p.indexOf('=');
                                if (j < 0) {
                                    if (this._ignoreDecodingErrors) {
                                        j = p.length;
                                    }
                                    else {
                                        throwError('Error', AVM2.Errors.DecodeParamError);
                                    }
                                }
                                var name = unescape(p.substring(0, j).split('+').join(' '));
                                var value = unescape(p.substring(j + 1).split('+').join(' '));
                                var currentValue = this.asGetPublicProperty(name);
                                if (typeof currentValue === 'undefined') {
                                    this.asSetPublicProperty(name, value);
                                }
                                else if (Array.isArray(currentValue)) {
                                    currentValue.push(value);
                                }
                                else {
                                    this.asSetPublicProperty(name, [currentValue, value]);
                                }
                            }
                        };
                        URLVariables.prototype.toString = function () {
                            var pairs = [];
                            var keys = this.asGetEnumerableKeys();
                            for (var i = 0; i < keys.length; i++) {
                                var name = keys[i].split(' ').join('+');
                                var value = this.asGetPublicProperty(name);
                                name = escape(name).split(' ').join('+');
                                if (Array.isArray(value)) {
                                    for (var j = 0; j < value.length; j++) {
                                        pairs.push(name + '=' + escape(value[j]));
                                    }
                                }
                                else {
                                    pairs.push(name + '=' + escape(value));
                                }
                            }
                            return pairs.join('&');
                        };
                        URLVariables.classInitializer = null;
                        URLVariables.initializer = null;
                        URLVariables.classSymbols = null;
                        URLVariables.instanceSymbols = null;
                        return URLVariables;
                    })(AS.ASNative);
                    net.URLVariables = URLVariables;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var sensors;
                (function (sensors) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Accelerometer = (function (_super) {
                        __extends(Accelerometer, _super);
                        function Accelerometer() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.sensors.Accelerometer");
                        }
                        Object.defineProperty(Accelerometer.prototype, "isSupported", {
                            get: function () {
                                notImplemented("public flash.sensors.Accelerometer::get isSupported");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Accelerometer.prototype, "muted", {
                            get: function () {
                                notImplemented("public flash.sensors.Accelerometer::get muted");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Accelerometer.prototype.setRequestedUpdateInterval = function (interval) {
                            interval = +interval;
                            notImplemented("public flash.sensors.Accelerometer::setRequestedUpdateInterval");
                            return;
                        };
                        Accelerometer.classInitializer = null;
                        Accelerometer.initializer = null;
                        Accelerometer.classSymbols = null;
                        Accelerometer.instanceSymbols = null;
                        return Accelerometer;
                    })(flash.events.EventDispatcher);
                    sensors.Accelerometer = Accelerometer;
                })(sensors = flash.sensors || (flash.sensors = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var sensors;
                (function (sensors) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Geolocation = (function (_super) {
                        __extends(Geolocation, _super);
                        function Geolocation() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.sensors.Geolocation");
                        }
                        Object.defineProperty(Geolocation.prototype, "isSupported", {
                            get: function () {
                                notImplemented("public flash.sensors.Geolocation::get isSupported");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Geolocation.prototype, "muted", {
                            get: function () {
                                notImplemented("public flash.sensors.Geolocation::get muted");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Geolocation.prototype.setRequestedUpdateInterval = function (interval) {
                            interval = +interval;
                            notImplemented("public flash.sensors.Geolocation::setRequestedUpdateInterval");
                            return;
                        };
                        Geolocation.classInitializer = null;
                        Geolocation.initializer = null;
                        Geolocation.classSymbols = null;
                        Geolocation.instanceSymbols = null;
                        return Geolocation;
                    })(flash.events.EventDispatcher);
                    sensors.Geolocation = Geolocation;
                })(sensors = flash.sensors || (flash.sensors = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (_AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var AVM2 = Shumway.AVM2.Runtime.AVM2;
                    var ExecutionMode = Shumway.AVM2.Runtime.ExecutionMode;
                    var RuntimeApplicationDomain = Shumway.AVM2.Runtime.ApplicationDomain;
                    var Multiname = Shumway.AVM2.ABC.Multiname;
                    var ApplicationDomain = (function (_super) {
                        __extends(ApplicationDomain, _super);
                        function ApplicationDomain(parentDomainOrRuntimeDomain) {
                            if (parentDomainOrRuntimeDomain === void 0) { parentDomainOrRuntimeDomain = null; }
                            false && _super.call(this);
                            if (parentDomainOrRuntimeDomain instanceof RuntimeApplicationDomain) {
                                this._runtimeDomain = parentDomainOrRuntimeDomain;
                                return;
                            }
                            var parentRuntimeDomain;
                            if (parentDomainOrRuntimeDomain) {
                                parentRuntimeDomain = parentDomainOrRuntimeDomain._runtimeDomain;
                            }
                            else {
                                parentRuntimeDomain = AVM2.currentDomain().system;
                            }
                            this._runtimeDomain = new RuntimeApplicationDomain(parentRuntimeDomain.vm, parentRuntimeDomain, 2 /* COMPILE */, false);
                        }
                        Object.defineProperty(ApplicationDomain, "currentDomain", {
                            get: function () {
                                return new ApplicationDomain(AVM2.currentDomain());
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ApplicationDomain, "MIN_DOMAIN_MEMORY_LENGTH", {
                            get: function () {
                                notImplemented("public flash.system.ApplicationDomain::get MIN_DOMAIN_MEMORY_LENGTH");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ApplicationDomain.prototype, "parentDomain", {
                            get: function () {
                                if (this._runtimeDomain.base) {
                                    return new ApplicationDomain(this._runtimeDomain.base);
                                }
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ApplicationDomain.prototype, "domainMemory", {
                            get: function () {
                                notImplemented("public flash.system.ApplicationDomain::get domainMemory");
                                return;
                            },
                            set: function (mem) {
                                mem = mem;
                                notImplemented("public flash.system.ApplicationDomain::set domainMemory");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ApplicationDomain.prototype.getDefinition = function (name) {
                            name = asCoerceString(name);
                            if (name) {
                                var simpleName = name.replace("::", ".");
                                return this._runtimeDomain.getProperty(Multiname.fromSimpleName(simpleName), true, true);
                            }
                            return null;
                        };
                        ApplicationDomain.prototype.hasDefinition = function (name) {
                            name = asCoerceString(name);
                            if (name) {
                                var simpleName = name.replace("::", ".");
                                return !!this._runtimeDomain.findDomainProperty(Multiname.fromSimpleName(simpleName), false, false);
                            }
                            return false;
                        };
                        ApplicationDomain.prototype.getQualifiedDefinitionNames = function () {
                            notImplemented("public flash.system.ApplicationDomain::getQualifiedDefinitionNames");
                            return;
                        };
                        ApplicationDomain.classInitializer = null;
                        ApplicationDomain.initializer = null;
                        ApplicationDomain.classSymbols = null;
                        ApplicationDomain.instanceSymbols = null;
                        return ApplicationDomain;
                    })(AS.ASNative);
                    system.ApplicationDomain = ApplicationDomain;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = _AVM2.AS || (_AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var toKeyValueArray = Shumway.ObjectUtilities.toKeyValueArray;
                    var Capabilities = (function (_super) {
                        __extends(Capabilities, _super);
                        function Capabilities() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.Capabilities");
                        }
                        Object.defineProperty(Capabilities, "isEmbeddedInAcrobat", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get isEmbeddedInAcrobat");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasEmbeddedVideo", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasEmbeddedVideo");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasAudio", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasAudio");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "avHardwareDisable", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get avHardwareDisable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasAccessibility", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get hasAccessibility");
                                return Capabilities._hasAccessibility;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasAudioEncoder", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasAudioEncoder");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasMP3", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasMP3");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasPrinting", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasPrinting");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasScreenBroadcast", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasScreenBroadcast");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasScreenPlayback", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasScreenPlayback");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasStreamingAudio", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasStreamingAudio");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasStreamingVideo", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasStreamingVideo");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasVideoEncoder", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasVideoEncoder");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "isDebugger", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get isDebugger");
                                return Capabilities._isDebugger;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "localFileReadDisable", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get localFileReadDisable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "language", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get language");
                                return Capabilities._language;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "manufacturer", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get manufacturer");
                                return Capabilities._manufacturer;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "os", {
                            get: function () {
                                if (Capabilities._os === null) {
                                    var os;
                                    var userAgent = window.navigator.userAgent;
                                    if (userAgent.indexOf("Macintosh") > 0) {
                                        os = "Mac OS 10.5.2";
                                    }
                                    else if (userAgent.indexOf("Windows") > 0) {
                                        os = "Windows XP";
                                    }
                                    else if (userAgent.indexOf("Linux") > 0) {
                                        os = "Linux";
                                    }
                                    else if (/(iPad|iPhone|iPod|Android)/.test(userAgent)) {
                                        os = "iPhone3,1";
                                    }
                                    else {
                                        notImplemented("public flash.system.Capabilities::get os");
                                    }
                                    Capabilities._os = os;
                                }
                                return Capabilities._os;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "cpuArchitecture", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get cpuArchitecture");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "playerType", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get playerType");
                                return Capabilities._playerType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "serverString", {
                            get: function () {
                                var str = toKeyValueArray({ OS: Capabilities.os }).map(function (pair) {
                                    return pair[0] + "=" + encodeURIComponent(pair[1]);
                                }).join("&");
                                somewhatImplemented("Capabilities.serverString: " + str);
                                return str;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "version", {
                            get: function () {
                                return Capabilities._version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "screenColor", {
                            get: function () {
                                return "color";
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "pixelAspectRatio", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get pixelAspectRatio");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "screenDPI", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get screenDPI");
                                return Capabilities._screenDPI;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "screenResolutionX", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get screenResolutionX");
                                return window.screen.width;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "screenResolutionY", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get screenResolutionY");
                                return window.screen.height;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "touchscreenType", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get touchscreenType");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasIME", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasIME");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasTLS", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasTLS");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "maxLevelIDC", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get maxLevelIDC");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "supports32BitProcesses", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get supports32BitProcesses");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "supports64BitProcesses", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get supports64BitProcesses");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "_internal", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get _internal");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Capabilities.hasMultiChannelAudio = function (type) {
                            type = asCoerceString(type);
                            notImplemented("public flash.system.Capabilities::static hasMultiChannelAudio");
                            return;
                        };
                        Capabilities.classInitializer = null;
                        Capabilities.initializer = null;
                        Capabilities.classSymbols = null;
                        Capabilities.instanceSymbols = null;
                        Capabilities._hasAccessibility = false;
                        Capabilities._isDebugger = false;
                        Capabilities._language = 'en';
                        Capabilities._manufacturer = 'Mozilla Research';
                        Capabilities._os = null;
                        Capabilities._playerType = 'PlugIn';
                        Capabilities._version = 'SHUMWAY 10,0,0,0';
                        Capabilities._screenDPI = 96;
                        return Capabilities;
                    })(AS.ASNative);
                    system.Capabilities = Capabilities;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FSCommand = (function (_super) {
                        __extends(FSCommand, _super);
                        function FSCommand() {
                            false && _super.call(this);
                            dummyConstructor("packageInternal flash.system.FSCommand");
                        }
                        FSCommand._fscommand = function (command, args) {
                            command = asCoerceString(command);
                            args = asCoerceString(args);
                            console.log('FSCommand: ' + command + '; ' + args);
                            command = command.toLowerCase();
                            if (command === 'debugger') {
                                debugger;
                                return;
                            }
                            var listener = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                            listener.executeFSCommand(command, args);
                        };
                        FSCommand.classInitializer = null;
                        FSCommand.initializer = null;
                        FSCommand.classSymbols = null;
                        FSCommand.instanceSymbols = null;
                        return FSCommand;
                    })(AS.ASNative);
                    system.FSCommand = FSCommand;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ImageDecodingPolicy = (function (_super) {
                        __extends(ImageDecodingPolicy, _super);
                        function ImageDecodingPolicy() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.ImageDecodingPolicy");
                        }
                        ImageDecodingPolicy.classInitializer = null;
                        ImageDecodingPolicy.initializer = null;
                        ImageDecodingPolicy.classSymbols = null;
                        ImageDecodingPolicy.instanceSymbols = null;
                        ImageDecodingPolicy.ON_DEMAND = "onDemand";
                        ImageDecodingPolicy.ON_LOAD = "onLoad";
                        return ImageDecodingPolicy;
                    })(AS.ASNative);
                    system.ImageDecodingPolicy = ImageDecodingPolicy;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var LoaderContext = (function (_super) {
                        __extends(LoaderContext, _super);
                        function LoaderContext(checkPolicyFile, applicationDomain, securityDomain) {
                            if (checkPolicyFile === void 0) { checkPolicyFile = false; }
                            if (applicationDomain === void 0) { applicationDomain = null; }
                            if (securityDomain === void 0) { securityDomain = null; }
                            false && _super.call(this);
                            this.checkPolicyFile = checkPolicyFile;
                            this.applicationDomain = applicationDomain;
                            this.securityDomain = securityDomain;
                            this.imageDecodingPolicy = flash.system.ImageDecodingPolicy.ON_DEMAND;
                        }
                        LoaderContext.classInitializer = null;
                        LoaderContext.initializer = null;
                        LoaderContext.classSymbols = null;
                        LoaderContext.instanceSymbols = ["checkPolicyFile!", "applicationDomain!", "securityDomain!", "allowCodeImport!", "requestedContentParent!", "parameters!", "imageDecodingPolicy!"];
                        return LoaderContext;
                    })(AS.ASNative);
                    system.LoaderContext = LoaderContext;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var JPEGLoaderContext = (function (_super) {
                        __extends(JPEGLoaderContext, _super);
                        function JPEGLoaderContext(deblockingFilter, checkPolicyFile, applicationDomain, securityDomain) {
                            if (deblockingFilter === void 0) { deblockingFilter = 0; }
                            if (checkPolicyFile === void 0) { checkPolicyFile = false; }
                            if (applicationDomain === void 0) { applicationDomain = null; }
                            if (securityDomain === void 0) { securityDomain = null; }
                            deblockingFilter = +deblockingFilter;
                            checkPolicyFile = !!checkPolicyFile;
                            applicationDomain = applicationDomain;
                            securityDomain = securityDomain;
                            false && _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.system.JPEGLoaderContext");
                        }
                        JPEGLoaderContext.classInitializer = null;
                        JPEGLoaderContext.initializer = null;
                        JPEGLoaderContext.classSymbols = null;
                        JPEGLoaderContext.instanceSymbols = null;
                        return JPEGLoaderContext;
                    })(flash.system.LoaderContext);
                    system.JPEGLoaderContext = JPEGLoaderContext;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MessageChannel = (function (_super) {
                        __extends(MessageChannel, _super);
                        function MessageChannel() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.system.MessageChannel");
                        }
                        Object.defineProperty(MessageChannel.prototype, "messageAvailable", {
                            get: function () {
                                notImplemented("public flash.system.MessageChannel::get messageAvailable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MessageChannel.prototype, "state", {
                            get: function () {
                                notImplemented("public flash.system.MessageChannel::get state");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MessageChannel.prototype.send = function (arg, queueLimit) {
                            if (queueLimit === void 0) { queueLimit = -1; }
                            queueLimit = queueLimit | 0;
                            notImplemented("public flash.system.MessageChannel::send");
                            return;
                        };
                        MessageChannel.prototype.receive = function (blockUntilReceived) {
                            if (blockUntilReceived === void 0) { blockUntilReceived = false; }
                            blockUntilReceived = !!blockUntilReceived;
                            notImplemented("public flash.system.MessageChannel::receive");
                            return;
                        };
                        MessageChannel.prototype.close = function () {
                            notImplemented("public flash.system.MessageChannel::close");
                            return;
                        };
                        MessageChannel.classInitializer = null;
                        MessageChannel.initializer = null;
                        MessageChannel.classSymbols = null;
                        MessageChannel.instanceSymbols = null;
                        return MessageChannel;
                    })(flash.events.EventDispatcher);
                    system.MessageChannel = MessageChannel;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MessageChannelState = (function (_super) {
                        __extends(MessageChannelState, _super);
                        function MessageChannelState() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.MessageChannelState");
                        }
                        MessageChannelState.classInitializer = null;
                        MessageChannelState.initializer = null;
                        MessageChannelState.classSymbols = null;
                        MessageChannelState.instanceSymbols = null;
                        MessageChannelState.OPEN = "open";
                        MessageChannelState.CLOSING = "closing";
                        MessageChannelState.CLOSED = "closed";
                        return MessageChannelState;
                    })(AS.ASNative);
                    system.MessageChannelState = MessageChannelState;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var Security = (function (_super) {
                        __extends(Security, _super);
                        function Security() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.Security");
                        }
                        Object.defineProperty(Security, "exactSettings", {
                            get: function () {
                                return Security._exactSettings;
                            },
                            set: function (value) {
                                value = !!value;
                                Security._exactSettings = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Security, "disableAVM1Loading", {
                            get: function () {
                                notImplemented("public flash.system.Security::get disableAVM1Loading");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.system.Security::set disableAVM1Loading");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Security, "sandboxType", {
                            get: function () {
                                somewhatImplemented("public flash.system.Security::get sandboxType");
                                return Security._sandboxType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Security, "pageDomain", {
                            get: function () {
                                somewhatImplemented("public flash.system.Security::get pageDomain");
                                var pageHost = Shumway.FileLoadingService.instance.resolveUrl('/');
                                var parts = pageHost.split('/');
                                parts.pop();
                                return parts.pop();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Security.allowDomain = function () {
                            somewhatImplemented("public flash.system.Security::static allowDomain [\"" + Array.prototype.join.call(arguments, "\", \"") + "\"]");
                            var whitelist = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                            for (var i = 0; i < arguments.length; i++) {
                                whitelist.addToSWFLoadingWhitelist(asCoerceString(arguments[i]), false);
                            }
                        };
                        Security.allowInsecureDomain = function () {
                            somewhatImplemented("public flash.system.Security::static allowInsecureDomain");
                            var whitelist = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                            for (var i = 0; i < arguments.length; i++) {
                                whitelist.addToSWFLoadingWhitelist(asCoerceString(arguments[i]), true);
                            }
                        };
                        Security.loadPolicyFile = function (url) {
                            url = asCoerceString(url);
                            somewhatImplemented("public flash.system.Security::static loadPolicyFile");
                        };
                        Security.showSettings = function (panel) {
                            if (panel === void 0) { panel = "default"; }
                            panel = asCoerceString(panel);
                            notImplemented("public flash.system.Security::static showSettings");
                            return;
                        };
                        Security.duplicateSandboxBridgeInputArguments = function (toplevel, args) {
                            toplevel = toplevel;
                            args = args;
                            notImplemented("public flash.system.Security::static duplicateSandboxBridgeInputArguments");
                            return;
                        };
                        Security.duplicateSandboxBridgeOutputArgument = function (toplevel, arg) {
                            toplevel = toplevel;
                            notImplemented("public flash.system.Security::static duplicateSandboxBridgeOutputArgument");
                            return;
                        };
                        Security.classInitializer = null;
                        Security.initializer = null;
                        Security.classSymbols = null;
                        Security.instanceSymbols = null;
                        Security.REMOTE = "remote";
                        Security.LOCAL_WITH_FILE = "localWithFile";
                        Security.LOCAL_WITH_NETWORK = "localWithNetwork";
                        Security.LOCAL_TRUSTED = "localTrusted";
                        Security.APPLICATION = "application";
                        Security._exactSettings = false;
                        Security._sandboxType = 'remote';
                        return Security;
                    })(AS.ASNative);
                    system.Security = Security;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SecurityDomain = (function (_super) {
                        __extends(SecurityDomain, _super);
                        function SecurityDomain() {
                            false && _super.call(this);
                        }
                        Object.defineProperty(SecurityDomain, "currentDomain", {
                            get: function () {
                                if (!this._currentDomain) {
                                    this._currentDomain = new system.SecurityDomain();
                                }
                                somewhatImplemented("public flash.system.SecurityDomain::get currentDomain");
                                return this._currentDomain;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SecurityDomain.classInitializer = null;
                        SecurityDomain.initializer = null;
                        SecurityDomain.classSymbols = null;
                        SecurityDomain.instanceSymbols = null;
                        return SecurityDomain;
                    })(AS.ASNative);
                    system.SecurityDomain = SecurityDomain;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SecurityPanel = (function (_super) {
                        __extends(SecurityPanel, _super);
                        function SecurityPanel() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.SecurityPanel");
                        }
                        SecurityPanel.classInitializer = null;
                        SecurityPanel.initializer = null;
                        SecurityPanel.classSymbols = null;
                        SecurityPanel.instanceSymbols = null;
                        SecurityPanel.DEFAULT = "default";
                        SecurityPanel.PRIVACY = "privacy";
                        SecurityPanel.LOCAL_STORAGE = "localStorage";
                        SecurityPanel.MICROPHONE = "microphone";
                        SecurityPanel.CAMERA = "camera";
                        SecurityPanel.DISPLAY = "display";
                        SecurityPanel.SETTINGS_MANAGER = "settingsManager";
                        return SecurityPanel;
                    })(AS.ASNative);
                    system.SecurityPanel = SecurityPanel;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TouchscreenType = (function (_super) {
                        __extends(TouchscreenType, _super);
                        function TouchscreenType() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.TouchscreenType");
                        }
                        TouchscreenType.classInitializer = null;
                        TouchscreenType.initializer = null;
                        TouchscreenType.classSymbols = null;
                        TouchscreenType.instanceSymbols = null;
                        TouchscreenType.FINGER = "finger";
                        TouchscreenType.STYLUS = "stylus";
                        TouchscreenType.NONE = "none";
                        return TouchscreenType;
                    })(AS.ASNative);
                    system.TouchscreenType = TouchscreenType;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var AntiAliasType = (function (_super) {
                        __extends(AntiAliasType, _super);
                        function AntiAliasType() {
                            _super.call(this);
                        }
                        AntiAliasType.fromNumber = function (n) {
                            switch (n) {
                                case 1:
                                    return AntiAliasType.NORMAL;
                                case 2:
                                    return AntiAliasType.ADVANCED;
                                default:
                                    return null;
                            }
                        };
                        AntiAliasType.toNumber = function (value) {
                            switch (value) {
                                case AntiAliasType.NORMAL:
                                    return 1;
                                case AntiAliasType.ADVANCED:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        AntiAliasType.classInitializer = null;
                        AntiAliasType.initializer = null;
                        AntiAliasType.classSymbols = null;
                        AntiAliasType.instanceSymbols = null;
                        AntiAliasType.NORMAL = "normal";
                        AntiAliasType.ADVANCED = "advanced";
                        return AntiAliasType;
                    })(AS.ASNative);
                    text.AntiAliasType = AntiAliasType;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var FontStyle = (function (_super) {
                        __extends(FontStyle, _super);
                        function FontStyle() {
                            _super.call(this);
                        }
                        FontStyle.classInitializer = null;
                        FontStyle.initializer = null;
                        FontStyle.classSymbols = null;
                        FontStyle.instanceSymbols = null;
                        FontStyle.REGULAR = "regular";
                        FontStyle.BOLD = "bold";
                        FontStyle.ITALIC = "italic";
                        FontStyle.BOLD_ITALIC = "boldItalic";
                        return FontStyle;
                    })(AS.ASNative);
                    text.FontStyle = FontStyle;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var FontType = (function (_super) {
                        __extends(FontType, _super);
                        function FontType() {
                            _super.call(this);
                        }
                        FontType.classInitializer = null;
                        FontType.initializer = null;
                        FontType.classSymbols = null;
                        FontType.instanceSymbols = null;
                        FontType.EMBEDDED = "embedded";
                        FontType.EMBEDDED_CFF = "embeddedCFF";
                        FontType.DEVICE = "device";
                        return FontType;
                    })(AS.ASNative);
                    text.FontType = FontType;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FontStyle = flash.text.FontStyle;
                    var FontType = flash.text.FontType;
                    var Font = (function (_super) {
                        __extends(Font, _super);
                        function Font() {
                            false && _super.call(this);
                        }
                        Font._getFontMetrics = function (name, style) {
                            return this._deviceFontMetrics[name + style] || this._deviceFontMetrics[name];
                        };
                        Font.resolveFontName = function (name) {
                            if (name === '_sans') {
                                return Font.DEFAULT_FONT_SANS;
                            }
                            else if (name === '_serif') {
                                return Font.DEFAULT_FONT_SERIF;
                            }
                            else if (name === '_typewriter') {
                                return Font.DEFAULT_FONT_TYPEWRITER;
                            }
                            return name;
                        };
                        Font.getBySymbolId = function (id) {
                            return this._fontsBySymbolId[id];
                        };
                        Font.getByNameAndStyle = function (name, style) {
                            var key;
                            var font;
                            var names = name.split(',');
                            for (var i = 0; i < names.length && !font; i++) {
                                key = names[i].toLowerCase() + style;
                                font = this._fontsByName[key];
                            }
                            if (!font) {
                                var font = new Font();
                                font._fontName = names[0];
                                font._fontFamily = Font.resolveFontName(names[0].toLowerCase());
                                font._fontStyle = style;
                                font._fontType = FontType.DEVICE;
                                this._fontsByName[key] = font;
                            }
                            if (font._fontType === FontType.DEVICE) {
                                var metrics = Font._getFontMetrics(font._fontName, font._fontStyle);
                                if (!metrics) {
                                    Shumway.Debug.warning('Font metrics for "' + font._fontName + '" unknown. Fallback to default.');
                                    metrics = Font._getFontMetrics(Font.DEFAULT_FONT_SANS, font._fontStyle);
                                    font._fontFamily = Font.DEFAULT_FONT_SANS;
                                }
                                font.ascent = metrics[0];
                                font.descent = metrics[1];
                                font.leading = metrics[2];
                            }
                            return font;
                        };
                        Font.getDefaultFont = function () {
                            return Font.getByNameAndStyle(Font.DEFAULT_FONT_SANS, FontStyle.REGULAR);
                        };
                        Font.enumerateFonts = function (enumerateDeviceFonts) {
                            if (enumerateDeviceFonts === void 0) { enumerateDeviceFonts = false; }
                            somewhatImplemented("public flash.text.Font::static enumerateFonts");
                            return Font._fonts.slice();
                        };
                        Font.registerFont = function (font) {
                            somewhatImplemented('Font.registerFont');
                        };
                        Font.registerEmbeddedFont = function (fontMapping, loaderInfo) {
                            var syncId = flash.display.DisplayObject.getNextSyncID();
                            var resolverProp = {
                                get: Font.resolveEmbeddedFont.bind(Font, loaderInfo, fontMapping.id, syncId),
                                configurable: true
                            };
                            Object.defineProperty(Font._fontsByName, fontMapping.name.toLowerCase() + fontMapping.style, resolverProp);
                            Object.defineProperty(Font._fontsByName, 'swffont' + syncId + fontMapping.style, resolverProp);
                            Object.defineProperty(Font._fontsBySymbolId, syncId + '', resolverProp);
                        };
                        Font.resolveEmbeddedFont = function (loaderInfo, id, syncId) {
                            var symbol = loaderInfo.getSymbolById(id);
                            symbol.syncId = syncId;
                            return Font._fontsBySymbolId[id];
                        };
                        Object.defineProperty(Font.prototype, "fontName", {
                            get: function () {
                                return this._fontName;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Font.prototype, "fontStyle", {
                            get: function () {
                                return this._fontStyle;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Font.prototype, "fontType", {
                            get: function () {
                                return this._fontType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Font.prototype.hasGlyphs = function (str) {
                            str = asCoerceString(str);
                            somewhatImplemented('Font#hasGlyphs');
                            return true;
                        };
                        Font.DEFAULT_FONT_SANS = 'Arial';
                        Font.DEFAULT_FONT_SERIF = 'Times New Roman';
                        Font.DEFAULT_FONT_TYPEWRITER = 'Courier New';
                        Font.classInitializer = function () {
                            Font._fonts = [];
                            Font._fontsBySymbolId = Shumway.ObjectUtilities.createMap();
                            Font._fontsByName = Shumway.ObjectUtilities.createMap();
                            Font.DEVICE_FONT_METRICS_WIN = {
                                "Arial": [1, 0.25, 0],
                                "Arial Baltic": [1, 0.25, 0],
                                "Arial Black": [1.0833, 0.3333, 0],
                                "Arial CE": [1, 0.25, 0],
                                "Arial CYR": [1, 0.25, 0],
                                "Arial Greek": [1, 0.25, 0],
                                "Arial TUR": [1, 0.25, 0],
                                "Comic Sans MS": [1.0833, 0.3333, 0],
                                "Courier New": [1, 0.25, 0],
                                "Courier New Baltic": [1, 0.25, 0],
                                "Courier New CE": [1, 0.25, 0],
                                "Courier New CYR": [1, 0.25, 0],
                                "Courier New Greek": [1, 0.25, 0],
                                "Courier New TUR": [1, 0.25, 0],
                                "Estrangelo Edessa": [0.75, 0.3333, 0],
                                "Franklin Gothic Medium": [1, 0.3333, 0],
                                "Gautami": [0.9167, 0.8333, 0],
                                "Georgia": [1, 0.25, 0],
                                "Impact": [1.0833, 0.25, 0],
                                "Latha": [1.0833, 0.25, 0],
                                "Lucida Console": [0.75, 0.25, 0],
                                "Lucida Sans Unicode": [1.0833, 0.25, 0],
                                "Mangal": [1.0833, 0.25, 0],
                                "Marlett": [1, 0, 0],
                                "Microsoft Sans Serif": [1.0833, 0.1667, 0],
                                "MV Boli": [0.9167, 0.25, 0],
                                "Palatino Linotype": [1.0833, 0.3333, 0],
                                "Raavi": [1.0833, 0.6667, 0],
                                "Shruti": [1, 0.5, 0],
                                "Sylfaen": [1, 0.3333, 0],
                                "Symbol": [1, 0.25, 0],
                                "Tahoma": [1, 0.1667, 0],
                                "Times New Roman": [1, 0.25, 0],
                                "Times New Roman Baltic": [1, 0.25, 0],
                                "Times New Roman CE": [1, 0.25, 0],
                                "Times New Roman CYR": [1, 0.25, 0],
                                "Times New Roman Greek": [1, 0.25, 0],
                                "Times New Roman TUR": [1, 0.25, 0],
                                "Trebuchet MS": [1.0833, 0.4167, 0],
                                "Tunga": [1, 0.75, 0],
                                "Verdana": [1, 0.1667, 0],
                                "Webdings": [1.0833, 0.5, 0],
                                "Wingdings": [0.9167, 0.25, 0]
                            };
                            Font.DEVICE_FONT_METRICS_MAC = {
                                "Al Bayan Bold": [1, 0.5833, 0],
                                "Al Bayan Plain": [1, 0.5, 0],
                                "Al Nile": [0.8333, 0.5, 0],
                                "Al Nile Bold": [0.8333, 0.5, 0],
                                "Al Tarikh Regular": [0.5833, 0.4167, 0],
                                "American Typewriter": [0.9167, 0.25, 0],
                                "American Typewriter Bold": [0.9167, 0.25, 0],
                                "American Typewriter Condensed": [0.9167, 0.25, 0],
                                "American Typewriter Condensed Bold": [0.9167, 0.25, 0],
                                "American Typewriter Condensed Light": [0.8333, 0.25, 0],
                                "American Typewriter Light": [0.9167, 0.25, 0],
                                "Andale Mono": [0.9167, 0.25, 0],
                                "Apple Braille": [0.75, 0.25, 0],
                                "Apple Braille Outline 6 Dot": [0.75, 0.25, 0],
                                "Apple Braille Outline 8 Dot": [0.75, 0.25, 0],
                                "Apple Braille Pinpoint 6 Dot": [0.75, 0.25, 0],
                                "Apple Braille Pinpoint 8 Dot": [0.75, 0.25, 0],
                                "Apple Chancery": [1.0833, 0.5, 0],
                                "Apple Color Emoji": [1.25, 0.4167, 0],
                                "Apple SD Gothic Neo Bold": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Heavy": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Light": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Medium": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Regular": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo SemiBold": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Thin": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo UltraLight": [0.9167, 0.3333, 0],
                                "Apple SD GothicNeo ExtraBold": [0.9167, 0.3333, 0],
                                "Apple Symbols": [0.6667, 0.25, 0],
                                "AppleGothic Regular": [0.9167, 0.3333, 0],
                                "AppleMyungjo Regular": [0.8333, 0.3333, 0],
                                "Arial": [0.9167, 0.25, 0],
                                "Arial Black": [1.0833, 0.3333, 0],
                                "Arial Bold": [0.9167, 0.25, 0],
                                "Arial Bold Italic": [0.9167, 0.25, 0],
                                "Arial Hebrew": [0.75, 0.3333, 0],
                                "Arial Hebrew Bold": [0.75, 0.3333, 0],
                                "Arial Hebrew Light": [0.75, 0.3333, 0],
                                "Arial Hebrew Scholar": [0.75, 0.3333, 0],
                                "Arial Hebrew Scholar Bold": [0.75, 0.3333, 0],
                                "Arial Hebrew Scholar Light": [0.75, 0.3333, 0],
                                "Arial Italic": [0.9167, 0.25, 0],
                                "Arial Narrow": [0.9167, 0.25, 0],
                                "Arial Narrow Bold": [0.9167, 0.25, 0],
                                "Arial Narrow Bold Italic": [0.9167, 0.25, 0],
                                "Arial Narrow Italic": [0.9167, 0.25, 0],
                                "Arial Rounded MT Bold": [0.9167, 0.25, 0],
                                "Arial Unicode MS": [1.0833, 0.25, 0],
                                "Athelas Bold": [0.9167, 0.25, 0],
                                "Athelas Bold Italic": [0.9167, 0.25, 0],
                                "Athelas Italic": [0.9167, 0.25, 0],
                                "Athelas Regular": [0.9167, 0.25, 0],
                                "Avenir Black": [1, 0.3333, 0],
                                "Avenir Black Oblique": [1, 0.3333, 0],
                                "Avenir Book": [1, 0.3333, 0],
                                "Avenir Book Oblique": [1, 0.3333, 0],
                                "Avenir Heavy": [1, 0.3333, 0],
                                "Avenir Heavy Oblique": [1, 0.3333, 0],
                                "Avenir Light": [1, 0.3333, 0],
                                "Avenir Light Oblique": [1, 0.3333, 0],
                                "Avenir Medium": [1, 0.3333, 0],
                                "Avenir Medium Oblique": [1, 0.3333, 0],
                                "Avenir Next Bold": [1, 0.3333, 0],
                                "Avenir Next Bold Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Bold": [1, 0.3333, 0],
                                "Avenir Next Condensed Bold Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Demi Bold": [1, 0.3333, 0],
                                "Avenir Next Condensed Demi Bold Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Heavy": [1, 0.3333, 0],
                                "Avenir Next Condensed Heavy Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Medium": [1, 0.3333, 0],
                                "Avenir Next Condensed Medium Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Regular": [1, 0.3333, 0],
                                "Avenir Next Condensed Ultra Light": [1, 0.3333, 0],
                                "Avenir Next Condensed Ultra Light Italic": [1, 0.3333, 0],
                                "Avenir Next Demi Bold": [1, 0.3333, 0],
                                "Avenir Next Demi Bold Italic": [1, 0.3333, 0],
                                "Avenir Next Heavy": [1, 0.3333, 0],
                                "Avenir Next Heavy Italic": [1, 0.3333, 0],
                                "Avenir Next Italic": [1, 0.3333, 0],
                                "Avenir Next Medium": [1, 0.3333, 0],
                                "Avenir Next Medium Italic": [1, 0.3333, 0],
                                "Avenir Next Regular": [1, 0.3333, 0],
                                "Avenir Next Ultra Light": [1, 0.3333, 0],
                                "Avenir Next Ultra Light Italic": [1, 0.3333, 0],
                                "Avenir Oblique": [1, 0.3333, 0],
                                "Avenir Roman": [1, 0.3333, 0],
                                "Ayuthaya": [1.0833, 0.3333, 0],
                                "Baghdad Regular": [0.9167, 0.4167, 0],
                                "Bangla MN": [1.0833, 0.75, 0],
                                "Bangla MN Bold": [1.0833, 0.75, 0],
                                "Bangla Sangam MN": [0.9167, 0.4167, 0],
                                "Bangla Sangam MN Bold": [0.9167, 0.4167, 0],
                                "Baoli SC Regular": [1.0833, 0.3333, 0],
                                "Baskerville": [0.9167, 0.25, 0],
                                "Baskerville Bold": [0.9167, 0.25, 0],
                                "Baskerville Bold Italic": [0.9167, 0.25, 0],
                                "Baskerville Italic": [0.9167, 0.25, 0],
                                "Baskerville SemiBold": [0.9167, 0.25, 0],
                                "Baskerville SemiBold Italic": [0.9167, 0.25, 0],
                                "Beirut Regular": [0.75, 0.25, 0],
                                "Big Caslon Medium": [0.9167, 0.25, 0],
                                "Bodoni 72 Bold": [0.9167, 0.25, 0],
                                "Bodoni 72 Book": [0.9167, 0.25, 0],
                                "Bodoni 72 Book Italic": [0.9167, 0.3333, 0],
                                "Bodoni 72 Oldstyle Bold": [0.9167, 0.25, 0],
                                "Bodoni 72 Oldstyle Book": [0.9167, 0.25, 0],
                                "Bodoni 72 Oldstyle Book Italic": [0.9167, 0.3333, 0],
                                "Bodoni 72 Smallcaps Book": [0.9167, 0.25, 0],
                                "Bodoni Ornaments": [0.8333, 0.1667, 0],
                                "Bradley Hand Bold": [0.8333, 0.4167, 0],
                                "Brush Script MT Italic": [0.9167, 0.3333, 0],
                                "Chalkboard": [1, 0.25, 0],
                                "Chalkboard Bold": [1, 0.25, 0],
                                "Chalkboard SE Bold": [1.1667, 0.25, 0],
                                "Chalkboard SE Light": [1.1667, 0.25, 0],
                                "Chalkboard SE Regular": [1.1667, 0.25, 0],
                                "Chalkduster": [1, 0.25, 0],
                                "Charter Black": [1, 0.25, 0],
                                "Charter Black Italic": [1, 0.25, 0],
                                "Charter Bold": [1, 0.25, 0],
                                "Charter Bold Italic": [1, 0.25, 0],
                                "Charter Italic": [1, 0.25, 0],
                                "Charter Roman": [1, 0.25, 0],
                                "Cochin": [0.9167, 0.25, 0],
                                "Cochin Bold": [0.9167, 0.25, 0],
                                "Cochin Bold Italic": [0.9167, 0.25, 0],
                                "Cochin Italic": [0.9167, 0.25, 0],
                                "Comic Sans MS": [1.0833, 0.25, 0],
                                "Comic Sans MS Bold": [1.0833, 0.25, 0],
                                "Copperplate": [0.75, 0.25, 0],
                                "Copperplate Bold": [0.75, 0.25, 0],
                                "Copperplate Light": [0.75, 0.25, 0],
                                "Corsiva Hebrew": [0.6667, 0.3333, 0],
                                "Corsiva Hebrew Bold": [0.6667, 0.3333, 0],
                                "Courier": [0.75, 0.25, 0],
                                "Courier Bold": [0.75, 0.25, 0],
                                "Courier Bold Oblique": [0.75, 0.25, 0],
                                "Courier New": [0.8333, 0.3333, 0],
                                "Courier New Bold": [0.8333, 0.3333, 0],
                                "Courier New Bold Italic": [0.8333, 0.3333, 0],
                                "Courier New Italic": [0.8333, 0.3333, 0],
                                "Courier Oblique": [0.75, 0.25, 0],
                                "Damascus Bold": [0.5833, 0.4167, 0],
                                "Damascus Light": [0.5833, 0.4167, 0],
                                "Damascus Medium": [0.5833, 0.4167, 0],
                                "Damascus Regular": [0.5833, 0.4167, 0],
                                "Damascus Semi Bold": [0.5833, 0.4167, 0],
                                "DecoType Naskh Regular": [1.1667, 0.6667, 0],
                                "Devanagari MT": [0.9167, 0.6667, 0],
                                "Devanagari MT Bold": [0.9167, 0.6667, 0],
                                "Devanagari Sangam MN": [0.9167, 0.4167, 0],
                                "Devanagari Sangam MN Bold": [0.9167, 0.4167, 0],
                                "Didot": [0.9167, 0.3333, 0],
                                "Didot Bold": [1, 0.3333, 0],
                                "Didot Italic": [0.9167, 0.25, 0],
                                "DIN Alternate Bold": [0.9167, 0.25, 0],
                                "DIN Condensed Bold": [0.75, 0.25, 0],
                                "Diwan Kufi Regular": [1.4167, 0.5, 0],
                                "Diwan Thuluth Regular": [1, 0.6667, 0],
                                "Euphemia UCAS": [1.0833, 0.25, 0],
                                "Euphemia UCAS Bold": [1.0833, 0.25, 0],
                                "Euphemia UCAS Italic": [1.0833, 0.25, 0],
                                "Farah Regular": [0.75, 0.25, 0],
                                "Farisi Regular": [1.0833, 1, 0],
                                "Futura Condensed ExtraBold": [1, 0.25, 0],
                                "Futura Condensed Medium": [1, 0.25, 0],
                                "Futura Medium": [1, 0.25, 0],
                                "Futura Medium Italic": [1, 0.25, 0],
                                "GB18030 Bitmap": [1.1667, 0.1667, 0],
                                "Geeza Pro Bold": [0.9167, 0.3333, 0],
                                "Geeza Pro Regular": [0.9167, 0.3333, 0],
                                "Geneva": [1, 0.25, 0],
                                "Georgia": [0.9167, 0.25, 0],
                                "Georgia Bold": [0.9167, 0.25, 0],
                                "Georgia Bold Italic": [0.9167, 0.25, 0],
                                "Georgia Italic": [0.9167, 0.25, 0],
                                "Gill Sans": [0.9167, 0.25, 0],
                                "Gill Sans Bold": [0.9167, 0.25, 0],
                                "Gill Sans Bold Italic": [0.9167, 0.25, 0],
                                "Gill Sans Italic": [0.9167, 0.25, 0],
                                "Gill Sans Light": [0.9167, 0.25, 0],
                                "Gill Sans Light Italic": [0.9167, 0.25, 0],
                                "Gill Sans SemiBold": [0.9167, 0.25, 0],
                                "Gill Sans SemiBold Italic": [0.9167, 0.25, 0],
                                "Gill Sans UltraBold": [1, 0.25, 0],
                                "Gujarati MT": [0.9167, 0.6667, 0],
                                "Gujarati MT Bold": [0.9167, 0.6667, 0],
                                "Gujarati Sangam MN": [0.8333, 0.4167, 0],
                                "Gujarati Sangam MN Bold": [0.8333, 0.4167, 0],
                                "GungSeo Regular": [0.8333, 0.25, 0],
                                "Gurmukhi MN": [0.9167, 0.25, 0],
                                "Gurmukhi MN Bold": [0.9167, 0.25, 0],
                                "Gurmukhi MT": [0.8333, 0.4167, 0],
                                "Gurmukhi Sangam MN": [0.9167, 0.3333, 0],
                                "Gurmukhi Sangam MN Bold": [0.9167, 0.3333, 0],
                                "Hannotate SC Bold": [1.0833, 0.3333, 0],
                                "Hannotate SC Regular": [1.0833, 0.3333, 0],
                                "Hannotate TC Bold": [1.0833, 0.3333, 0],
                                "Hannotate TC Regular": [1.0833, 0.3333, 0],
                                "HanziPen SC Bold": [1.0833, 0.3333, 0],
                                "HanziPen SC Regular": [1.0833, 0.3333, 0],
                                "HanziPen TC Bold": [1.0833, 0.3333, 0],
                                "HanziPen TC Regular": [1.0833, 0.3333, 0],
                                "HeadLineA Regular": [0.8333, 0.1667, 0],
                                "Heiti SC Light": [0.8333, 0.1667, 0],
                                "Heiti SC Medium": [0.8333, 0.1667, 0],
                                "Heiti TC Light": [0.8333, 0.1667, 0],
                                "Heiti TC Medium": [0.8333, 0.1667, 0],
                                "Helvetica": [0.75, 0.25, 0],
                                "Helvetica Bold": [0.75, 0.25, 0],
                                "Helvetica Bold Oblique": [0.75, 0.25, 0],
                                "Helvetica Light": [0.75, 0.25, 0],
                                "Helvetica Light Oblique": [0.75, 0.25, 0],
                                "Helvetica Neue": [0.9167, 0.25, 0],
                                "Helvetica Neue Bold": [1, 0.25, 0],
                                "Helvetica Neue Bold Italic": [1, 0.25, 0],
                                "Helvetica Neue Condensed Black": [1, 0.25, 0],
                                "Helvetica Neue Condensed Bold": [1, 0.25, 0],
                                "Helvetica Neue Italic": [0.9167, 0.25, 0],
                                "Helvetica Neue Light": [1, 0.25, 0],
                                "Helvetica Neue Light Italic": [0.9167, 0.25, 0],
                                "Helvetica Neue Medium": [1, 0.25, 0],
                                "Helvetica Neue Medium Italic": [1, 0.25, 0],
                                "Helvetica Neue Thin": [1, 0.25, 0],
                                "Helvetica Neue Thin Italic": [1, 0.25, 0],
                                "Helvetica Neue UltraLight": [0.9167, 0.25, 0],
                                "Helvetica Neue UltraLight Italic": [0.9167, 0.25, 0],
                                "Helvetica Oblique": [0.75, 0.25, 0],
                                "Herculanum": [0.8333, 0.1667, 0],
                                "Hiragino Kaku Gothic Pro W3": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic Pro W6": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic ProN W3": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic ProN W6": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic Std W8": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic StdN W8": [0.9167, 0.0833, 0],
                                "Hiragino Maru Gothic Pro W4": [0.9167, 0.0833, 0],
                                "Hiragino Maru Gothic ProN W4": [0.9167, 0.0833, 0],
                                "Hiragino Mincho Pro W3": [0.9167, 0.0833, 0],
                                "Hiragino Mincho Pro W6": [0.9167, 0.0833, 0],
                                "Hiragino Mincho ProN W3": [0.9167, 0.0833, 0],
                                "Hiragino Mincho ProN W6": [0.9167, 0.0833, 0],
                                "Hiragino Sans GB W3": [0.9167, 0.0833, 0],
                                "Hiragino Sans GB W6": [0.9167, 0.0833, 0],
                                "Hoefler Text": [0.75, 0.25, 0],
                                "Hoefler Text Black": [0.75, 0.25, 0],
                                "Hoefler Text Black Italic": [0.75, 0.25, 0],
                                "Hoefler Text Italic": [0.75, 0.25, 0],
                                "Hoefler Text Ornaments": [0.8333, 0.1667, 0],
                                "Impact": [1, 0.25, 0],
                                "InaiMathi": [0.8333, 0.4167, 0],
                                "Iowan Old Style Black": [1, 0.3333, 0],
                                "Iowan Old Style Black Italic": [1, 0.3333, 0],
                                "Iowan Old Style Bold": [1, 0.3333, 0],
                                "Iowan Old Style Bold Italic": [1, 0.3333, 0],
                                "Iowan Old Style Italic": [1, 0.3333, 0],
                                "Iowan Old Style Roman": [1, 0.3333, 0],
                                "Iowan Old Style Titling": [1, 0.3333, 0],
                                "ITF Devanagari Bold": [1.0833, 0.3333, 0],
                                "ITF Devanagari Book": [1.0833, 0.3333, 0],
                                "ITF Devanagari Demi": [1.0833, 0.3333, 0],
                                "ITF Devanagari Light": [1.0833, 0.3333, 0],
                                "ITF Devanagari Medium": [1.0833, 0.3333, 0],
                                "Kailasa Regular": [1.0833, 0.5833, 0],
                                "Kaiti SC Black": [1.0833, 0.3333, 0],
                                "Kaiti SC Bold": [1.0833, 0.3333, 0],
                                "Kaiti SC Regular": [1.0833, 0.3333, 0],
                                "Kaiti TC Bold": [1.0833, 0.3333, 0],
                                "Kaiti TC Regular": [1.0833, 0.3333, 0],
                                "Kannada MN": [0.9167, 0.25, 0],
                                "Kannada MN Bold": [0.9167, 0.25, 0],
                                "Kannada Sangam MN": [1, 0.5833, 0],
                                "Kannada Sangam MN Bold": [1, 0.5833, 0],
                                "Kefa Bold": [0.9167, 0.25, 0],
                                "Kefa Regular": [0.9167, 0.25, 0],
                                "Khmer MN": [1, 0.8333, 0],
                                "Khmer MN Bold": [1, 0.8333, 0],
                                "Khmer Sangam MN": [1.0833, 0.8333, 0],
                                "Kohinoor Devanagari Bold": [1.0833, 0.3333, 0],
                                "Kohinoor Devanagari Book": [1.0833, 0.3333, 0],
                                "Kohinoor Devanagari Demi": [1.0833, 0.3333, 0],
                                "Kohinoor Devanagari Light": [1.0833, 0.3333, 0],
                                "Kohinoor Devanagari Medium": [1.0833, 0.3333, 0],
                                "Kokonor Regular": [1.0833, 0.5833, 0],
                                "Krungthep": [1, 0.25, 0],
                                "KufiStandardGK Regular": [0.9167, 0.5, 0],
                                "Lantinghei SC Demibold": [1, 0.3333, 0],
                                "Lantinghei SC Extralight": [1, 0.3333, 0],
                                "Lantinghei SC Heavy": [1, 0.3333, 0],
                                "Lantinghei TC Demibold": [1, 0.3333, 0],
                                "Lantinghei TC Extralight": [1, 0.3333, 0],
                                "Lantinghei TC Heavy": [1, 0.3333, 0],
                                "Lao MN": [0.9167, 0.4167, 0],
                                "Lao MN Bold": [0.9167, 0.4167, 0],
                                "Lao Sangam MN": [1, 0.3333, 0],
                                "Libian SC Regular": [1.0833, 0.3333, 0],
                                "LiHei Pro": [0.8333, 0.1667, 0],
                                "LiSong Pro": [0.8333, 0.1667, 0],
                                "Lucida Grande": [1, 0.25, 0],
                                "Lucida Grande Bold": [1, 0.25, 0],
                                "Luminari": [1, 0.3333, 0],
                                "Malayalam MN": [1, 0.4167, 0],
                                "Malayalam MN Bold": [1, 0.4167, 0],
                                "Malayalam Sangam MN": [0.8333, 0.4167, 0],
                                "Malayalam Sangam MN Bold": [0.8333, 0.4167, 0],
                                "Marion Bold": [0.6667, 0.3333, 0],
                                "Marion Italic": [0.6667, 0.3333, 0],
                                "Marion Regular": [0.6667, 0.3333, 0],
                                "Marker Felt Thin": [0.8333, 0.25, 0],
                                "Marker Felt Wide": [0.9167, 0.25, 0],
                                "Menlo Bold": [0.9167, 0.25, 0],
                                "Menlo Bold Italic": [0.9167, 0.25, 0],
                                "Menlo Italic": [0.9167, 0.25, 0],
                                "Menlo Regular": [0.9167, 0.25, 0],
                                "Microsoft Sans Serif": [0.9167, 0.25, 0],
                                "Mishafi Gold Regular": [0.75, 0.6667, 0],
                                "Mishafi Regular": [0.75, 0.6667, 0],
                                "Monaco": [1, 0.25, 0],
                                "Mshtakan": [0.9167, 0.25, 0],
                                "Mshtakan Bold": [0.9167, 0.25, 0],
                                "Mshtakan BoldOblique": [0.9167, 0.25, 0],
                                "Mshtakan Oblique": [0.9167, 0.25, 0],
                                "Muna Black": [0.75, 0.3333, 0],
                                "Muna Bold": [0.75, 0.3333, 0],
                                "Muna Regular": [0.75, 0.3333, 0],
                                "Myanmar MN": [1, 0.4167, 0],
                                "Myanmar MN Bold": [1, 0.4167, 0],
                                "Myanmar Sangam MN": [0.9167, 0.4167, 0],
                                "Nadeem Regular": [0.9167, 0.4167, 0],
                                "Nanum Brush Script": [0.9167, 0.25, 0],
                                "Nanum Pen Script": [0.9167, 0.25, 0],
                                "NanumGothic": [0.9167, 0.25, 0],
                                "NanumGothic Bold": [0.9167, 0.25, 0],
                                "NanumGothic ExtraBold": [0.9167, 0.25, 0],
                                "NanumMyeongjo": [0.9167, 0.25, 0],
                                "NanumMyeongjo Bold": [0.9167, 0.25, 0],
                                "NanumMyeongjo ExtraBold": [0.9167, 0.25, 0],
                                "New Peninim MT": [0.75, 0.3333, 0],
                                "New Peninim MT Bold": [0.75, 0.3333, 0],
                                "New Peninim MT Bold Inclined": [0.75, 0.3333, 0],
                                "New Peninim MT Inclined": [0.75, 0.3333, 0],
                                "Noteworthy Bold": [1.25, 0.3333, 0],
                                "Noteworthy Light": [1.25, 0.3333, 0],
                                "Optima Bold": [0.9167, 0.25, 0],
                                "Optima Bold Italic": [0.9167, 0.25, 0],
                                "Optima ExtraBlack": [1, 0.25, 0],
                                "Optima Italic": [0.9167, 0.25, 0],
                                "Optima Regular": [0.9167, 0.25, 0],
                                "Oriya MN": [0.9167, 0.25, 0],
                                "Oriya MN Bold": [0.9167, 0.25, 0],
                                "Oriya Sangam MN": [0.8333, 0.4167, 0],
                                "Oriya Sangam MN Bold": [0.8333, 0.4167, 0],
                                "Osaka": [1, 0.25, 0],
                                "Osaka-Mono": [0.8333, 0.1667, 0],
                                "Palatino": [0.8333, 0.25, 0],
                                "Palatino Bold": [0.8333, 0.25, 0],
                                "Palatino Bold Italic": [0.8333, 0.25, 0],
                                "Palatino Italic": [0.8333, 0.25, 0],
                                "Papyrus": [0.9167, 0.5833, 0],
                                "Papyrus Condensed": [0.9167, 0.5833, 0],
                                "PCMyungjo Regular": [0.8333, 0.25, 0],
                                "Phosphate Inline": [0.9167, 0.25, 0],
                                "Phosphate Solid": [0.9167, 0.25, 0],
                                "PilGi Regular": [0.8333, 0.25, 0],
                                "Plantagenet Cherokee": [0.6667, 0.25, 0],
                                "PT Mono": [0.9167, 0.25, 0],
                                "PT Mono Bold": [0.9167, 0.25, 0],
                                "PT Sans": [0.9167, 0.25, 0],
                                "PT Sans Bold": [0.9167, 0.25, 0],
                                "PT Sans Bold Italic": [0.9167, 0.25, 0],
                                "PT Sans Caption": [0.9167, 0.25, 0],
                                "PT Sans Caption Bold": [0.9167, 0.25, 0],
                                "PT Sans Italic": [0.9167, 0.25, 0],
                                "PT Sans Narrow": [0.9167, 0.25, 0],
                                "PT Sans Narrow Bold": [0.9167, 0.25, 0],
                                "PT Serif": [1, 0.25, 0],
                                "PT Serif Bold": [1, 0.25, 0],
                                "PT Serif Bold Italic": [1, 0.25, 0],
                                "PT Serif Caption": [1, 0.25, 0],
                                "PT Serif Caption Italic": [1, 0.25, 0],
                                "PT Serif Italic": [1, 0.25, 0],
                                "Raanana": [0.75, 0.25, 0],
                                "Raanana Bold": [0.75, 0.25, 0],
                                "Sana Regular": [0.75, 0.25, 0],
                                "Sathu": [0.9167, 0.3333, 0],
                                "Savoye LET Plain CC.:1.0": [1.0833, 0.75, 0],
                                "Savoye LET Plain:1.0": [0.6667, 0.5, 0],
                                "Seravek": [0.9167, 0.3333, 0],
                                "Seravek Bold": [0.9167, 0.3333, 0],
                                "Seravek Bold Italic": [0.9167, 0.3333, 0],
                                "Seravek ExtraLight": [0.9167, 0.3333, 0],
                                "Seravek ExtraLight Italic": [0.9167, 0.3333, 0],
                                "Seravek Italic": [0.9167, 0.3333, 0],
                                "Seravek Light": [0.9167, 0.3333, 0],
                                "Seravek Light Italic": [0.9167, 0.3333, 0],
                                "Seravek Medium": [0.9167, 0.3333, 0],
                                "Seravek Medium Italic": [0.9167, 0.3333, 0],
                                "Shree Devanagari 714": [0.9167, 0.4167, 0],
                                "Shree Devanagari 714 Bold": [0.9167, 0.4167, 0],
                                "Shree Devanagari 714 Bold Italic": [0.9167, 0.4167, 0],
                                "Shree Devanagari 714 Italic": [0.9167, 0.4167, 0],
                                "SignPainter-HouseScript": [0.6667, 0.1667, 0],
                                "Silom": [1, 0.3333, 0],
                                "Sinhala MN": [0.9167, 0.25, 0],
                                "Sinhala MN Bold": [0.9167, 0.25, 0],
                                "Sinhala Sangam MN": [1.1667, 0.3333, 0],
                                "Sinhala Sangam MN Bold": [1.1667, 0.3333, 0],
                                "Skia Black": [0.75, 0.25, 0],
                                "Skia Black Condensed": [0.75, 0.25, 0],
                                "Skia Black Extended": [0.75, 0.25, 0],
                                "Skia Bold": [0.75, 0.25, 0],
                                "Skia Condensed": [0.75, 0.25, 0],
                                "Skia Extended": [0.75, 0.25, 0],
                                "Skia Light": [0.75, 0.25, 0],
                                "Skia Light Condensed": [0.75, 0.25, 0],
                                "Skia Light Extended": [0.75, 0.25, 0],
                                "Skia Regular": [0.75, 0.25, 0],
                                "Snell Roundhand": [0.9167, 0.3333, 0],
                                "Snell Roundhand Black": [0.9167, 0.3333, 0],
                                "Snell Roundhand Bold": [0.9167, 0.3333, 0],
                                "Songti SC Black": [1.0833, 0.3333, 0],
                                "Songti SC Bold": [1.0833, 0.3333, 0],
                                "Songti SC Light": [1.0833, 0.3333, 0],
                                "Songti SC Regular": [1.0833, 0.3333, 0],
                                "Songti TC Bold": [1.0833, 0.3333, 0],
                                "Songti TC Light": [1.0833, 0.3333, 0],
                                "Songti TC Regular": [1.0833, 0.3333, 0],
                                "STFangsong": [0.8333, 0.1667, 0],
                                "STHeiti": [0.8333, 0.1667, 0],
                                "STIXGeneral-Bold": [1.0833, 0.4167, 0],
                                "STIXGeneral-BoldItalic": [1.0833, 0.4167, 0],
                                "STIXGeneral-Italic": [1.0833, 0.4167, 0],
                                "STIXGeneral-Regular": [1.0833, 0.4167, 0],
                                "STIXIntegralsD-Bold": [2.1667, 0.4167, 0],
                                "STIXIntegralsD-Regular": [2.1667, 0.4167, 0],
                                "STIXIntegralsSm-Bold": [1.0833, 0.4167, 0],
                                "STIXIntegralsSm-Regular": [1.0833, 0.4167, 0],
                                "STIXIntegralsUp-Bold": [1.0833, 0.4167, 0],
                                "STIXIntegralsUp-Regular": [1.0833, 0.4167, 0],
                                "STIXIntegralsUpD-Bold": [2.1667, 0.4167, 0],
                                "STIXIntegralsUpD-Regular": [2.1667, 0.4167, 0],
                                "STIXIntegralsUpSm-Bold": [1.0833, 0.4167, 0],
                                "STIXIntegralsUpSm-Regular": [1.0833, 0.4167, 0],
                                "STIXNonUnicode-Bold": [1.4167, 0.5833, 0],
                                "STIXNonUnicode-BoldItalic": [1.4167, 0.5833, 0],
                                "STIXNonUnicode-Italic": [1.4167, 0.5833, 0],
                                "STIXNonUnicode-Regular": [1.4167, 0.5833, 0],
                                "STIXSizeFiveSym-Regular": [1, 0.4167, 0],
                                "STIXSizeFourSym-Bold": [2.5833, 0.5, 0],
                                "STIXSizeFourSym-Regular": [2.5833, 0.5, 0],
                                "STIXSizeOneSym-Bold": [1.5833, 0.3333, 0],
                                "STIXSizeOneSym-Regular": [1.5833, 0.3333, 0],
                                "STIXSizeThreeSym-Bold": [2.5833, 0.5, 0],
                                "STIXSizeThreeSym-Regular": [2.5833, 0.5, 0],
                                "STIXSizeTwoSym-Bold": [2.0833, 0.4167, 0],
                                "STIXSizeTwoSym-Regular": [2.0833, 0.4167, 0],
                                "STIXVariants-Bold": [1.0833, 0.4167, 0],
                                "STIXVariants-Regular": [1.0833, 0.4167, 0],
                                "STKaiti": [0.8333, 0.1667, 0],
                                "STSong": [0.8333, 0.1667, 0],
                                "STXihei": [0.8333, 0.1667, 0],
                                "Sukhumvit Set Bold": [1.0833, 0.5, 0],
                                "Sukhumvit Set Light": [1.0833, 0.5, 0],
                                "Sukhumvit Set Medium": [1.0833, 0.5, 0],
                                "Sukhumvit Set Semi Bold": [1.0833, 0.5, 0],
                                "Sukhumvit Set Text": [1.0833, 0.5, 0],
                                "Sukhumvit Set Thin": [1.0833, 0.5, 0],
                                "Superclarendon Black": [1, 0.25, 0],
                                "Superclarendon Black Italic": [1, 0.25, 0],
                                "Superclarendon Bold": [1, 0.25, 0],
                                "Superclarendon Bold Italic": [1, 0.25, 0],
                                "Superclarendon Italic": [1, 0.25, 0],
                                "Superclarendon Light": [1, 0.25, 0],
                                "Superclarendon Light Italic": [1, 0.25, 0],
                                "Superclarendon Regular": [1, 0.25, 0],
                                "Symbol": [0.6667, 0.3333, 0],
                                "System Font Bold": [1, 0.25, 0],
                                "System Font Bold Italic": [1, 0.25, 0],
                                "System Font Heavy": [1, 0.25, 0],
                                "System Font Italic": [1, 0.25, 0],
                                "System Font Light": [1, 0.25, 0],
                                "System Font Medium Italic P4": [1, 0.25, 0],
                                "System Font Medium P4": [1, 0.25, 0],
                                "System Font Regular": [1, 0.25, 0],
                                "System Font Thin": [1, 0.25, 0],
                                "System Font UltraLight": [1, 0.25, 0],
                                "Tahoma": [1, 0.1667, 0],
                                "Tahoma Negreta": [1, 0.1667, 0],
                                "Tamil MN": [0.9167, 0.25, 0],
                                "Tamil MN Bold": [0.9167, 0.25, 0],
                                "Tamil Sangam MN": [0.75, 0.25, 0],
                                "Tamil Sangam MN Bold": [0.75, 0.25, 0],
                                "Telugu MN": [0.9167, 0.25, 0],
                                "Telugu MN Bold": [0.9167, 0.25, 0],
                                "Telugu Sangam MN": [1, 0.5833, 0],
                                "Telugu Sangam MN Bold": [1, 0.5833, 0],
                                "Thonburi": [1.0833, 0.25, 0],
                                "Thonburi Bold": [1.0833, 0.25, 0],
                                "Thonburi Light": [1.0833, 0.25, 0],
                                "Times Bold": [0.75, 0.25, 0],
                                "Times Bold Italic": [0.75, 0.25, 0],
                                "Times Italic": [0.75, 0.25, 0],
                                "Times New Roman": [0.9167, 0.25, 0],
                                "Times New Roman Bold": [0.9167, 0.25, 0],
                                "Times New Roman Bold Italic": [0.9167, 0.25, 0],
                                "Times New Roman Italic": [0.9167, 0.25, 0],
                                "Times Roman": [0.75, 0.25, 0],
                                "Trattatello": [1.1667, 0.6667, 0],
                                "Trebuchet MS": [0.9167, 0.25, 0],
                                "Trebuchet MS Bold": [0.9167, 0.25, 0],
                                "Trebuchet MS Bold Italic": [0.9167, 0.25, 0],
                                "Trebuchet MS Italic": [0.9167, 0.25, 0],
                                "Verdana": [1, 0.25, 0],
                                "Verdana Bold": [1, 0.25, 0],
                                "Verdana Bold Italic": [1, 0.25, 0],
                                "Verdana Italic": [1, 0.25, 0],
                                "Waseem Light": [0.9167, 0.5833, 0],
                                "Waseem Regular": [0.9167, 0.5833, 0],
                                "Wawati SC Regular": [1.0833, 0.3333, 0],
                                "Wawati TC Regular": [1.0833, 0.3333, 0],
                                "Webdings": [0.8333, 0.1667, 0],
                                "Weibei SC Bold": [1.0833, 0.3333, 0],
                                "Weibei TC Bold": [1.0833, 0.3333, 0],
                                "Wingdings": [0.9167, 0.25, 0],
                                "Wingdings 2": [0.8333, 0.25, 0],
                                "Wingdings 3": [0.9167, 0.25, 0],
                                "Xingkai SC Bold": [1.0833, 0.3333, 0],
                                "Xingkai SC Light": [1.0833, 0.3333, 0],
                                "Yuanti SC Bold": [1.0833, 0.3333, 0],
                                "Yuanti SC Light": [1.0833, 0.3333, 0],
                                "Yuanti SC Regular": [1.0833, 0.3333, 0],
                                "YuGothic Bold": [0.9167, 0.0833, 0],
                                "YuGothic Medium": [0.9167, 0.0833, 0],
                                "YuMincho Demibold": [0.9167, 0.0833, 0],
                                "YuMincho Medium": [0.9167, 0.0833, 0],
                                "Yuppy SC Regular": [1.0833, 0.3333, 0],
                                "Yuppy TC Regular": [1.0833, 0.3333, 0],
                                "Zapf Dingbats": [0.8333, 0.1667, 0],
                                "Zapfino": [1.9167, 1.5, 0]
                            };
                            Font.DEVICE_FONT_METRICS_LINUX = {
                                "KacstFarsi": [1.0417, 0.5208, 0],
                                "Meera": [0.651, 0.4557, 0],
                                "FreeMono": [0.7812, 0.1953, 0],
                                "Loma": [1.1719, 0.4557, 0],
                                "Century Schoolbook L": [0.9766, 0.3255, 0],
                                "KacstTitleL": [1.0417, 0.5208, 0],
                                "Garuda": [1.3021, 0.5859, 0],
                                "Rekha": [1.1068, 0.2604, 0],
                                "Purisa": [1.1068, 0.5208, 0],
                                "DejaVu Sans Mono": [0.9115, 0.2604, 0],
                                "Vemana2000": [0.9115, 0.8464, 0],
                                "KacstOffice": [1.0417, 0.5208, 0],
                                "Umpush": [1.237, 0.651, 0],
                                "OpenSymbol": [0.7812, 0.1953, 0],
                                "Sawasdee": [1.1068, 0.4557, 0],
                                "URW Palladio L": [0.9766, 0.3255, 0],
                                "FreeSerif": [0.9115, 0.3255, 0],
                                "KacstDigital": [1.0417, 0.5208, 0],
                                "Ubuntu Condensed": [0.9115, 0.1953, 0],
                                "mry_KacstQurn": [1.4323, 0.7161, 0],
                                "URW Gothic L": [0.9766, 0.2604, 0],
                                "Dingbats": [0.8464, 0.1953, 0],
                                "URW Chancery L": [0.9766, 0.3255, 0],
                                "Phetsarath OT": [1.1068, 0.5208, 0],
                                "Tlwg Typist": [0.9115, 0.3906, 0],
                                "KacstLetter": [1.0417, 0.5208, 0],
                                "utkal": [1.1719, 0.651, 0],
                                "Norasi": [1.237, 0.5208, 0],
                                "KacstOne": [1.237, 0.651, 0],
                                "Liberation Sans Narrow": [0.9115, 0.2604, 0],
                                "Symbol": [1.0417, 0.3255, 0],
                                "NanumMyeongjo": [0.9115, 0.2604, 0],
                                "Untitled1": [0.651, 0.5859, 0],
                                "Lohit Gujarati": [0.9115, 0.3906, 0],
                                "Liberation Mono": [0.8464, 0.3255, 0],
                                "KacstArt": [1.0417, 0.5208, 0],
                                "Mallige": [0.9766, 0.651, 0],
                                "Bitstream Charter": [0.9766, 0.2604, 0],
                                "NanumGothic": [0.9115, 0.2604, 0],
                                "Liberation Serif": [0.9115, 0.2604, 0],
                                "Ubuntu": [0.9115, 0.1953, 0],
                                "Courier 10 Pitch": [0.8464, 0.3255, 0],
                                "Nimbus Sans L": [0.9766, 0.3255, 0],
                                "TakaoPGothic": [0.9115, 0.1953, 0],
                                "WenQuanYi Micro Hei Mono": [0.9766, 0.2604, 0],
                                "DejaVu Sans": [0.9115, 0.2604, 0],
                                "Kedage": [0.9766, 0.651, 0],
                                "Kinnari": [1.3021, 0.5208, 0],
                                "TlwgMono": [0.8464, 0.3906, 0],
                                "Standard Symbols L": [1.0417, 0.3255, 0],
                                "Lohit Punjabi": [1.1719, 0.651, 0],
                                "Nimbus Mono L": [0.8464, 0.3255, 0],
                                "Rachana": [0.651, 0.5859, 0],
                                "Waree": [1.237, 0.4557, 0],
                                "KacstPoster": [1.0417, 0.5208, 0],
                                "Khmer OS": [1.3021, 0.7161, 0],
                                "FreeSans": [0.9766, 0.3255, 0],
                                "gargi": [0.9115, 0.3255, 0],
                                "Nimbus Roman No9 L": [0.9115, 0.3255, 0],
                                "DejaVu Serif": [0.9115, 0.2604, 0],
                                "WenQuanYi Micro Hei": [0.9766, 0.2604, 0],
                                "Ubuntu Light": [0.9115, 0.1953, 0],
                                "TlwgTypewriter": [0.9115, 0.3906, 0],
                                "KacstPen": [1.0417, 0.5208, 0],
                                "Tlwg Typo": [0.9115, 0.3906, 0],
                                "Mukti Narrow": [1.237, 0.4557, 0],
                                "Ubuntu Mono": [0.8464, 0.1953, 0],
                                "Lohit Bengali": [0.9766, 0.4557, 0],
                                "Liberation Sans": [0.9115, 0.2604, 0],
                                "KacstDecorative": [1.1068, 0.5208, 0],
                                "Khmer OS System": [1.237, 0.5859, 0],
                                "Saab": [0.9766, 0.651, 0],
                                "KacstTitle": [1.0417, 0.5208, 0],
                                "Mukti Narrow Bold": [1.237, 0.4557, 0],
                                "Lohit Hindi": [0.9766, 0.5208, 0],
                                "KacstQurn": [1.0417, 0.5208, 0],
                                "URW Bookman L": [0.9766, 0.3255, 0],
                                "KacstNaskh": [1.0417, 0.5208, 0],
                                "KacstScreen": [1.0417, 0.5208, 0],
                                "Pothana2000": [0.9115, 0.8464, 0],
                                "Lohit Tamil": [0.8464, 0.3906, 0],
                                "KacstBook": [1.0417, 0.5208, 0],
                                "Sans": [0.9115, 0.2604, 0],
                                "Times": [0.9115, 0.3255, 0],
                                "Monospace": [0.9115, 0.2604, 0]
                            };
                            Font.DEVICE_FONT_METRICS_BUILTIN = {
                                "_sans": [0.9, 0.22, 0.08],
                                "_serif": [0.88, 0.26, 0.08],
                                "_typewriter": [0.86, 0.24, 0.08]
                            };
                            Font.DEVICE_FONT_METRICS_WIN.__proto__ = Font.DEVICE_FONT_METRICS_BUILTIN;
                            Font.DEVICE_FONT_METRICS_MAC.__proto__ = Font.DEVICE_FONT_METRICS_BUILTIN;
                            Font.DEVICE_FONT_METRICS_LINUX.__proto__ = Font.DEVICE_FONT_METRICS_BUILTIN;
                            var userAgent = self.navigator.userAgent;
                            if (userAgent.indexOf("Windows") > -1) {
                                Font._deviceFontMetrics = Font.DEVICE_FONT_METRICS_WIN;
                            }
                            else if (/(Macintosh|iPad|iPhone|iPod|Android)/.test(userAgent)) {
                                Font._deviceFontMetrics = this.DEVICE_FONT_METRICS_MAC;
                                Font.DEFAULT_FONT_SANS = 'Helvetica';
                                Font.DEFAULT_FONT_SERIF = 'Times Roman';
                                Font.DEFAULT_FONT_TYPEWRITER = 'Courier';
                            }
                            else {
                                Font._deviceFontMetrics = this.DEVICE_FONT_METRICS_LINUX;
                                Font.DEFAULT_FONT_SANS = 'Sans';
                                Font.DEFAULT_FONT_SERIF = 'Times';
                                Font.DEFAULT_FONT_TYPEWRITER = 'Monospace';
                            }
                            var metrics = Font._deviceFontMetrics;
                            for (var fontName in metrics) {
                                metrics[fontName.toLowerCase()] = metrics[fontName];
                            }
                        };
                        Font.classSymbols = null;
                        Font.instanceSymbols = null;
                        Font.initializer = function (symbol) {
                            var self = this;
                            self._fontName = null;
                            self._fontFamily = null;
                            self._fontStyle = null;
                            self._fontType = null;
                            self.ascent = 0;
                            self.descent = 0;
                            self.leading = 0;
                            self.advances = null;
                            if (!symbol) {
                                self._id = flash.display.DisplayObject.getNextSyncID();
                                return;
                            }
                            self._symbol = symbol;
                            release || Shumway.Debug.assert(symbol.syncId);
                            self._id = symbol.syncId;
                            self._fontName = symbol.name;
                            self._fontFamily = Font.resolveFontName(symbol.name);
                            if (symbol.bold) {
                                if (symbol.italic) {
                                    self._fontStyle = FontStyle.BOLD_ITALIC;
                                }
                                else {
                                    self._fontStyle = FontStyle.BOLD;
                                }
                            }
                            else if (symbol.italic) {
                                self._fontStyle = FontStyle.ITALIC;
                            }
                            else {
                                self._fontStyle = FontStyle.REGULAR;
                            }
                            var metrics = symbol.metrics;
                            if (metrics) {
                                self.ascent = metrics.ascent;
                                self.descent = metrics.descent;
                                self.leading = metrics.leading;
                                self.advances = metrics.advances;
                            }
                            self._fontType = metrics ? FontType.EMBEDDED : FontType.DEVICE;
                            var fontProp = Object.getOwnPropertyDescriptor(Font._fontsBySymbolId, symbol.syncId + '');
                            if (!fontProp || !fontProp.value) {
                                var resolverProp = {
                                    value: self,
                                    configurable: true
                                };
                                Object.defineProperty(Font._fontsBySymbolId, symbol.syncId + '', resolverProp);
                                Object.defineProperty(Font._fontsByName, symbol.name.toLowerCase() + self._fontStyle, resolverProp);
                                if (self._fontType === FontType.EMBEDDED) {
                                    Object.defineProperty(Font._fontsByName, 'swffont' + symbol.syncId + self._fontStyle, resolverProp);
                                }
                            }
                        };
                        return Font;
                    })(AS.ASNative);
                    text.Font = Font;
                    var FontSymbol = (function (_super) {
                        __extends(FontSymbol, _super);
                        function FontSymbol(data) {
                            _super.call(this, data, Font);
                        }
                        FontSymbol.FromData = function (data) {
                            var symbol = new FontSymbol(data);
                            symbol.ready = !data.metrics;
                            symbol.name = data.name;
                            symbol.data = { id: data.id };
                            symbol.bold = data.bold;
                            symbol.italic = data.italic;
                            symbol.originalSize = data.originalSize;
                            symbol.codes = data.codes;
                            symbol.metrics = data.metrics;
                            symbol.syncId = flash.display.DisplayObject.getNextSyncID();
                            return symbol;
                        };
                        Object.defineProperty(FontSymbol.prototype, "resolveAssetCallback", {
                            get: function () {
                                return this._unboundResolveAssetCallback.bind(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        FontSymbol.prototype._unboundResolveAssetCallback = function (data) {
                            release || Shumway.Debug.assert(!this.ready);
                            this.ready = true;
                        };
                        return FontSymbol;
                    })(Shumway.Timeline.Symbol);
                    text.FontSymbol = FontSymbol;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var GridFitType = (function (_super) {
                        __extends(GridFitType, _super);
                        function GridFitType() {
                            _super.call(this);
                        }
                        GridFitType.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return GridFitType.NONE;
                                case 1:
                                    return GridFitType.PIXEL;
                                case 2:
                                    return GridFitType.SUBPIXEL;
                                default:
                                    return null;
                            }
                        };
                        GridFitType.toNumber = function (value) {
                            switch (value) {
                                case GridFitType.NONE:
                                    return 0;
                                case GridFitType.PIXEL:
                                    return 1;
                                case GridFitType.SUBPIXEL:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        GridFitType.classInitializer = null;
                        GridFitType.initializer = null;
                        GridFitType.classSymbols = null;
                        GridFitType.instanceSymbols = null;
                        GridFitType.NONE = "none";
                        GridFitType.PIXEL = "pixel";
                        GridFitType.SUBPIXEL = "subpixel";
                        return GridFitType;
                    })(AS.ASNative);
                    text.GridFitType = GridFitType;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var StaticText = (function (_super) {
                        __extends(StaticText, _super);
                        function StaticText() {
                            false && _super.call(this);
                            flash.display.DisplayObject.instanceConstructorNoInitialize.call(this);
                        }
                        StaticText.prototype._canHaveTextContent = function () {
                            return true;
                        };
                        StaticText.prototype._getTextContent = function () {
                            return this._textContent;
                        };
                        Object.defineProperty(StaticText.prototype, "text", {
                            get: function () {
                                return this._textContent.plainText;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        StaticText.classInitializer = null;
                        StaticText.classSymbols = null;
                        StaticText.instanceSymbols = null;
                        StaticText.initializer = function (symbol) {
                            var self = this;
                            self._textContent = null;
                            if (symbol) {
                                this._setStaticContentFromSymbol(symbol);
                            }
                        };
                        return StaticText;
                    })(flash.display.DisplayObject);
                    text.StaticText = StaticText;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var assert = Shumway.Debug.assert;
                    var StyleSheet = (function (_super) {
                        __extends(StyleSheet, _super);
                        function StyleSheet() {
                            false && _super.call(this);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this.clear();
                        }
                        Object.defineProperty(StyleSheet.prototype, "styleNames", {
                            get: function () {
                                var styles = this._rules;
                                var names = [];
                                for (var name in styles) {
                                    if (styles[name]) {
                                        names.push(name);
                                    }
                                }
                                return names;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        StyleSheet.prototype.getStyle = function (styleName) {
                            styleName = asCoerceString(styleName);
                            var style = this._rules[styleName.toLowerCase()];
                            if (!style) {
                                return {};
                            }
                            return AS.ASJSON.transformJSValueToAS(style, false);
                        };
                        StyleSheet.prototype.applyStyle = function (textFormat, styleName) {
                            styleName = asCoerceString(styleName);
                            var style = this._rules[styleName.toLowerCase()];
                            if (style) {
                                return textFormat.transform(style);
                            }
                            return textFormat;
                        };
                        StyleSheet.prototype.setStyle = function (styleName, styleObject) {
                            if (typeof styleObject !== 'object') {
                                return;
                            }
                            styleName = asCoerceString(styleName);
                            this._rules[styleName.toLowerCase()] = AS.ASJSON.transformASValueToJS(styleObject, false);
                        };
                        StyleSheet.prototype.hasStyle = function (styleName) {
                            return !!this._rules[styleName.toLowerCase()];
                        };
                        StyleSheet.prototype.clear = function () {
                            this._rules = Object.create(null);
                        };
                        StyleSheet.prototype.transform = function (formatObject) {
                            if (typeof formatObject !== 'object') {
                                return null;
                            }
                            formatObject = AS.ASJSON.transformASValueToJS(formatObject, false);
                            var textFormat = new text.TextFormat();
                            textFormat.transform(formatObject);
                            return textFormat;
                        };
                        StyleSheet.prototype.parseCSS = function (css) {
                            css = asCoerceString(css) + '';
                            var length = css.length;
                            var index = skipWhitespace(css, 0, length);
                            var newStyles = {};
                            var currentNames = [];
                            var sawWhitespace = false;
                            var name = '';
                            while (index < length) {
                                var char = css[index++];
                                switch (char) {
                                    case '{':
                                        sawWhitespace = false;
                                        currentNames.push(name);
                                        index = parseStyle(css, index, length, currentNames, newStyles);
                                        if (index === -1) {
                                            return;
                                        }
                                        else if (!release) {
                                            assert(css[index - 1] === '}');
                                        }
                                        currentNames = [];
                                        name = '';
                                        index = skipWhitespace(css, index, length);
                                        break;
                                    case ',':
                                        sawWhitespace = false;
                                        currentNames.push(name);
                                        name = '';
                                        index = skipWhitespace(css, index, length);
                                        break;
                                    case ' ':
                                    case '\n':
                                    case '\r':
                                    case '\t':
                                        sawWhitespace = true;
                                        index = skipWhitespace(css, index, length);
                                        break;
                                    default:
                                        if (sawWhitespace) {
                                            return;
                                        }
                                        name += char;
                                }
                            }
                            var styles = this._rules;
                            for (name in newStyles) {
                                styles[name.toLowerCase()] = newStyles[name];
                            }
                        };
                        StyleSheet.classInitializer = null;
                        StyleSheet.initializer = null;
                        StyleSheet.classSymbols = null;
                        StyleSheet.instanceSymbols = null;
                        return StyleSheet;
                    })(flash.events.EventDispatcher);
                    text.StyleSheet = StyleSheet;
                    function parseStyle(css, index, length, names, newStyles) {
                        release || assert(index > 0);
                        release || assert(css[index - 1] === '{');
                        var style = {};
                        var name = '';
                        var sawWhitespace = false;
                        var upperCase = false;
                        index = skipWhitespace(css, index, length);
                        nameLoop: while (index < length) {
                            var char = css[index++];
                            switch (char) {
                                case '}':
                                    if (name.length > 0) {
                                        return -1;
                                    }
                                    break nameLoop;
                                case ':':
                                    var value = '';
                                    var propertyName = name;
                                    name = '';
                                    sawWhitespace = false;
                                    upperCase = false;
                                    valueLoop: while (index < length) {
                                        char = css[index];
                                        switch (char) {
                                            case ';':
                                            case '\r':
                                            case '\n':
                                                index++;
                                                index = skipWhitespace(css, index, length);
                                            case '}':
                                                style[propertyName] = value;
                                                continue nameLoop;
                                            default:
                                                index++;
                                                value += char;
                                        }
                                    }
                                    return -1;
                                case '-':
                                    if (css[index] === ':') {
                                        name += char;
                                    }
                                    else {
                                        upperCase = true;
                                    }
                                    break;
                                case ' ':
                                case '\n':
                                case '\r':
                                case '\t':
                                    sawWhitespace = true;
                                    name += char;
                                    upperCase = false;
                                    break;
                                default:
                                    if (sawWhitespace) {
                                        return -1;
                                    }
                                    if (upperCase) {
                                        char = char.toUpperCase();
                                        upperCase = false;
                                    }
                                    name += char;
                            }
                        }
                        if (css[index - 1] !== '}') {
                            return -1;
                        }
                        for (var i = 0; i < names.length; i++) {
                            newStyles[names[i]] = style;
                        }
                        return index;
                    }
                    function skipWhitespace(css, index, length) {
                        while (index < length) {
                            var char = css[index];
                            switch (char) {
                                case ' ':
                                case '\n':
                                case '\r':
                                case '\t':
                                    index++;
                                    break;
                                default:
                                    return index;
                            }
                        }
                        release || assert(index === length);
                        return length;
                    }
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextDisplayMode = (function (_super) {
                        __extends(TextDisplayMode, _super);
                        function TextDisplayMode() {
                            _super.call(this);
                        }
                        TextDisplayMode.classInitializer = null;
                        TextDisplayMode.initializer = null;
                        TextDisplayMode.classSymbols = null;
                        TextDisplayMode.instanceSymbols = null;
                        TextDisplayMode.LCD = "lcd";
                        TextDisplayMode.CRT = "crt";
                        TextDisplayMode.DEFAULT = "default";
                        return TextDisplayMode;
                    })(AS.ASNative);
                    text.TextDisplayMode = TextDisplayMode;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (_text) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var warning = Shumway.Debug.warning;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var clamp = Shumway.NumberUtilities.clamp;
                    var DisplayObjectFlags = flash.display.DisplayObjectFlags;
                    var TextField = (function (_super) {
                        __extends(TextField, _super);
                        function TextField() {
                            false && _super.call(this);
                            flash.display.InteractiveObject.instanceConstructorNoInitialize.call(this);
                        }
                        TextField.prototype._setFillAndLineBoundsFromSymbol = function (symbol) {
                            _super.prototype._setFillAndLineBoundsFromSymbol.call(this, symbol);
                            this._textContent.bounds = this._lineBounds;
                            this._invalidateContent();
                        };
                        TextField.prototype._setFillAndLineBoundsFromWidthAndHeight = function (width, height) {
                            _super.prototype._setFillAndLineBoundsFromWidthAndHeight.call(this, width, height);
                            this._textContent.bounds = this._lineBounds;
                            this._invalidateContent();
                        };
                        TextField.prototype._canHaveTextContent = function () {
                            return true;
                        };
                        TextField.prototype._getTextContent = function () {
                            return this._textContent;
                        };
                        TextField.prototype._getContentBounds = function (includeStrokes) {
                            if (includeStrokes === void 0) { includeStrokes = true; }
                            this._ensureLineMetrics();
                            return _super.prototype._getContentBounds.call(this, includeStrokes);
                        };
                        TextField.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            release || assert(this._getContentBounds().contains(localX, localY));
                            return true;
                        };
                        TextField.prototype._invalidateContent = function () {
                            if (this._textContent.flags & Shumway.TextContentFlags.Dirty) {
                                this._setFlags(8388608 /* DirtyTextContent */);
                            }
                        };
                        TextField.isFontCompatible = function (fontName, fontStyle) {
                            fontName = asCoerceString(fontName);
                            fontStyle = asCoerceString(fontStyle);
                            var font = _text.Font.getByNameAndStyle(fontName, fontStyle);
                            if (!font) {
                                return false;
                            }
                            return font.fontStyle === fontStyle;
                        };
                        Object.defineProperty(TextField.prototype, "alwaysShowSelection", {
                            get: function () {
                                return this._alwaysShowSelection;
                            },
                            set: function (value) {
                                this._alwaysShowSelection = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "antiAliasType", {
                            get: function () {
                                return this._antiAliasType;
                            },
                            set: function (antiAliasType) {
                                antiAliasType = asCoerceString(antiAliasType);
                                if (_text.AntiAliasType.toNumber(antiAliasType) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidParamError, "antiAliasType");
                                }
                                this._antiAliasType = antiAliasType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "autoSize", {
                            get: function () {
                                return this._autoSize;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === this._autoSize) {
                                    return;
                                }
                                if (_text.TextFieldAutoSize.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidParamError, "autoSize");
                                }
                                this._autoSize = value;
                                this._textContent.autoSize = _text.TextFieldAutoSize.toNumber(value);
                                this._invalidateContent();
                                this._ensureLineMetrics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "background", {
                            get: function () {
                                return this._background;
                            },
                            set: function (value) {
                                value = !!value;
                                if (value === this._background) {
                                    return;
                                }
                                this._background = value;
                                this._textContent.backgroundColor = value ? this._backgroundColor : 0;
                                this._setDirtyFlags(8388608 /* DirtyTextContent */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "backgroundColor", {
                            get: function () {
                                return this._backgroundColor >> 8;
                            },
                            set: function (value) {
                                value = ((value << 8) | 0xff) >>> 0;
                                if (value === this._backgroundColor) {
                                    return;
                                }
                                this._backgroundColor = value;
                                if (this._background) {
                                    this._textContent.backgroundColor = value;
                                    this._setDirtyFlags(8388608 /* DirtyTextContent */);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "border", {
                            get: function () {
                                return this._border;
                            },
                            set: function (value) {
                                value = !!value;
                                if (value === this._border) {
                                    return;
                                }
                                this._border = value;
                                this._textContent.borderColor = value ? this._borderColor : 0;
                                this._setDirtyFlags(8388608 /* DirtyTextContent */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "borderColor", {
                            get: function () {
                                return this._borderColor >> 8;
                            },
                            set: function (value) {
                                value = ((value << 8) | 0xff) >>> 0;
                                if (value === this._borderColor) {
                                    return;
                                }
                                this._borderColor = value;
                                if (this._border) {
                                    this._textContent.borderColor = value;
                                    this._setDirtyFlags(8388608 /* DirtyTextContent */);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "bottomScrollV", {
                            get: function () {
                                return this._bottomScrollV;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "caretIndex", {
                            get: function () {
                                notImplemented("public flash.text.TextField::get caretIndex");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "condenseWhite", {
                            get: function () {
                                return this._condenseWhite;
                            },
                            set: function (value) {
                                this._condenseWhite = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "defaultTextFormat", {
                            get: function () {
                                return this._textContent.defaultTextFormat.clone();
                            },
                            set: function (format) {
                                var defaultTextFormat = this._textContent.defaultTextFormat;
                                defaultTextFormat.merge(format);
                                if (defaultTextFormat.color === null) {
                                    defaultTextFormat.color = this._textColor;
                                }
                                else {
                                    this._textColor = +defaultTextFormat.color;
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "embedFonts", {
                            get: function () {
                                return this._embedFonts;
                            },
                            set: function (value) {
                                this._embedFonts = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "gridFitType", {
                            get: function () {
                                return this._gridFitType;
                            },
                            set: function (gridFitType) {
                                gridFitType = asCoerceString(gridFitType);
                                release || assert(flash.text.GridFitType.toNumber(gridFitType) >= 0);
                                this._gridFitType = gridFitType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "htmlText", {
                            get: function () {
                                return this._htmlText;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (this._symbol) {
                                    this._textContent.defaultTextFormat.bold = false;
                                    this._textContent.defaultTextFormat.italic = false;
                                }
                                this._textContent.parseHtml(value, this._styleSheet, this._multiline);
                                this._htmlText = value;
                                this._invalidateContent();
                                this._ensureLineMetrics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "length", {
                            get: function () {
                                return this._length;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "textInteractionMode", {
                            get: function () {
                                notImplemented("public flash.text.TextField::get textInteractionMode");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "maxChars", {
                            get: function () {
                                return this._maxChars;
                            },
                            set: function (value) {
                                this._maxChars = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "maxScrollH", {
                            get: function () {
                                this._ensureLineMetrics();
                                return this._maxScrollH;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "maxScrollV", {
                            get: function () {
                                this._ensureLineMetrics();
                                return this._maxScrollV;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "mouseWheelEnabled", {
                            get: function () {
                                return this._mouseWheelEnabled;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.text.TextField::set mouseWheelEnabled");
                                this._mouseWheelEnabled = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "multiline", {
                            get: function () {
                                return this._multiline;
                            },
                            set: function (value) {
                                this._multiline = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "numLines", {
                            get: function () {
                                return this._numLines;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "displayAsPassword", {
                            get: function () {
                                return this._displayAsPassword;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.text.TextField::set displayAsPassword");
                                this._displayAsPassword = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "restrict", {
                            get: function () {
                                return this._restrict;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.text.TextField::set restrict");
                                this._restrict = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "scrollH", {
                            get: function () {
                                return this._textContent.scrollH;
                            },
                            set: function (value) {
                                value = value | 0;
                                this._ensureLineMetrics();
                                this._textContent.scrollH = clamp(Math.abs(value), 0, this._maxScrollH);
                                this._invalidateContent();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "scrollV", {
                            get: function () {
                                return this._textContent.scrollV;
                            },
                            set: function (value) {
                                value = value | 0;
                                this._ensureLineMetrics();
                                this._textContent.scrollV = clamp(value, 1, this._maxScrollV);
                                this._invalidateContent();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "selectable", {
                            get: function () {
                                return this._selectable;
                            },
                            set: function (value) {
                                this._selectable = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "selectedText", {
                            get: function () {
                                return this._textContent.plainText.substring(this._selectionBeginIndex, this._selectionEndIndex);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "selectionBeginIndex", {
                            get: function () {
                                return this._selectionBeginIndex;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "selectionEndIndex", {
                            get: function () {
                                return this._selectionEndIndex;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "sharpness", {
                            get: function () {
                                return this._sharpness;
                            },
                            set: function (value) {
                                this._sharpness = clamp(+value, -400, 400);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "styleSheet", {
                            get: function () {
                                return this._styleSheet;
                            },
                            set: function (value) {
                                this._styleSheet = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "text", {
                            get: function () {
                                return this._textContent.plainText;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === this._textContent.plainText) {
                                    return;
                                }
                                this._textContent.plainText = value;
                                this._invalidateContent();
                                this._ensureLineMetrics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "textColor", {
                            get: function () {
                                return this._textColor === null ? +this._textContent.defaultTextFormat.color : this._textColor;
                            },
                            set: function (value) {
                                this._textColor = this._textContent.defaultTextFormat.color = value >>> 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "textHeight", {
                            get: function () {
                                this._ensureLineMetrics();
                                return (this._textHeight / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "textWidth", {
                            get: function () {
                                this._ensureLineMetrics();
                                return (this._textWidth / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "thickness", {
                            get: function () {
                                return this._thickness;
                            },
                            set: function (value) {
                                this._thickness = clamp(+value, -200, 200);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            set: function (value) {
                                this._type = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "wordWrap", {
                            get: function () {
                                return this._textContent.wordWrap;
                            },
                            set: function (value) {
                                value = !!value;
                                if (value === this._textContent.wordWrap) {
                                    return;
                                }
                                this._textContent.wordWrap = !!value;
                                this._invalidateContent();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "useRichTextClipboard", {
                            get: function () {
                                notImplemented("public flash.text.TextField::get useRichTextClipboard");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.text.TextField::set useRichTextClipboard");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextField.prototype.copyRichText = function () {
                            notImplemented("public flash.text.TextField::copyRichText");
                        };
                        TextField.prototype.pasteRichText = function (richText) {
                            richText = asCoerceString(richText);
                            notImplemented("public flash.text.TextField::pasteRichText");
                        };
                        TextField.prototype.getXMLText = function (beginIndex, endIndex) {
                            if (endIndex === void 0) { endIndex = 2147483647; }
                            beginIndex = +beginIndex;
                            endIndex = +endIndex;
                            notImplemented("public flash.text.TextField::getXMLText");
                            return "";
                        };
                        TextField.prototype.insertXMLText = function (beginIndex, endIndex, richText, pasting) {
                            beginIndex = +beginIndex;
                            endIndex = +endIndex;
                            richText = asCoerceString(richText);
                            pasting = !!pasting;
                            notImplemented("public flash.text.TextField::insertXMLText");
                        };
                        TextField.prototype._ensureLineMetrics = function () {
                            if (!this._hasFlags(8388608 /* DirtyTextContent */)) {
                                return;
                            }
                            var serializer = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                            var lineMetricsData = serializer.syncDisplayObject(this, false);
                            var textWidth = lineMetricsData.readInt();
                            var textHeight = lineMetricsData.readInt();
                            var offsetX = lineMetricsData.readInt();
                            var bounds = this._lineBounds;
                            if (this._autoSize !== _text.TextFieldAutoSize.NONE) {
                                bounds.xMin = bounds.xMin = offsetX;
                                bounds.xMax = bounds.xMax = offsetX + textWidth + 80;
                                bounds.yMax = bounds.yMax = bounds.yMin + textHeight + 80;
                            }
                            this._textWidth = textWidth;
                            this._textHeight = textHeight;
                            this._numLines = lineMetricsData.readInt();
                            this._lineMetricsData = lineMetricsData;
                            if (this._textHeight > bounds.height) {
                                var maxScrollV = 1;
                                var bottomScrollV = 1;
                                lineMetricsData.position = 16;
                                var y = 0;
                                for (var i = 0; i < this._numLines; i++) {
                                    lineMetricsData.position += 8;
                                    var ascent = lineMetricsData.readInt();
                                    var descent = lineMetricsData.readInt();
                                    var leading = lineMetricsData.readInt();
                                    var height = ascent + descent + leading;
                                    if (y > bounds.height / 20) {
                                        maxScrollV++;
                                    }
                                    else {
                                        bottomScrollV++;
                                    }
                                    y += height;
                                }
                                this._maxScrollV = maxScrollV;
                                this._bottomScrollV = bottomScrollV;
                            }
                            if (this._textWidth > bounds.width) {
                                this._maxScrollH = (((this._textWidth + 80) - bounds.width) / 20) | 0;
                            }
                            else {
                                this._maxScrollH = 0;
                            }
                        };
                        TextField.prototype.appendText = function (newText) {
                            this._textContent.appendText(asCoerceString(newText));
                        };
                        TextField.prototype.getCharBoundaries = function (charIndex) {
                            charIndex = charIndex | 0;
                            somewhatImplemented("public flash.text.TextField::getCharBoundaries");
                            var fakeCharHeight = this.textHeight, fakeCharWidth = fakeCharHeight * 0.75;
                            return new flash.geom.Rectangle(charIndex * fakeCharWidth, 0, fakeCharWidth, fakeCharHeight);
                        };
                        TextField.prototype.getCharIndexAtPoint = function (x, y) {
                            x = +x;
                            y = +y;
                            notImplemented("public flash.text.TextField::getCharIndexAtPoint");
                            return;
                        };
                        TextField.prototype.getFirstCharInParagraph = function (charIndex) {
                            charIndex = charIndex | 0;
                            notImplemented("public flash.text.TextField::getFirstCharInParagraph");
                            return;
                        };
                        TextField.prototype.getLineIndexAtPoint = function (x, y) {
                            x = +x;
                            y = +y;
                            notImplemented("public flash.text.TextField::getLineIndexAtPoint");
                            return;
                        };
                        TextField.prototype.getLineIndexOfChar = function (charIndex) {
                            charIndex = charIndex | 0;
                            notImplemented("public flash.text.TextField::getLineIndexOfChar");
                            return;
                        };
                        TextField.prototype.getLineLength = function (lineIndex) {
                            lineIndex = lineIndex | 0;
                            notImplemented("public flash.text.TextField::getLineLength");
                            return;
                        };
                        TextField.prototype.getLineMetrics = function (lineIndex) {
                            lineIndex = lineIndex | 0;
                            if (lineIndex < 0 || lineIndex > this._numLines - 1) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            this._ensureLineMetrics();
                            var lineMetricsData = this._lineMetricsData;
                            lineMetricsData.position = 16 + lineIndex * 20;
                            var x = lineMetricsData.readInt() + this._lineBounds.xMin + 2;
                            var width = lineMetricsData.readInt();
                            var ascent = lineMetricsData.readInt();
                            var descent = lineMetricsData.readInt();
                            var leading = lineMetricsData.readInt();
                            var height = ascent + descent + leading;
                            return new _text.TextLineMetrics(x, width, height, ascent, descent, leading);
                        };
                        TextField.prototype.getLineOffset = function (lineIndex) {
                            lineIndex = lineIndex | 0;
                            notImplemented("public flash.text.TextField::getLineOffset");
                            return;
                        };
                        TextField.prototype.getLineText = function (lineIndex) {
                            lineIndex = lineIndex | 0;
                            notImplemented("public flash.text.TextField::getLineText");
                            return;
                        };
                        TextField.prototype.getParagraphLength = function (charIndex) {
                            charIndex = charIndex | 0;
                            notImplemented("public flash.text.TextField::getParagraphLength");
                            return;
                        };
                        TextField.prototype.getTextFormat = function (beginIndex, endIndex) {
                            if (beginIndex === void 0) { beginIndex = -1; }
                            if (endIndex === void 0) { endIndex = -1; }
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            var plainText = this._textContent.plainText;
                            var maxIndex = plainText.length;
                            if (beginIndex < 0) {
                                beginIndex = 0;
                                if (endIndex < 0) {
                                    endIndex = maxIndex;
                                }
                            }
                            else {
                                if (endIndex < 0) {
                                    endIndex = beginIndex + 1;
                                }
                            }
                            if (endIndex <= beginIndex || endIndex > maxIndex) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            var format;
                            var textRuns = this._textContent.textRuns;
                            for (var i = 0; i < textRuns.length; i++) {
                                var run = textRuns[i];
                                if (run.intersects(beginIndex, endIndex)) {
                                    if (format) {
                                        format.intersect(run.textFormat);
                                    }
                                    else {
                                        format = run.textFormat.clone();
                                    }
                                }
                            }
                            return format;
                        };
                        TextField.prototype.getTextRuns = function (beginIndex, endIndex) {
                            if (beginIndex === void 0) { beginIndex = 0; }
                            if (endIndex === void 0) { endIndex = 2147483647; }
                            var textRuns = this._textContent.textRuns;
                            var result = [];
                            for (var i = 0; i < textRuns.length; i++) {
                                var textRun = textRuns[i];
                                if (textRun.beginIndex >= beginIndex && textRun.endIndex <= endIndex) {
                                    result.push(textRun.clone());
                                }
                            }
                            return result;
                        };
                        TextField.prototype.getRawText = function () {
                            notImplemented("public flash.text.TextField::getRawText");
                            return;
                        };
                        TextField.prototype.replaceSelectedText = function (value) {
                            value = "" + value;
                            this.replaceText(this._selectionBeginIndex, this._selectionEndIndex, value);
                        };
                        TextField.prototype.replaceText = function (beginIndex, endIndex, newText) {
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            newText = "" + newText;
                            if (beginIndex < 0 || endIndex < 0) {
                                return;
                            }
                            this._textContent.replaceText(beginIndex, endIndex, newText);
                            this._invalidateContent();
                            this._ensureLineMetrics();
                        };
                        TextField.prototype.setSelection = function (beginIndex, endIndex) {
                            this._selectionBeginIndex = beginIndex | 0;
                            this._selectionEndIndex = endIndex | 0;
                        };
                        TextField.prototype.setTextFormat = function (format, beginIndex, endIndex) {
                            if (beginIndex === void 0) { beginIndex = -1; }
                            if (endIndex === void 0) { endIndex = -1; }
                            format = format;
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            var plainText = this._textContent.plainText;
                            var maxIndex = plainText.length;
                            if (beginIndex < 0) {
                                beginIndex = 0;
                                if (endIndex < 0) {
                                    endIndex = maxIndex;
                                }
                            }
                            else {
                                if (endIndex < 0) {
                                    endIndex = beginIndex + 1;
                                }
                            }
                            if (beginIndex > maxIndex || endIndex > maxIndex) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            if (endIndex <= beginIndex) {
                                return;
                            }
                            var subText = plainText.substring(beginIndex, endIndex);
                            this._textContent.replaceText(beginIndex, endIndex, subText, format);
                            this._invalidateContent();
                            this._ensureLineMetrics();
                        };
                        TextField.prototype.getImageReference = function (id) {
                            notImplemented("public flash.text.TextField::getImageReference");
                            return;
                        };
                        TextField.classSymbols = null;
                        TextField.instanceSymbols = null;
                        TextField.classInitializer = null;
                        TextField.initializer = function (symbol) {
                            var self = this;
                            self._alwaysShowSelection = false;
                            self._antiAliasType = _text.AntiAliasType.NORMAL;
                            self._autoSize = _text.TextFieldAutoSize.NONE;
                            self._background = false;
                            self._backgroundColor = 0xffffffff;
                            self._border = false;
                            self._borderColor = 0x000000ff;
                            self._bottomScrollV = 1;
                            self._caretIndex = 0;
                            self._condenseWhite = false;
                            self._embedFonts = false;
                            self._gridFitType = _text.GridFitType.PIXEL;
                            self._htmlText = '';
                            self._length = 0;
                            self._textInteractionMode = _text.TextInteractionMode.NORMAL;
                            self._maxChars = 0;
                            self._maxScrollH = 0;
                            self._maxScrollV = 1;
                            self._mouseWheelEnabled = false;
                            self._multiline = false;
                            self._numLines = 1;
                            self._displayAsPassword = false;
                            self._restrict = null;
                            self._selectable = true;
                            self._selectedText = '';
                            self._selectionBeginIndex = 0;
                            self._selectionEndIndex = 0;
                            self._sharpness = 0;
                            self._styleSheet = null;
                            self._textColor = null;
                            self._textHeight = 0;
                            self._textWidth = 0;
                            self._thickness = 0;
                            self._type = _text.TextFieldType.DYNAMIC;
                            self._useRichTextClipboard = false;
                            var defaultTextFormat = new flash.text.TextFormat(_text.Font.DEFAULT_FONT_SERIF, 12, 0, false, false, false, '', '', _text.TextFormatAlign.LEFT);
                            self._textContent = new Shumway.TextContent(defaultTextFormat);
                            self._lineMetricsData = null;
                            if (symbol) {
                                self._setFillAndLineBoundsFromSymbol(symbol);
                                defaultTextFormat.color = symbol.color;
                                defaultTextFormat.size = (symbol.size / 20) | 0;
                                defaultTextFormat.font = symbol.face;
                                defaultTextFormat.bold = symbol.bold;
                                defaultTextFormat.italic = symbol.italic;
                                defaultTextFormat.align = symbol.align;
                                defaultTextFormat.leftMargin = (symbol.leftMargin / 20) | 0;
                                defaultTextFormat.rightMargin = (symbol.rightMargin / 20) | 0;
                                defaultTextFormat.indent = (symbol.indent / 20) | 0;
                                defaultTextFormat.leading = (symbol.leading / 20) | 0;
                                self._multiline = symbol.multiline;
                                self._embedFonts = symbol.embedFonts;
                                self._selectable = symbol.selectable;
                                self._displayAsPassword = symbol.displayAsPassword;
                                self._type = symbol.type;
                                self._maxChars = symbol.maxChars;
                                if (symbol.border) {
                                    self.background = true;
                                    self.border = true;
                                }
                                if (symbol.html) {
                                    self.htmlText = symbol.initialText;
                                }
                                else {
                                    self.text = symbol.initialText;
                                }
                                self.wordWrap = symbol.wordWrap;
                                self.autoSize = symbol.autoSize;
                            }
                            else {
                                self._setFillAndLineBoundsFromWidthAndHeight(100 * 20, 100 * 20);
                            }
                        };
                        return TextField;
                    })(flash.display.InteractiveObject);
                    _text.TextField = TextField;
                    var TextSymbol = (function (_super) {
                        __extends(TextSymbol, _super);
                        function TextSymbol(data) {
                            _super.call(this, data, flash.text.TextField, true);
                            this.color = 0;
                            this.size = 0;
                            this.face = "";
                            this.bold = false;
                            this.italic = false;
                            this.align = flash.text.TextFormatAlign.LEFT;
                            this.leftMargin = 0;
                            this.rightMargin = 0;
                            this.indent = 0;
                            this.leading = 0;
                            this.multiline = false;
                            this.wordWrap = false;
                            this.embedFonts = false;
                            this.selectable = true;
                            this.border = false;
                            this.initialText = "";
                            this.html = false;
                            this.displayAsPassword = false;
                            this.type = flash.text.TextFieldType.DYNAMIC;
                            this.maxChars = 0;
                            this.autoSize = flash.text.TextFieldAutoSize.NONE;
                            this.variableName = null;
                            this.textContent = null;
                        }
                        TextSymbol.FromTextData = function (data, loaderInfo) {
                            var symbol = new TextSymbol(data);
                            symbol._setBoundsFromData(data);
                            var tag = data.tag;
                            if (data.static) {
                                symbol.dynamic = false;
                                symbol.symbolClass = flash.text.StaticText;
                                if (tag.initialText) {
                                    var textContent = new Shumway.TextContent();
                                    textContent.bounds = symbol.lineBounds;
                                    textContent.parseHtml(tag.initialText, null, false);
                                    var matrix = new flash.geom.Matrix();
                                    textContent.matrix = new flash.geom.Matrix();
                                    textContent.matrix.copyFromUntyped(data.matrix);
                                    textContent.coords = data.coords;
                                    symbol.textContent = textContent;
                                }
                            }
                            if (tag.hasColor) {
                                symbol.color = tag.color >>> 8;
                            }
                            if (tag.hasFont) {
                                symbol.size = tag.fontHeight;
                                var fontSymbol = loaderInfo.getSymbolById(tag.fontId);
                                if (fontSymbol) {
                                    symbol.face = tag.useOutlines ? fontSymbol.name : 'swffont' + fontSymbol.syncId;
                                    symbol.bold = fontSymbol.bold;
                                    symbol.italic = fontSymbol.italic;
                                }
                                else {
                                    warning("Font " + tag.fontId + " is not defined.");
                                }
                            }
                            if (tag.hasLayout) {
                                symbol.align = flash.text.TextFormatAlign.fromNumber(tag.align);
                                symbol.leftMargin = tag.leftMargin;
                                symbol.rightMargin = tag.rightMargin;
                                symbol.indent = tag.indent;
                                symbol.leading = tag.leading;
                            }
                            symbol.multiline = !!tag.multiline;
                            symbol.wordWrap = !!tag.wordWrap;
                            symbol.embedFonts = !!tag.useOutlines;
                            symbol.selectable = !tag.noSelect;
                            symbol.border = !!tag.border;
                            if (tag.hasText) {
                                symbol.initialText = tag.initialText;
                            }
                            symbol.html = !!tag.html;
                            symbol.displayAsPassword = !!tag.password;
                            symbol.type = tag.readonly ? flash.text.TextFieldType.DYNAMIC : flash.text.TextFieldType.INPUT;
                            if (tag.hasMaxLength) {
                                symbol.maxChars = tag.maxLength;
                            }
                            symbol.autoSize = tag.autoSize ? flash.text.TextFieldAutoSize.LEFT : flash.text.TextFieldAutoSize.NONE;
                            symbol.variableName = tag.variableName;
                            return symbol;
                        };
                        TextSymbol.FromLabelData = function (data, loaderInfo) {
                            var bounds = data.fillBounds;
                            var records = data.records;
                            var coords = data.coords = [];
                            var htmlText = '';
                            var size = 12;
                            var face = 'Times Roman';
                            var bold = false;
                            var italic = false;
                            var color = 0;
                            var x = 0;
                            var y = 0;
                            var codes;
                            for (var i = 0; i < records.length; i++) {
                                var record = records[i];
                                if (record.eot) {
                                    break;
                                }
                                if (record.hasFont) {
                                    var fontSymbol = loaderInfo.getSymbolById(record.fontId);
                                    if (fontSymbol) {
                                        codes = fontSymbol.codes;
                                        size = record.fontHeight;
                                        if (!fontSymbol.originalSize) {
                                            size /= 20;
                                        }
                                        face = fontSymbol.metrics ? 'swffont' + fontSymbol.syncId : fontSymbol.name;
                                        bold = fontSymbol.bold;
                                        italic = fontSymbol.italic;
                                    }
                                    else {
                                        Shumway.Debug.warning('Label ' + data.id + 'refers to undefined font symbol ' + record.fontId);
                                    }
                                }
                                if (record.hasColor) {
                                    color = record.color >>> 8;
                                }
                                if (record.hasMoveX) {
                                    x = record.moveX;
                                    if (x < bounds.xMin) {
                                        bounds.xMin = x;
                                    }
                                }
                                if (record.hasMoveY) {
                                    y = record.moveY;
                                    if (y < bounds.yMin) {
                                        bounds.yMin = y;
                                    }
                                }
                                var text = '';
                                var entries = record.entries;
                                var j = 0;
                                var entry;
                                while ((entry = entries[j++])) {
                                    var code = codes[entry.glyphIndex];
                                    release || assert(code, 'undefined label glyph');
                                    var char = String.fromCharCode(code);
                                    text += charEscapeMap[char] || char;
                                    coords.push(x, y);
                                    x += entry.advance;
                                }
                                if (italic) {
                                    text = '<i>' + text + '</i>';
                                }
                                if (bold) {
                                    text = '<b>' + text + '</b>';
                                }
                                htmlText += '<font size="' + size + '" face="' + face + '"' + ' color="#' + ('000000' + color.toString(16)).slice(-6) + '">' + text + '</font>';
                            }
                            data.tag.initialText = htmlText;
                            return TextSymbol.FromTextData(data, loaderInfo);
                        };
                        return TextSymbol;
                    })(Shumway.Timeline.DisplaySymbol);
                    _text.TextSymbol = TextSymbol;
                    var charEscapeMap = { '<': '&lt;', '>': '&gt;', '&': '&amp;' };
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextFieldAutoSize = (function (_super) {
                        __extends(TextFieldAutoSize, _super);
                        function TextFieldAutoSize() {
                            _super.call(this);
                        }
                        TextFieldAutoSize.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return TextFieldAutoSize.NONE;
                                case 1:
                                    return TextFieldAutoSize.CENTER;
                                case 2:
                                    return TextFieldAutoSize.LEFT;
                                case 3:
                                    return TextFieldAutoSize.RIGHT;
                                default:
                                    return null;
                            }
                        };
                        TextFieldAutoSize.toNumber = function (value) {
                            switch (value) {
                                case TextFieldAutoSize.NONE:
                                    return 0;
                                case TextFieldAutoSize.CENTER:
                                    return 1;
                                case TextFieldAutoSize.LEFT:
                                    return 2;
                                case TextFieldAutoSize.RIGHT:
                                    return 3;
                                default:
                                    return -1;
                            }
                        };
                        TextFieldAutoSize.classInitializer = null;
                        TextFieldAutoSize.initializer = null;
                        TextFieldAutoSize.classSymbols = null;
                        TextFieldAutoSize.instanceSymbols = null;
                        TextFieldAutoSize.NONE = "none";
                        TextFieldAutoSize.LEFT = "left";
                        TextFieldAutoSize.CENTER = "center";
                        TextFieldAutoSize.RIGHT = "right";
                        return TextFieldAutoSize;
                    })(AS.ASNative);
                    text.TextFieldAutoSize = TextFieldAutoSize;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextFieldType = (function (_super) {
                        __extends(TextFieldType, _super);
                        function TextFieldType() {
                            _super.call(this);
                        }
                        TextFieldType.classInitializer = null;
                        TextFieldType.initializer = null;
                        TextFieldType.classSymbols = null;
                        TextFieldType.instanceSymbols = null;
                        TextFieldType.INPUT = "input";
                        TextFieldType.DYNAMIC = "dynamic";
                        return TextFieldType;
                    })(AS.ASNative);
                    text.TextFieldType = TextFieldType;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var roundHalfEven = Shumway.NumberUtilities.roundHalfEven;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var TextFormat = (function (_super) {
                        __extends(TextFormat, _super);
                        function TextFormat(font, size, color, bold, italic, underline, url, target, align, leftMargin, rightMargin, indent, leading) {
                            if (font === void 0) { font = null; }
                            if (size === void 0) { size = null; }
                            if (color === void 0) { color = null; }
                            if (bold === void 0) { bold = null; }
                            if (italic === void 0) { italic = null; }
                            if (underline === void 0) { underline = null; }
                            if (url === void 0) { url = null; }
                            if (target === void 0) { target = null; }
                            if (align === void 0) { align = null; }
                            if (leftMargin === void 0) { leftMargin = null; }
                            if (rightMargin === void 0) { rightMargin = null; }
                            if (indent === void 0) { indent = null; }
                            if (leading === void 0) { leading = null; }
                            false && _super.call(this);
                            this.font = font;
                            this.size = size;
                            this.color = color;
                            this.bold = bold;
                            this.italic = italic;
                            this.underline = underline;
                            this.url = url;
                            this.target = target;
                            this.align = align;
                            this.leftMargin = leftMargin;
                            this.rightMargin = rightMargin;
                            this.indent = indent;
                            this.leading = leading;
                        }
                        Object.defineProperty(TextFormat.prototype, "align", {
                            get: function () {
                                return this._align;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._align = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "blockIndent", {
                            get: function () {
                                return this._blockIndent;
                            },
                            set: function (value) {
                                this._blockIndent = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "bold", {
                            get: function () {
                                return this._bold;
                            },
                            set: function (value) {
                                this._bold = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "bullet", {
                            get: function () {
                                return this._bullet;
                            },
                            set: function (value) {
                                this._bullet = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                this._color = value != null ? +value | 0 : null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "display", {
                            get: function () {
                                return this._display;
                            },
                            set: function (value) {
                                this._display = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "font", {
                            get: function () {
                                return this._font;
                            },
                            set: function (value) {
                                this._font = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "style", {
                            get: function () {
                                if (this._bold && this._italic) {
                                    return text.FontStyle.BOLD_ITALIC;
                                }
                                else if (this._bold) {
                                    return text.FontStyle.BOLD;
                                }
                                else if (this._italic) {
                                    return text.FontStyle.ITALIC;
                                }
                                else {
                                    return text.FontStyle.REGULAR;
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "indent", {
                            get: function () {
                                return this._indent;
                            },
                            set: function (value) {
                                this._indent = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "italic", {
                            get: function () {
                                return this._italic;
                            },
                            set: function (value) {
                                this._italic = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "kerning", {
                            get: function () {
                                return this._kerning;
                            },
                            set: function (value) {
                                this._kerning = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "leading", {
                            get: function () {
                                return this._leading;
                            },
                            set: function (value) {
                                this._leading = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "leftMargin", {
                            get: function () {
                                return this._leftMargin;
                            },
                            set: function (value) {
                                this._leftMargin = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "letterSpacing", {
                            get: function () {
                                return this._letterSpacing;
                            },
                            set: function (value) {
                                this._letterSpacing = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "rightMargin", {
                            get: function () {
                                return this._rightMargin;
                            },
                            set: function (value) {
                                this._rightMargin = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "size", {
                            get: function () {
                                return this._size;
                            },
                            set: function (value) {
                                this._size = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "tabStops", {
                            get: function () {
                                return this._tabStops;
                            },
                            set: function (value) {
                                if (!(value instanceof Array)) {
                                    throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError, value, 'Array');
                                }
                                this._tabStops = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "target", {
                            get: function () {
                                return this._target;
                            },
                            set: function (value) {
                                this._target = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "underline", {
                            get: function () {
                                return this._underline;
                            },
                            set: function (value) {
                                this._underline = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "url", {
                            get: function () {
                                return this._url;
                            },
                            set: function (value) {
                                this._url = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextFormat.coerceNumber = function (value) {
                            if (value == undefined) {
                                return null;
                            }
                            if (isNaN(value) || value > 0xfffffff) {
                                return -0x80000000;
                            }
                            return roundHalfEven(value);
                        };
                        TextFormat.coerceBoolean = function (value) {
                            return value == undefined ? null : !!value;
                        };
                        TextFormat.prototype.clone = function () {
                            return new flash.text.TextFormat(this.font, this.size, this.color, this.bold, this.italic, this.underline, this.url, this.target, this.align, this.leftMargin, this.rightMargin, this.indent, this.leading);
                        };
                        TextFormat.prototype.equals = function (other) {
                            return this._align === other._align && this._blockIndent === other._blockIndent && this._bold === other._bold && this._bullet === other._bullet && this._color === other._color && this._display === other._display && this._font === other._font && this._indent === other._indent && this._italic === other._italic && this._kerning === other._kerning && this._leading === other._leading && this._leftMargin === other._leftMargin && this._letterSpacing === other._letterSpacing && this._rightMargin === other._rightMargin && this._size === other._size && this._tabStops === other._tabStops && this._target === other._target && this._underline === other._underline && this._url === other._url;
                        };
                        TextFormat.prototype.merge = function (other) {
                            if (other._align !== null) {
                                this._align = other._align;
                            }
                            if (other._blockIndent !== null) {
                                this._blockIndent = other._blockIndent;
                            }
                            if (other._bold !== null) {
                                this._bold = other._bold;
                            }
                            if (other._bullet !== null) {
                                this._bullet = other._bullet;
                            }
                            if (other._color !== null) {
                                this._color = other._color;
                            }
                            if (other._display !== null) {
                                this._display = other._display;
                            }
                            if (other._font) {
                                this._font = other._font;
                            }
                            if (other._indent !== null) {
                                this._indent = other._indent;
                            }
                            if (other._italic !== null) {
                                this._italic = other._italic;
                            }
                            if (other._kerning !== null) {
                                this._kerning = other._kerning;
                            }
                            if (other._leading !== null) {
                                this._leading = other._leading;
                            }
                            if (other._leftMargin !== null) {
                                this._leftMargin = other._leftMargin;
                            }
                            if (other._letterSpacing !== null) {
                                this._letterSpacing = other._letterSpacing;
                            }
                            if (other._rightMargin !== null) {
                                this._rightMargin = other._rightMargin;
                            }
                            if (other._size !== null) {
                                this._size = other._size;
                            }
                            if (other._tabStops !== null) {
                                this._tabStops = other._tabStops;
                            }
                            if (other._target) {
                                this._target = other._target;
                            }
                            if (other._underline !== null) {
                                this._underline = other._underline;
                            }
                            if (other._url) {
                                this._url = other._url;
                            }
                        };
                        TextFormat.prototype.intersect = function (other) {
                            if (other._align !== this._align) {
                                this._align = null;
                            }
                            if (other._blockIndent !== this._blockIndent) {
                                this._blockIndent = null;
                            }
                            if (other._bold !== this._bold) {
                                this._bold = null;
                            }
                            if (other._bullet !== this._bullet) {
                                this._bullet = null;
                            }
                            if (other._color !== this._color) {
                                this._color = null;
                            }
                            if (other._display !== this._display) {
                                this._display = null;
                            }
                            if (other._font !== this._font) {
                                this._font = null;
                            }
                            if (other._indent !== this._indent) {
                                this._indent = null;
                            }
                            if (other._italic !== this._italic) {
                                this._italic = null;
                            }
                            if (other._kerning !== this._kerning) {
                                this._kerning = null;
                            }
                            if (other._leading !== this._leading) {
                                this._leading = null;
                            }
                            if (other._leftMargin !== this._leftMargin) {
                                this._leftMargin = null;
                            }
                            if (other._letterSpacing !== this._letterSpacing) {
                                this._letterSpacing = null;
                            }
                            if (other._rightMargin !== this._rightMargin) {
                                this._rightMargin = null;
                            }
                            if (other._size !== this._size) {
                                this._size = null;
                            }
                            if (other._tabStops !== this._tabStops) {
                                this._tabStops = null;
                            }
                            if (other._target !== this._target) {
                                this._target = null;
                            }
                            if (other._underline !== this._underline) {
                                this._underline = null;
                            }
                            if (other._url !== this._url) {
                                this._url = null;
                            }
                        };
                        TextFormat.prototype.transform = function (formatObject) {
                            var v = formatObject.textAlign;
                            if (v) {
                                this.align = v;
                            }
                            v = formatObject.fontWeight;
                            if (v === "bold") {
                                this.bold = true;
                            }
                            else if (v === "normal") {
                                this.bold = false;
                            }
                            v = formatObject.color;
                            if (v) {
                                var colorStr = asCoerceString(v).trim().toLowerCase();
                                if (colorStr[0] === '#') {
                                    var numericPart = colorStr.substr(1);
                                    while (numericPart[0] === '0') {
                                        numericPart = numericPart.substr(1);
                                    }
                                    var colorVal = parseInt(numericPart, 16);
                                    if (colorVal.toString(16) === numericPart) {
                                        this.color = colorVal;
                                    }
                                }
                            }
                            v = formatObject.display;
                            if (v) {
                                this.display = v;
                            }
                            v = formatObject.fontFamily;
                            if (v) {
                                this.font = v.replace('sans-serif', '_sans').replace('serif', '_serif');
                            }
                            v = formatObject.textIndent;
                            if (v) {
                                this.indent = parseInt(v);
                            }
                            v = formatObject.fontStyle;
                            if (v === "italic") {
                                this.italic = true;
                            }
                            else if (v === "normal") {
                                this.italic = false;
                            }
                            v = formatObject.kerning;
                            if (v === "true") {
                                this.kerning = 1;
                            }
                            else if (v === "false") {
                                this.kerning = 0;
                            }
                            else {
                                this.kerning = parseInt(v);
                            }
                            v = formatObject.leading;
                            if (v) {
                                this.leading = parseInt(v);
                            }
                            v = formatObject.marginLeft;
                            if (v) {
                                this.leftMargin = parseInt(v);
                            }
                            v = formatObject.letterSpacing;
                            if (v) {
                                this.letterSpacing = parseFloat(v);
                            }
                            v = formatObject.marginRight;
                            if (v) {
                                this.rightMargin = parseInt(v);
                            }
                            v = formatObject.fontSize;
                            if (v) {
                                var size = parseInt(v);
                                if (size > 0) {
                                    this.size = size;
                                }
                            }
                            v = formatObject.textDecoration;
                            if (v === "none") {
                                this.underline = false;
                            }
                            else if (v === "underline") {
                                this.underline = true;
                            }
                            return this;
                        };
                        TextFormat.classInitializer = null;
                        TextFormat.initializer = null;
                        TextFormat.classSymbols = null;
                        TextFormat.instanceSymbols = null;
                        return TextFormat;
                    })(AS.ASNative);
                    text.TextFormat = TextFormat;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextFormatAlign = (function (_super) {
                        __extends(TextFormatAlign, _super);
                        function TextFormatAlign() {
                            _super.call(this);
                        }
                        TextFormatAlign.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return TextFormatAlign.LEFT;
                                case 1:
                                    return TextFormatAlign.RIGHT;
                                case 2:
                                    return TextFormatAlign.CENTER;
                                case 3:
                                    return TextFormatAlign.JUSTIFY;
                                case 4:
                                    return TextFormatAlign.START;
                                case 5:
                                    return TextFormatAlign.END;
                                default:
                                    return null;
                            }
                        };
                        TextFormatAlign.toNumber = function (value) {
                            switch (value) {
                                case TextFormatAlign.LEFT:
                                    return 0;
                                case TextFormatAlign.RIGHT:
                                    return 1;
                                case TextFormatAlign.CENTER:
                                    return 2;
                                case TextFormatAlign.JUSTIFY:
                                    return 3;
                                case TextFormatAlign.START:
                                    return 4;
                                case TextFormatAlign.END:
                                    return 5;
                                default:
                                    return -1;
                            }
                        };
                        TextFormatAlign.classInitializer = null;
                        TextFormatAlign.initializer = null;
                        TextFormatAlign.classSymbols = null;
                        TextFormatAlign.instanceSymbols = null;
                        TextFormatAlign.LEFT = "left";
                        TextFormatAlign.CENTER = "center";
                        TextFormatAlign.RIGHT = "right";
                        TextFormatAlign.JUSTIFY = "justify";
                        TextFormatAlign.START = "start";
                        TextFormatAlign.END = "end";
                        return TextFormatAlign;
                    })(AS.ASNative);
                    text.TextFormatAlign = TextFormatAlign;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextFormatDisplay = (function (_super) {
                        __extends(TextFormatDisplay, _super);
                        function TextFormatDisplay() {
                            _super.call(this);
                        }
                        TextFormatDisplay.classInitializer = null;
                        TextFormatDisplay.initializer = null;
                        TextFormatDisplay.classSymbols = null;
                        TextFormatDisplay.instanceSymbols = null;
                        TextFormatDisplay.INLINE = "inline";
                        TextFormatDisplay.BLOCK = "block";
                        return TextFormatDisplay;
                    })(AS.ASNative);
                    text.TextFormatDisplay = TextFormatDisplay;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextInteractionMode = (function (_super) {
                        __extends(TextInteractionMode, _super);
                        function TextInteractionMode() {
                            _super.call(this);
                        }
                        TextInteractionMode.classInitializer = null;
                        TextInteractionMode.initializer = null;
                        TextInteractionMode.classSymbols = null;
                        TextInteractionMode.instanceSymbols = null;
                        TextInteractionMode.NORMAL = "normal";
                        TextInteractionMode.SELECTION = "selection";
                        return TextInteractionMode;
                    })(AS.ASNative);
                    text.TextInteractionMode = TextInteractionMode;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TextLineMetrics = (function (_super) {
                        __extends(TextLineMetrics, _super);
                        function TextLineMetrics(x, width, height, ascent, descent, leading) {
                            false && _super.call(this);
                            dummyConstructor("public flash.text.TextLineMetrics");
                            x = +x;
                            width = +width;
                            height = +height;
                            ascent = +ascent;
                            descent = +descent;
                            leading = +leading;
                        }
                        TextLineMetrics.classInitializer = null;
                        TextLineMetrics.initializer = null;
                        TextLineMetrics.classSymbols = null;
                        TextLineMetrics.instanceSymbols = null;
                        return TextLineMetrics;
                    })(AS.ASNative);
                    text.TextLineMetrics = TextLineMetrics;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextRun = (function (_super) {
                        __extends(TextRun, _super);
                        function TextRun(beginIndex, endIndex, textFormat) {
                            false && _super.call(this);
                            this._beginIndex = beginIndex | 0;
                            this._endIndex = endIndex | 0;
                            this._textFormat = textFormat;
                        }
                        Object.defineProperty(TextRun.prototype, "beginIndex", {
                            get: function () {
                                return this._beginIndex;
                            },
                            set: function (value) {
                                this._beginIndex = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextRun.prototype, "endIndex", {
                            get: function () {
                                return this._endIndex;
                            },
                            set: function (value) {
                                this._endIndex = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextRun.prototype, "textFormat", {
                            get: function () {
                                return this._textFormat;
                            },
                            set: function (value) {
                                this._textFormat = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextRun.prototype.clone = function () {
                            return new flash.text.TextRun(this.beginIndex, this.endIndex, this.textFormat.clone());
                        };
                        TextRun.prototype.containsIndex = function (index) {
                            return index >= this._beginIndex && index < this._endIndex;
                        };
                        TextRun.prototype.intersects = function (beginIndex, endIndex) {
                            return Math.max(this._beginIndex, beginIndex) < Math.min(this._endIndex, endIndex);
                        };
                        TextRun.classInitializer = null;
                        TextRun.initializer = null;
                        TextRun.classSymbols = null;
                        TextRun.instanceSymbols = null;
                        return TextRun;
                    })(AS.ASNative);
                    text.TextRun = TextRun;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var TextSnapshot = (function (_super) {
                        __extends(TextSnapshot, _super);
                        function TextSnapshot() {
                            false && _super.call(this);
                            dummyConstructor("public flash.text.TextSnapshot");
                        }
                        Object.defineProperty(TextSnapshot.prototype, "charCount", {
                            get: function () {
                                notImplemented("public flash.text.TextSnapshot::get charCount");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextSnapshot.prototype.findText = function (beginIndex, textToFind, caseSensitive) {
                            beginIndex = beginIndex | 0;
                            textToFind = asCoerceString(textToFind);
                            caseSensitive = !!caseSensitive;
                            notImplemented("public flash.text.TextSnapshot::findText");
                            return;
                        };
                        TextSnapshot.prototype.getSelected = function (beginIndex, endIndex) {
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            notImplemented("public flash.text.TextSnapshot::getSelected");
                            return;
                        };
                        TextSnapshot.prototype.getSelectedText = function (includeLineEndings) {
                            if (includeLineEndings === void 0) { includeLineEndings = false; }
                            includeLineEndings = !!includeLineEndings;
                            notImplemented("public flash.text.TextSnapshot::getSelectedText");
                            return;
                        };
                        TextSnapshot.prototype.getText = function (beginIndex, endIndex, includeLineEndings) {
                            if (includeLineEndings === void 0) { includeLineEndings = false; }
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            includeLineEndings = !!includeLineEndings;
                            notImplemented("public flash.text.TextSnapshot::getText");
                            return;
                        };
                        TextSnapshot.prototype.getTextRunInfo = function (beginIndex, endIndex) {
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            notImplemented("public flash.text.TextSnapshot::getTextRunInfo");
                            return;
                        };
                        TextSnapshot.prototype.hitTestTextNearPos = function (x, y, maxDistance) {
                            if (maxDistance === void 0) { maxDistance = 0; }
                            x = +x;
                            y = +y;
                            maxDistance = +maxDistance;
                            notImplemented("public flash.text.TextSnapshot::hitTestTextNearPos");
                            return;
                        };
                        TextSnapshot.prototype.setSelectColor = function (hexColor) {
                            if (hexColor === void 0) { hexColor = 16776960; }
                            hexColor = hexColor >>> 0;
                            notImplemented("public flash.text.TextSnapshot::setSelectColor");
                            return;
                        };
                        TextSnapshot.prototype.setSelected = function (beginIndex, endIndex, select) {
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            select = !!select;
                            notImplemented("public flash.text.TextSnapshot::setSelected");
                            return;
                        };
                        TextSnapshot.classInitializer = null;
                        TextSnapshot.initializer = null;
                        TextSnapshot.classSymbols = null;
                        TextSnapshot.instanceSymbols = null;
                        return TextSnapshot;
                    })(AS.ASNative);
                    text.TextSnapshot = TextSnapshot;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var trace;
                (function (trace) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Trace = (function (_super) {
                        __extends(Trace, _super);
                        function Trace() {
                            false && _super.call(this);
                            dummyConstructor("public flash.trace.Trace");
                        }
                        Trace.setLevel = function (l, target) {
                            if (target === void 0) { target = 2; }
                            l = l | 0;
                            target = target | 0;
                            notImplemented("public flash.trace.Trace::static setLevel");
                            return;
                        };
                        Trace.getLevel = function (target) {
                            if (target === void 0) { target = 2; }
                            target = target | 0;
                            notImplemented("public flash.trace.Trace::static getLevel");
                            return;
                        };
                        Trace.setListener = function (f) {
                            f = f;
                            notImplemented("public flash.trace.Trace::static setListener");
                            return;
                        };
                        Trace.getListener = function () {
                            notImplemented("public flash.trace.Trace::static getListener");
                            return;
                        };
                        Trace.classInitializer = null;
                        Trace.initializer = null;
                        Trace.classSymbols = null;
                        Trace.instanceSymbols = null;
                        Trace.OFF = undefined;
                        Trace.METHODS = 1;
                        Trace.METHODS_WITH_ARGS = 2;
                        Trace.METHODS_AND_LINES = 3;
                        Trace.METHODS_AND_LINES_WITH_ARGS = 4;
                        Trace.FILE = 1;
                        Trace.LISTENER = 2;
                        return Trace;
                    })(AS.ASNative);
                    trace.Trace = Trace;
                })(trace = flash.trace || (flash.trace = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var ContextMenu = (function (_super) {
                        __extends(ContextMenu, _super);
                        function ContextMenu() {
                            false && _super.call(this);
                            flash.display.NativeMenu.instanceConstructorNoInitialize.call(this);
                            this.builtInItems = new ui.ContextMenuBuiltInItems();
                            this.customItems = [];
                        }
                        Object.defineProperty(ContextMenu, "isSupported", {
                            get: function () {
                                somewhatImplemented('ContextMenu::isSupported');
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "builtInItems", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get builtInItems");
                                return this._builtInItems;
                            },
                            set: function (value) {
                                value = value;
                                somewhatImplemented("public flash.ui.ContextMenu::set builtInItems");
                                this._builtInItems = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "customItems", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get customItems");
                                return this._customItems;
                            },
                            set: function (value) {
                                value = value;
                                somewhatImplemented("public flash.ui.ContextMenu::set customItems");
                                this._customItems = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "link", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get link");
                                return this._link;
                            },
                            set: function (value) {
                                value = value;
                                somewhatImplemented("public flash.ui.ContextMenu::set link");
                                this._link = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "clipboardMenu", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get clipboardMenu");
                                return this._clipboardMenu;
                            },
                            set: function (value) {
                                value = !!value;
                                somewhatImplemented("public flash.ui.ContextMenu::set clipboardMenu");
                                this._clipboardMenu = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "clipboardItems", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get clipboardItems");
                                return this._clipboardItems;
                            },
                            set: function (value) {
                                value = value;
                                somewhatImplemented("public flash.ui.ContextMenu::set clipboardItems");
                                this._clipboardItems = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ContextMenu.prototype.hideBuiltInItems = function () {
                            var items = this.builtInItems;
                            if (!items) {
                                return;
                            }
                            items.save = false;
                            items.zoom = false;
                            items.quality = false;
                            items.play = false;
                            items.loop = false;
                            items.rewind = false;
                            items.forwardAndBack = false;
                            items.print = false;
                        };
                        ContextMenu.prototype.clone = function () {
                            var result = new ui.ContextMenu();
                            result.builtInItems = this.builtInItems.clone();
                            this.cloneLinkAndClipboardProperties(result);
                            var customItems = this.customItems;
                            for (var i = 0; i < customItems.length; i++) {
                                result.customItems.push(customItems[i].clone());
                            }
                            return result;
                        };
                        ContextMenu.prototype.cloneLinkAndClipboardProperties = function (c) {
                            c = c;
                            somewhatImplemented("public flash.ui.ContextMenu::cloneLinkAndClipboardProperties");
                            return;
                        };
                        ContextMenu.classInitializer = null;
                        ContextMenu.initializer = null;
                        ContextMenu.classSymbols = null;
                        ContextMenu.instanceSymbols = null;
                        return ContextMenu;
                    })(flash.display.NativeMenu);
                    ui.ContextMenu = ContextMenu;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var ContextMenuBuiltInItems = (function (_super) {
                        __extends(ContextMenuBuiltInItems, _super);
                        function ContextMenuBuiltInItems() {
                            false && _super.call(this);
                            this._save = true;
                            this._zoom = true;
                            this._quality = true;
                            this._play = true;
                            this._loop = true;
                            this._rewind = true;
                            this._forwardAndBack = true;
                            this._print = true;
                        }
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "save", {
                            get: function () {
                                return this._save;
                            },
                            set: function (val) {
                                this._save = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "zoom", {
                            get: function () {
                                return this._zoom;
                            },
                            set: function (val) {
                                this._zoom = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (val) {
                                this._quality = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "play", {
                            get: function () {
                                return this._play;
                            },
                            set: function (val) {
                                this._play = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "loop", {
                            get: function () {
                                return this._loop;
                            },
                            set: function (val) {
                                this._loop = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "rewind", {
                            get: function () {
                                return this._rewind;
                            },
                            set: function (val) {
                                this._rewind = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "forwardAndBack", {
                            get: function () {
                                return this._forwardAndBack;
                            },
                            set: function (val) {
                                this._forwardAndBack = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "print", {
                            get: function () {
                                return this._print;
                            },
                            set: function (val) {
                                this._print = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ContextMenuBuiltInItems.prototype.clone = function () {
                            var items = new ui.ContextMenuBuiltInItems();
                            items._save = this._save;
                            items._zoom = this._zoom;
                            items._quality = this._quality;
                            items._play = this._play;
                            items._loop = this._loop;
                            items._rewind = this._rewind;
                            items._forwardAndBack = this._forwardAndBack;
                            items._print = this._print;
                            return items;
                        };
                        ContextMenuBuiltInItems.classInitializer = null;
                        ContextMenuBuiltInItems.initializer = null;
                        ContextMenuBuiltInItems.classSymbols = null;
                        ContextMenuBuiltInItems.instanceSymbols = null;
                        return ContextMenuBuiltInItems;
                    })(AS.ASNative);
                    ui.ContextMenuBuiltInItems = ContextMenuBuiltInItems;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var ContextMenuClipboardItems = (function (_super) {
                        __extends(ContextMenuClipboardItems, _super);
                        function ContextMenuClipboardItems() {
                            false && _super.call(this);
                            this._cut = true;
                            this._copy = true;
                            this._paste = true;
                            this._clear = true;
                            this._selectAll = true;
                        }
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "cut", {
                            get: function () {
                                somewhatImplemented("cut");
                                return this._cut;
                            },
                            set: function (val) {
                                somewhatImplemented("cut");
                                this._cut = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "copy", {
                            get: function () {
                                somewhatImplemented("copy");
                                return this._copy;
                            },
                            set: function (val) {
                                somewhatImplemented("copy");
                                this._copy = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "paste", {
                            get: function () {
                                somewhatImplemented("paste");
                                return this._paste;
                            },
                            set: function (val) {
                                somewhatImplemented("paste");
                                this._paste = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "clear", {
                            get: function () {
                                somewhatImplemented("clear");
                                return this._clear;
                            },
                            set: function (val) {
                                somewhatImplemented("clear");
                                this._clear = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "selectAll", {
                            get: function () {
                                somewhatImplemented("selectAll");
                                return this._selectAll;
                            },
                            set: function (val) {
                                somewhatImplemented("selectAll");
                                this._selectAll = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ContextMenuClipboardItems.prototype.clone = function () {
                            var items = new ui.ContextMenuClipboardItems();
                            items._cut = this._cut;
                            items._copy = this._copy;
                            items._paste = this._paste;
                            items._clear = this._clear;
                            items._selectAll = this._selectAll;
                            return items;
                        };
                        ContextMenuClipboardItems.classInitializer = null;
                        ContextMenuClipboardItems.initializer = null;
                        ContextMenuClipboardItems.classSymbols = null;
                        ContextMenuClipboardItems.instanceSymbols = null;
                        return ContextMenuClipboardItems;
                    })(AS.ASNative);
                    ui.ContextMenuClipboardItems = ContextMenuClipboardItems;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var ContextMenuItem = (function (_super) {
                        __extends(ContextMenuItem, _super);
                        function ContextMenuItem(caption, separatorBefore, enabled, visible) {
                            if (separatorBefore === void 0) { separatorBefore = false; }
                            if (enabled === void 0) { enabled = true; }
                            if (visible === void 0) { visible = true; }
                            false && _super.call(this);
                            caption = asCoerceString(caption);
                            separatorBefore = !!separatorBefore;
                            enabled = !!enabled;
                            visible = !!visible;
                            this._caption = caption ? caption : "";
                            this._separatorBefore = separatorBefore;
                            this._enabled = enabled;
                            this._visible = visible;
                        }
                        Object.defineProperty(ContextMenuItem.prototype, "caption", {
                            get: function () {
                                return this._caption;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._caption = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuItem.prototype, "separatorBefore", {
                            get: function () {
                                return this._separatorBefore;
                            },
                            set: function (value) {
                                value = !!value;
                                this._separatorBefore = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuItem.prototype, "visible", {
                            get: function () {
                                return this._visible;
                            },
                            set: function (value) {
                                value = !!value;
                                this._visible = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ContextMenuItem.classInitializer = null;
                        ContextMenuItem.initializer = null;
                        ContextMenuItem.classSymbols = null;
                        ContextMenuItem.instanceSymbols = null;
                        return ContextMenuItem;
                    })(flash.display.NativeMenuItem);
                    ui.ContextMenuItem = ContextMenuItem;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var GameInput = (function (_super) {
                        __extends(GameInput, _super);
                        function GameInput() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.ui.GameInput");
                        }
                        Object.defineProperty(GameInput.prototype, "numDevices", {
                            get: function () {
                                somewhatImplemented("public flash.ui.GameInput::get numDevices");
                                return 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInput.prototype, "isSupported", {
                            get: function () {
                                somewhatImplemented("public flash.ui.GameInput::get isSupported");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GameInput.getDeviceAt = function (index) {
                            index = index | 0;
                            somewhatImplemented("public flash.ui.GameInput::static getDeviceAt");
                            throwError("RangeError", AVM2.Errors.ParamRangeError, "index");
                            return null;
                        };
                        GameInput.classInitializer = null;
                        GameInput.initializer = null;
                        GameInput.classSymbols = null;
                        GameInput.instanceSymbols = null;
                        return GameInput;
                    })(flash.events.EventDispatcher);
                    ui.GameInput = GameInput;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputControl = (function (_super) {
                        __extends(GameInputControl, _super);
                        function GameInputControl() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.ui.GameInputControl");
                        }
                        Object.defineProperty(GameInputControl.prototype, "numValues", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get numValues");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "index", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get index");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "relative", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get relative");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "type", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get type");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "hand", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get hand");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "finger", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get finger");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "device", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get device");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GameInputControl.prototype.getValueAt = function (index) {
                            if (index === void 0) { index = 0; }
                            index = index | 0;
                            notImplemented("public flash.ui.GameInputControl::getValueAt");
                            return;
                        };
                        GameInputControl.classInitializer = null;
                        GameInputControl.initializer = null;
                        GameInputControl.classSymbols = null;
                        GameInputControl.instanceSymbols = null;
                        return GameInputControl;
                    })(flash.events.EventDispatcher);
                    ui.GameInputControl = GameInputControl;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputControlType = (function (_super) {
                        __extends(GameInputControlType, _super);
                        function GameInputControlType() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.GameInputControlType");
                        }
                        GameInputControlType.classInitializer = null;
                        GameInputControlType.initializer = null;
                        GameInputControlType.classSymbols = null;
                        GameInputControlType.instanceSymbols = null;
                        GameInputControlType.MOVEMENT = "movement";
                        GameInputControlType.ROTATION = "rotation";
                        GameInputControlType.DIRECTION = "direction";
                        GameInputControlType.ACCELERATION = "acceleration";
                        GameInputControlType.BUTTON = "button";
                        GameInputControlType.TRIGGER = "trigger";
                        return GameInputControlType;
                    })(AS.ASNative);
                    ui.GameInputControlType = GameInputControlType;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputDevice = (function (_super) {
                        __extends(GameInputDevice, _super);
                        function GameInputDevice() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.ui.GameInputDevice");
                        }
                        Object.defineProperty(GameInputDevice.prototype, "numControls", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get numControls");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputDevice.prototype, "sampleInterval", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get sampleInterval");
                                return;
                            },
                            set: function (val) {
                                val = val | 0;
                                notImplemented("public flash.ui.GameInputDevice::set sampleInterval");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputDevice.prototype, "enabled", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get enabled");
                                return;
                            },
                            set: function (val) {
                                val = !!val;
                                notImplemented("public flash.ui.GameInputDevice::set enabled");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputDevice.prototype, "id", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get id");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputDevice.prototype, "name", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get name");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GameInputDevice.prototype.getControlAt = function (i) {
                            i = i | 0;
                            notImplemented("public flash.ui.GameInputDevice::getControlAt");
                            return;
                        };
                        GameInputDevice.prototype.startCachingSamples = function (numSamples, controls) {
                            numSamples = numSamples | 0;
                            controls = controls;
                            notImplemented("public flash.ui.GameInputDevice::startCachingSamples");
                            return;
                        };
                        GameInputDevice.prototype.stopCachingSamples = function () {
                            notImplemented("public flash.ui.GameInputDevice::stopCachingSamples");
                            return;
                        };
                        GameInputDevice.prototype.getCachedSamples = function (data, append) {
                            if (append === void 0) { append = false; }
                            data = data;
                            append = !!append;
                            notImplemented("public flash.ui.GameInputDevice::getCachedSamples");
                            return;
                        };
                        GameInputDevice.classInitializer = null;
                        GameInputDevice.initializer = null;
                        GameInputDevice.classSymbols = null;
                        GameInputDevice.instanceSymbols = null;
                        GameInputDevice.MAX_BUFFER_SIZE = 4800;
                        return GameInputDevice;
                    })(flash.events.EventDispatcher);
                    ui.GameInputDevice = GameInputDevice;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputFinger = (function (_super) {
                        __extends(GameInputFinger, _super);
                        function GameInputFinger() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.GameInputFinger");
                        }
                        GameInputFinger.classInitializer = null;
                        GameInputFinger.initializer = null;
                        GameInputFinger.classSymbols = null;
                        GameInputFinger.instanceSymbols = null;
                        GameInputFinger.THUMB = "thumb";
                        GameInputFinger.INDEX = "index";
                        GameInputFinger.MIDDLE = "middle";
                        GameInputFinger.UNKNOWN = "unknown";
                        return GameInputFinger;
                    })(AS.ASNative);
                    ui.GameInputFinger = GameInputFinger;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputHand = (function (_super) {
                        __extends(GameInputHand, _super);
                        function GameInputHand() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.GameInputHand");
                        }
                        GameInputHand.classInitializer = null;
                        GameInputHand.initializer = null;
                        GameInputHand.classSymbols = null;
                        GameInputHand.instanceSymbols = null;
                        GameInputHand.RIGHT = "right";
                        GameInputHand.LEFT = "left";
                        GameInputHand.UNKNOWN = "unknown";
                        return GameInputHand;
                    })(AS.ASNative);
                    ui.GameInputHand = GameInputHand;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var KeyboardEventDispatcher = (function () {
                        function KeyboardEventDispatcher() {
                            this._lastKeyCode = 0;
                            this._captureKeyPress = false;
                            this._charCodeMap = [];
                        }
                        KeyboardEventDispatcher.prototype.dispatchKeyboardEvent = function (event) {
                            var keyCode = event.keyCode;
                            if (event.type === 'keydown') {
                                this._lastKeyCode = keyCode;
                                this._captureKeyPress = keyCode === 8 || keyCode === 9 || keyCode === 13 || keyCode === 32 || (keyCode >= 48 && keyCode <= 90) || keyCode > 145;
                                if (this._captureKeyPress) {
                                    return;
                                }
                                this._charCodeMap[keyCode] = 0;
                            }
                            else if (event.type === 'keypress') {
                                if (this._captureKeyPress) {
                                    keyCode = this._lastKeyCode;
                                    this._charCodeMap[keyCode] = event.charCode;
                                }
                                else {
                                    return;
                                }
                            }
                            if (this.target) {
                                var isKeyUp = event.type === 'keyup';
                                this.target.dispatchEvent(new flash.events.KeyboardEvent(isKeyUp ? 'keyUp' : 'keyDown', true, false, isKeyUp ? this._charCodeMap[keyCode] : event.charCode, isKeyUp ? event.keyCode : this._lastKeyCode, event.location, event.ctrlKey, event.altKey, event.shiftKey));
                            }
                        };
                        return KeyboardEventDispatcher;
                    })();
                    ui.KeyboardEventDispatcher = KeyboardEventDispatcher;
                    var Keyboard = (function (_super) {
                        __extends(Keyboard, _super);
                        function Keyboard() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.Keyboard");
                        }
                        Object.defineProperty(Keyboard, "capsLock", {
                            get: function () {
                                notImplemented("public flash.ui.Keyboard::get capsLock");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Keyboard, "numLock", {
                            get: function () {
                                notImplemented("public flash.ui.Keyboard::get numLock");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Keyboard, "hasVirtualKeyboard", {
                            get: function () {
                                notImplemented("public flash.ui.Keyboard::get hasVirtualKeyboard");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Keyboard, "physicalKeyboardType", {
                            get: function () {
                                notImplemented("public flash.ui.Keyboard::get physicalKeyboardType");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Keyboard.isAccessible = function () {
                            notImplemented("public flash.ui.Keyboard::static isAccessible");
                            return;
                        };
                        Keyboard.classInitializer = null;
                        Keyboard.initializer = null;
                        Keyboard.classSymbols = null;
                        Keyboard.instanceSymbols = null;
                        Keyboard.KEYNAME_UPARROW = "Up";
                        Keyboard.KEYNAME_DOWNARROW = "Down";
                        Keyboard.KEYNAME_LEFTARROW = "Left";
                        Keyboard.KEYNAME_RIGHTARROW = "Right";
                        Keyboard.KEYNAME_F1 = "F1";
                        Keyboard.KEYNAME_F2 = "F2";
                        Keyboard.KEYNAME_F3 = "F3";
                        Keyboard.KEYNAME_F4 = "F4";
                        Keyboard.KEYNAME_F5 = "F5";
                        Keyboard.KEYNAME_F6 = "F6";
                        Keyboard.KEYNAME_F7 = "F7";
                        Keyboard.KEYNAME_F8 = "F8";
                        Keyboard.KEYNAME_F9 = "F9";
                        Keyboard.KEYNAME_F10 = "F10";
                        Keyboard.KEYNAME_F11 = "F11";
                        Keyboard.KEYNAME_F12 = "F12";
                        Keyboard.KEYNAME_F13 = "F13";
                        Keyboard.KEYNAME_F14 = "F14";
                        Keyboard.KEYNAME_F15 = "F15";
                        Keyboard.KEYNAME_F16 = "F16";
                        Keyboard.KEYNAME_F17 = "F17";
                        Keyboard.KEYNAME_F18 = "F18";
                        Keyboard.KEYNAME_F19 = "F19";
                        Keyboard.KEYNAME_F20 = "F20";
                        Keyboard.KEYNAME_F21 = "F21";
                        Keyboard.KEYNAME_F22 = "F22";
                        Keyboard.KEYNAME_F23 = "F23";
                        Keyboard.KEYNAME_F24 = "F24";
                        Keyboard.KEYNAME_F25 = "F25";
                        Keyboard.KEYNAME_F26 = "F26";
                        Keyboard.KEYNAME_F27 = "F27";
                        Keyboard.KEYNAME_F28 = "F28";
                        Keyboard.KEYNAME_F29 = "F29";
                        Keyboard.KEYNAME_F30 = "F30";
                        Keyboard.KEYNAME_F31 = "F31";
                        Keyboard.KEYNAME_F32 = "F32";
                        Keyboard.KEYNAME_F33 = "F33";
                        Keyboard.KEYNAME_F34 = "F34";
                        Keyboard.KEYNAME_F35 = "F35";
                        Keyboard.KEYNAME_INSERT = "Insert";
                        Keyboard.KEYNAME_DELETE = "Delete";
                        Keyboard.KEYNAME_HOME = "Home";
                        Keyboard.KEYNAME_BEGIN = "Begin";
                        Keyboard.KEYNAME_END = "End";
                        Keyboard.KEYNAME_PAGEUP = "PgUp";
                        Keyboard.KEYNAME_PAGEDOWN = "PgDn";
                        Keyboard.KEYNAME_PRINTSCREEN = "PrntScrn";
                        Keyboard.KEYNAME_SCROLLLOCK = "ScrlLck";
                        Keyboard.KEYNAME_PAUSE = "Pause";
                        Keyboard.KEYNAME_SYSREQ = "SysReq";
                        Keyboard.KEYNAME_BREAK = "Break";
                        Keyboard.KEYNAME_RESET = "Reset";
                        Keyboard.KEYNAME_STOP = "Stop";
                        Keyboard.KEYNAME_MENU = "Menu";
                        Keyboard.KEYNAME_USER = "User";
                        Keyboard.KEYNAME_SYSTEM = "Sys";
                        Keyboard.KEYNAME_PRINT = "Print";
                        Keyboard.KEYNAME_CLEARLINE = "ClrLn";
                        Keyboard.KEYNAME_CLEARDISPLAY = "ClrDsp";
                        Keyboard.KEYNAME_INSERTLINE = "InsLn";
                        Keyboard.KEYNAME_DELETELINE = "DelLn";
                        Keyboard.KEYNAME_INSERTCHAR = "InsChr";
                        Keyboard.KEYNAME_DELETECHAR = "DelChr";
                        Keyboard.KEYNAME_PREV = "Prev";
                        Keyboard.KEYNAME_NEXT = "Next";
                        Keyboard.KEYNAME_SELECT = "Select";
                        Keyboard.KEYNAME_EXECUTE = "Exec";
                        Keyboard.KEYNAME_UNDO = "Undo";
                        Keyboard.KEYNAME_REDO = "Redo";
                        Keyboard.KEYNAME_FIND = "Find";
                        Keyboard.KEYNAME_HELP = "Help";
                        Keyboard.KEYNAME_MODESWITCH = "ModeSw";
                        Keyboard.STRING_UPARROW = "";
                        Keyboard.STRING_DOWNARROW = "";
                        Keyboard.STRING_LEFTARROW = "";
                        Keyboard.STRING_RIGHTARROW = "";
                        Keyboard.STRING_F1 = "";
                        Keyboard.STRING_F2 = "";
                        Keyboard.STRING_F3 = "";
                        Keyboard.STRING_F4 = "";
                        Keyboard.STRING_F5 = "";
                        Keyboard.STRING_F6 = "";
                        Keyboard.STRING_F7 = "";
                        Keyboard.STRING_F8 = "";
                        Keyboard.STRING_F9 = "";
                        Keyboard.STRING_F10 = "";
                        Keyboard.STRING_F11 = "";
                        Keyboard.STRING_F12 = "";
                        Keyboard.STRING_F13 = "";
                        Keyboard.STRING_F14 = "";
                        Keyboard.STRING_F15 = "";
                        Keyboard.STRING_F16 = "";
                        Keyboard.STRING_F17 = "";
                        Keyboard.STRING_F18 = "";
                        Keyboard.STRING_F19 = "";
                        Keyboard.STRING_F20 = "";
                        Keyboard.STRING_F21 = "";
                        Keyboard.STRING_F22 = "";
                        Keyboard.STRING_F23 = "";
                        Keyboard.STRING_F24 = "";
                        Keyboard.STRING_F25 = "";
                        Keyboard.STRING_F26 = "";
                        Keyboard.STRING_F27 = "";
                        Keyboard.STRING_F28 = "";
                        Keyboard.STRING_F29 = "";
                        Keyboard.STRING_F30 = "";
                        Keyboard.STRING_F31 = "";
                        Keyboard.STRING_F32 = "";
                        Keyboard.STRING_F33 = "";
                        Keyboard.STRING_F34 = "";
                        Keyboard.STRING_F35 = "";
                        Keyboard.STRING_INSERT = "";
                        Keyboard.STRING_DELETE = "";
                        Keyboard.STRING_HOME = "";
                        Keyboard.STRING_BEGIN = "";
                        Keyboard.STRING_END = "";
                        Keyboard.STRING_PAGEUP = "";
                        Keyboard.STRING_PAGEDOWN = "";
                        Keyboard.STRING_PRINTSCREEN = "";
                        Keyboard.STRING_SCROLLLOCK = "";
                        Keyboard.STRING_PAUSE = "";
                        Keyboard.STRING_SYSREQ = "";
                        Keyboard.STRING_BREAK = "";
                        Keyboard.STRING_RESET = "";
                        Keyboard.STRING_STOP = "";
                        Keyboard.STRING_MENU = "";
                        Keyboard.STRING_USER = "";
                        Keyboard.STRING_SYSTEM = "";
                        Keyboard.STRING_PRINT = "";
                        Keyboard.STRING_CLEARLINE = "";
                        Keyboard.STRING_CLEARDISPLAY = "";
                        Keyboard.STRING_INSERTLINE = "";
                        Keyboard.STRING_DELETELINE = "";
                        Keyboard.STRING_INSERTCHAR = "";
                        Keyboard.STRING_DELETECHAR = "";
                        Keyboard.STRING_PREV = "";
                        Keyboard.STRING_NEXT = "";
                        Keyboard.STRING_SELECT = "";
                        Keyboard.STRING_EXECUTE = "";
                        Keyboard.STRING_UNDO = "";
                        Keyboard.STRING_REDO = "";
                        Keyboard.STRING_FIND = "";
                        Keyboard.STRING_HELP = "";
                        Keyboard.STRING_MODESWITCH = "";
                        Keyboard.CharCodeStrings = undefined;
                        Keyboard.NUMBER_0 = 48;
                        Keyboard.NUMBER_1 = 49;
                        Keyboard.NUMBER_2 = 50;
                        Keyboard.NUMBER_3 = 51;
                        Keyboard.NUMBER_4 = 52;
                        Keyboard.NUMBER_5 = 53;
                        Keyboard.NUMBER_6 = 54;
                        Keyboard.NUMBER_7 = 55;
                        Keyboard.NUMBER_8 = 56;
                        Keyboard.NUMBER_9 = 57;
                        Keyboard.A = 65;
                        Keyboard.B = 66;
                        Keyboard.C = 67;
                        Keyboard.D = 68;
                        Keyboard.E = 69;
                        Keyboard.F = 70;
                        Keyboard.G = 71;
                        Keyboard.H = 72;
                        Keyboard.I = 73;
                        Keyboard.J = 74;
                        Keyboard.K = 75;
                        Keyboard.L = 76;
                        Keyboard.M = 77;
                        Keyboard.N = 78;
                        Keyboard.O = 79;
                        Keyboard.P = 80;
                        Keyboard.Q = 81;
                        Keyboard.R = 82;
                        Keyboard.S = 83;
                        Keyboard.T = 84;
                        Keyboard.U = 85;
                        Keyboard.V = 86;
                        Keyboard.W = 87;
                        Keyboard.X = 88;
                        Keyboard.Y = 89;
                        Keyboard.Z = 90;
                        Keyboard.SEMICOLON = 186;
                        Keyboard.EQUAL = 187;
                        Keyboard.COMMA = 188;
                        Keyboard.MINUS = 189;
                        Keyboard.PERIOD = 190;
                        Keyboard.SLASH = 191;
                        Keyboard.BACKQUOTE = 192;
                        Keyboard.LEFTBRACKET = 219;
                        Keyboard.BACKSLASH = 220;
                        Keyboard.RIGHTBRACKET = 221;
                        Keyboard.QUOTE = 222;
                        Keyboard.ALTERNATE = 18;
                        Keyboard.BACKSPACE = 8;
                        Keyboard.CAPS_LOCK = 20;
                        Keyboard.COMMAND = 15;
                        Keyboard.CONTROL = 17;
                        Keyboard.DELETE = 46;
                        Keyboard.DOWN = 40;
                        Keyboard.END = 35;
                        Keyboard.ENTER = 13;
                        Keyboard.ESCAPE = 27;
                        Keyboard.F1 = 112;
                        Keyboard.F2 = 113;
                        Keyboard.F3 = 114;
                        Keyboard.F4 = 115;
                        Keyboard.F5 = 116;
                        Keyboard.F6 = 117;
                        Keyboard.F7 = 118;
                        Keyboard.F8 = 119;
                        Keyboard.F9 = 120;
                        Keyboard.F10 = 121;
                        Keyboard.F11 = 122;
                        Keyboard.F12 = 123;
                        Keyboard.F13 = 124;
                        Keyboard.F14 = 125;
                        Keyboard.F15 = 126;
                        Keyboard.HOME = 36;
                        Keyboard.INSERT = 45;
                        Keyboard.LEFT = 37;
                        Keyboard.NUMPAD = 21;
                        Keyboard.NUMPAD_0 = 96;
                        Keyboard.NUMPAD_1 = 97;
                        Keyboard.NUMPAD_2 = 98;
                        Keyboard.NUMPAD_3 = 99;
                        Keyboard.NUMPAD_4 = 100;
                        Keyboard.NUMPAD_5 = 101;
                        Keyboard.NUMPAD_6 = 102;
                        Keyboard.NUMPAD_7 = 103;
                        Keyboard.NUMPAD_8 = 104;
                        Keyboard.NUMPAD_9 = 105;
                        Keyboard.NUMPAD_ADD = 107;
                        Keyboard.NUMPAD_DECIMAL = 110;
                        Keyboard.NUMPAD_DIVIDE = 111;
                        Keyboard.NUMPAD_ENTER = 108;
                        Keyboard.NUMPAD_MULTIPLY = 106;
                        Keyboard.NUMPAD_SUBTRACT = 109;
                        Keyboard.PAGE_DOWN = 34;
                        Keyboard.PAGE_UP = 33;
                        Keyboard.RIGHT = 39;
                        Keyboard.SHIFT = 16;
                        Keyboard.SPACE = 32;
                        Keyboard.TAB = 9;
                        Keyboard.UP = 38;
                        Keyboard.RED = 16777216;
                        Keyboard.GREEN = 16777217;
                        Keyboard.YELLOW = 16777218;
                        Keyboard.BLUE = 16777219;
                        Keyboard.CHANNEL_UP = 16777220;
                        Keyboard.CHANNEL_DOWN = 16777221;
                        Keyboard.RECORD = 16777222;
                        Keyboard.PLAY = 16777223;
                        Keyboard.PAUSE = 16777224;
                        Keyboard.STOP = 16777225;
                        Keyboard.FAST_FORWARD = 16777226;
                        Keyboard.REWIND = 16777227;
                        Keyboard.SKIP_FORWARD = 16777228;
                        Keyboard.SKIP_BACKWARD = 16777229;
                        Keyboard.NEXT = 16777230;
                        Keyboard.PREVIOUS = 16777231;
                        Keyboard.LIVE = 16777232;
                        Keyboard.LAST = 16777233;
                        Keyboard.MENU = 16777234;
                        Keyboard.INFO = 16777235;
                        Keyboard.GUIDE = 16777236;
                        Keyboard.EXIT = 16777237;
                        Keyboard.BACK = 16777238;
                        Keyboard.AUDIO = 16777239;
                        Keyboard.SUBTITLE = 16777240;
                        Keyboard.DVR = 16777241;
                        Keyboard.VOD = 16777242;
                        Keyboard.INPUT = 16777243;
                        Keyboard.SETUP = 16777244;
                        Keyboard.HELP = 16777245;
                        Keyboard.MASTER_SHELL = 16777246;
                        Keyboard.SEARCH = 16777247;
                        return Keyboard;
                    })(AS.ASNative);
                    ui.Keyboard = Keyboard;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var assert = Shumway.Debug.assert;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var events = flash.events;
                    var MouseEventDispatcher = (function () {
                        function MouseEventDispatcher() {
                            this.stage = null;
                            this.currentTarget = null;
                        }
                        MouseEventDispatcher.prototype._findTarget = function (point, testingType) {
                            var globalX = point.x * 20 | 0;
                            var globalY = point.y * 20 | 0;
                            var objects = [];
                            this.stage._containsGlobalPoint(globalX, globalY, testingType, objects);
                            release || assert(objects.length < 2);
                            if (objects.length) {
                                return objects[0];
                            }
                            return objects.length ? objects[0] : null;
                        };
                        MouseEventDispatcher.prototype._dispatchMouseEvent = function (target, type, data, relatedObject) {
                            if (relatedObject === void 0) { relatedObject = null; }
                            var localPoint = target.globalToLocal(data.point);
                            var event = new events.MouseEvent(type, type !== events.MouseEvent.ROLL_OVER && type !== events.MouseEvent.ROLL_OUT && type !== events.MouseEvent.MOUSE_LEAVE, false, localPoint.x, localPoint.y, relatedObject, data.ctrlKey, data.altKey, data.shiftKey, !!data.buttons);
                            target.dispatchEvent(event);
                        };
                        MouseEventDispatcher.prototype.handleMouseEvent = function (data) {
                            var stage = this.stage;
                            if (!stage) {
                                return stage;
                            }
                            var globalPoint = data.point;
                            flash.ui.Mouse.updateCurrentPosition(globalPoint);
                            var currentTarget = this.currentTarget;
                            var target = null;
                            var type = flash.events.MouseEvent.typeFromDOMType(data.type);
                            if (globalPoint.x >= 0 && globalPoint.x < stage.stageWidth && globalPoint.y >= 0 && globalPoint.y < stage.stageHeight) {
                                target = this._findTarget(globalPoint, 3 /* Mouse */) || this.stage;
                            }
                            else {
                                if (!currentTarget) {
                                    return stage;
                                }
                                this._dispatchMouseEvent(stage, events.MouseEvent.MOUSE_LEAVE, data);
                                if (type !== events.MouseEvent.MOUSE_MOVE) {
                                    return stage;
                                }
                            }
                            if (flash.ui.Mouse.draggableObject) {
                                var dropTarget = this._findTarget(globalPoint, 5 /* Drop */);
                                flash.ui.Mouse.draggableObject._updateDragState(dropTarget);
                            }
                            switch (type) {
                                case events.MouseEvent.MOUSE_DOWN:
                                    if (data.buttons & 1 /* Left */) {
                                        data.buttons = 1 /* Left */;
                                    }
                                    else if (data.buttons & 2 /* Middle */) {
                                        type = events.MouseEvent.MIDDLE_MOUSE_DOWN;
                                        data.buttons = 2 /* Middle */;
                                    }
                                    else if (data.buttons & 4 /* Right */) {
                                        type = events.MouseEvent.RIGHT_MOUSE_DOWN;
                                        data.buttons = 4 /* Right */;
                                    }
                                    target._mouseDown = true;
                                    break;
                                case events.MouseEvent.MOUSE_UP:
                                    if (data.buttons & 1 /* Left */) {
                                        data.buttons = 1 /* Left */;
                                    }
                                    else if (data.buttons & 2 /* Middle */) {
                                        type = events.MouseEvent.MIDDLE_MOUSE_UP;
                                        data.buttons = 2 /* Middle */;
                                    }
                                    else if (data.buttons & 4 /* Right */) {
                                        type = events.MouseEvent.RIGHT_MOUSE_UP;
                                        data.buttons = 4 /* Right */;
                                    }
                                    target._mouseDown = false;
                                    break;
                                case events.MouseEvent.CLICK:
                                    if (!(data.buttons & 1 /* Left */)) {
                                        if (data.buttons & 2 /* Middle */) {
                                            type = events.MouseEvent.MIDDLE_CLICK;
                                        }
                                        else if (data.buttons & 4 /* Right */) {
                                            type = events.MouseEvent.RIGHT_CLICK;
                                        }
                                    }
                                    data.buttons = 0;
                                    break;
                                case events.MouseEvent.DOUBLE_CLICK:
                                    if (!target.doubleClickEnabled) {
                                        return;
                                    }
                                    data.buttons = 0;
                                    break;
                                case events.MouseEvent.MOUSE_MOVE:
                                    this.currentTarget = target;
                                    data.buttons &= 1 /* Left */;
                                    if (target === currentTarget) {
                                        break;
                                    }
                                    var commonAncestor = target ? target.findNearestCommonAncestor(currentTarget) : stage;
                                    if (currentTarget && currentTarget !== stage) {
                                        currentTarget._mouseOver = false;
                                        currentTarget._mouseDown = false;
                                        this._dispatchMouseEvent(currentTarget, events.MouseEvent.MOUSE_OUT, data, target);
                                        var nodeLeft = currentTarget;
                                        while (nodeLeft && nodeLeft !== commonAncestor) {
                                            this._dispatchMouseEvent(nodeLeft, events.MouseEvent.ROLL_OUT, data, target);
                                            nodeLeft = nodeLeft.parent;
                                        }
                                    }
                                    if (!target) {
                                        return stage;
                                    }
                                    if (target === stage) {
                                        break;
                                    }
                                    var nodeEntered = target;
                                    while (nodeEntered !== commonAncestor) {
                                        this._dispatchMouseEvent(nodeEntered, events.MouseEvent.ROLL_OVER, data, currentTarget);
                                        nodeEntered = nodeEntered.parent;
                                    }
                                    target._mouseOver = true;
                                    this._dispatchMouseEvent(target, events.MouseEvent.MOUSE_OVER, data, currentTarget);
                                    return target;
                            }
                            this._dispatchMouseEvent(target, type, data);
                            return target;
                        };
                        return MouseEventDispatcher;
                    })();
                    ui.MouseEventDispatcher = MouseEventDispatcher;
                    (function (MouseButtonFlags) {
                        MouseButtonFlags[MouseButtonFlags["Left"] = 0x01] = "Left";
                        MouseButtonFlags[MouseButtonFlags["Middle"] = 0x02] = "Middle";
                        MouseButtonFlags[MouseButtonFlags["Right"] = 0x04] = "Right";
                    })(ui.MouseButtonFlags || (ui.MouseButtonFlags = {}));
                    var MouseButtonFlags = ui.MouseButtonFlags;
                    var Mouse = (function (_super) {
                        __extends(Mouse, _super);
                        function Mouse() {
                            false && _super.call(this);
                        }
                        Object.defineProperty(Mouse, "supportsCursor", {
                            get: function () {
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Mouse, "cursor", {
                            get: function () {
                                return this._cursor;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (ui.MouseCursor.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidParamError, "cursor");
                                }
                                this._cursor = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Mouse, "supportsNativeCursor", {
                            get: function () {
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Mouse.hide = function () {
                            somewhatImplemented("public flash.ui.Mouse::static hide");
                            return;
                        };
                        Mouse.show = function () {
                            somewhatImplemented("public flash.ui.Mouse::static show");
                            return;
                        };
                        Mouse.registerCursor = function (name, cursor) {
                            name = asCoerceString(name);
                            cursor = cursor;
                            notImplemented("public flash.ui.Mouse::static registerCursor");
                            return;
                        };
                        Mouse.unregisterCursor = function (name) {
                            name = asCoerceString(name);
                            notImplemented("public flash.ui.Mouse::static unregisterCursor");
                            return;
                        };
                        Mouse.updateCurrentPosition = function (value) {
                            this._currentPosition.copyFrom(value);
                        };
                        Mouse.classInitializer = function () {
                            this._currentPosition = new flash.geom.Point();
                            this._cursor = ui.MouseCursor.AUTO;
                            this.draggableObject = null;
                        };
                        Mouse.initializer = null;
                        Mouse.classSymbols = null;
                        Mouse.instanceSymbols = null;
                        return Mouse;
                    })(AS.ASNative);
                    ui.Mouse = Mouse;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MouseCursor = (function (_super) {
                        __extends(MouseCursor, _super);
                        function MouseCursor() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.MouseCursor");
                        }
                        MouseCursor.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return MouseCursor.AUTO;
                                case 1:
                                    return MouseCursor.ARROW;
                                case 2:
                                    return MouseCursor.BUTTON;
                                case 3:
                                    return MouseCursor.HAND;
                                case 4:
                                    return MouseCursor.IBEAM;
                                default:
                                    return null;
                            }
                        };
                        MouseCursor.toNumber = function (value) {
                            switch (value) {
                                case MouseCursor.AUTO:
                                    return 0;
                                case MouseCursor.ARROW:
                                    return 1;
                                case MouseCursor.BUTTON:
                                    return 2;
                                case MouseCursor.HAND:
                                    return 3;
                                case MouseCursor.IBEAM:
                                    return 4;
                                default:
                                    return -1;
                            }
                        };
                        MouseCursor.classInitializer = null;
                        MouseCursor.initializer = null;
                        MouseCursor.classSymbols = null;
                        MouseCursor.instanceSymbols = null;
                        MouseCursor.AUTO = "auto";
                        MouseCursor.ARROW = "arrow";
                        MouseCursor.BUTTON = "button";
                        MouseCursor.HAND = "hand";
                        MouseCursor.IBEAM = "ibeam";
                        return MouseCursor;
                    })(AS.ASNative);
                    ui.MouseCursor = MouseCursor;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MouseCursorData = (function (_super) {
                        __extends(MouseCursorData, _super);
                        function MouseCursorData() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.MouseCursorData");
                        }
                        Object.defineProperty(MouseCursorData.prototype, "data", {
                            get: function () {
                                notImplemented("public flash.ui.MouseCursorData::get data");
                                return;
                            },
                            set: function (data) {
                                data = data;
                                notImplemented("public flash.ui.MouseCursorData::set data");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseCursorData.prototype, "hotSpot", {
                            get: function () {
                                notImplemented("public flash.ui.MouseCursorData::get hotSpot");
                                return;
                            },
                            set: function (data) {
                                data = data;
                                notImplemented("public flash.ui.MouseCursorData::set hotSpot");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseCursorData.prototype, "frameRate", {
                            get: function () {
                                notImplemented("public flash.ui.MouseCursorData::get frameRate");
                                return;
                            },
                            set: function (data) {
                                data = +data;
                                notImplemented("public flash.ui.MouseCursorData::set frameRate");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MouseCursorData.classInitializer = null;
                        MouseCursorData.initializer = null;
                        MouseCursorData.classSymbols = null;
                        MouseCursorData.instanceSymbols = null;
                        return MouseCursorData;
                    })(AS.ASNative);
                    ui.MouseCursorData = MouseCursorData;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Multitouch = (function (_super) {
                        __extends(Multitouch, _super);
                        function Multitouch() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.Multitouch");
                        }
                        Object.defineProperty(Multitouch, "inputMode", {
                            get: function () {
                                notImplemented("public flash.ui.Multitouch::get inputMode");
                                return;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                notImplemented("public flash.ui.Multitouch::set inputMode");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "supportsTouchEvents", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get supportsTouchEvents");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "supportsGestureEvents", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get supportsGestureEvents");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "supportedGestures", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get supportedGestures");
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "maxTouchPoints", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get maxTouchPoints");
                                return 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "mapTouchToMouse", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get mapTouchToMouse");
                                return true;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.ui.Multitouch::set mapTouchToMouse");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Multitouch.classInitializer = null;
                        Multitouch.initializer = null;
                        Multitouch.classSymbols = null;
                        Multitouch.instanceSymbols = null;
                        return Multitouch;
                    })(AS.ASNative);
                    ui.Multitouch = Multitouch;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MultitouchInputMode = (function (_super) {
                        __extends(MultitouchInputMode, _super);
                        function MultitouchInputMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.MultitouchInputMode");
                        }
                        MultitouchInputMode.classInitializer = null;
                        MultitouchInputMode.initializer = null;
                        MultitouchInputMode.classSymbols = null;
                        MultitouchInputMode.instanceSymbols = null;
                        MultitouchInputMode.NONE = "none";
                        MultitouchInputMode.GESTURE = "gesture";
                        MultitouchInputMode.TOUCH_POINT = "touchPoint";
                        return MultitouchInputMode;
                    })(AS.ASNative);
                    ui.MultitouchInputMode = MultitouchInputMode;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Endian = (function (_super) {
                        __extends(Endian, _super);
                        function Endian() {
                            false && _super.call(this);
                            dummyConstructor("public flash.utils.Endian");
                        }
                        Endian.classInitializer = null;
                        Endian.initializer = null;
                        Endian.classSymbols = null;
                        Endian.instanceSymbols = null;
                        Endian.BIG_ENDIAN = "bigEndian";
                        Endian.LITTLE_ENDIAN = "littleEndian";
                        return Endian;
                    })(AS.ASNative);
                    utils.Endian = Endian;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var enterTimeline = Shumway.AVM2.enterTimeline;
                    var leaveTimeline = Shumway.AVM2.leaveTimeline;
                    var Timer = (function (_super) {
                        __extends(Timer, _super);
                        function Timer(delay, repeatCount) {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._delay = +delay;
                            this._repeatCount = repeatCount | 0;
                            this._iteration = 0;
                        }
                        Object.defineProperty(Timer.prototype, "running", {
                            get: function () {
                                return this._running;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Timer.prototype, "delay", {
                            get: function () {
                                return this._delay;
                            },
                            set: function (value) {
                                value = +value;
                                if (value < 0 || !isFinite(value)) {
                                    throwError('RangeError', AVM2.Errors.DelayRangeError);
                                }
                                this._delay = value;
                                if (this._running) {
                                    this.stop();
                                    this.start();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Timer.prototype, "repeatCount", {
                            get: function () {
                                return this._repeatCount;
                            },
                            set: function (value) {
                                this._repeatCount = value | 0;
                                if (this._repeatCount && this._running && this._iteration >= this._repeatCount) {
                                    this.stop();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Timer.prototype, "currentCount", {
                            get: function () {
                                return this._iteration;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Timer.prototype.reset = function () {
                            if (this._running) {
                                this.stop();
                            }
                            this._iteration = 0;
                        };
                        Timer.prototype.stop = function () {
                            this._running = false;
                            clearInterval(this._interval);
                        };
                        Timer.prototype.start = function () {
                            if (this._running) {
                                return;
                            }
                            this._running = true;
                            this._interval = setInterval(this._tick.bind(this), this._delay);
                        };
                        Timer.prototype._tick = function () {
                            this._iteration++;
                            if (!this._running) {
                                return;
                            }
                            if (flash.utils.Timer.dispatchingEnabled) {
                                enterTimeline("Timer.Timer");
                                try {
                                    this.dispatchEvent(new flash.events.TimerEvent("timer", true, false));
                                }
                                catch (e) {
                                    console.warn('caught error under Timer TIMER event: ', e);
                                }
                                leaveTimeline();
                            }
                            if (this._repeatCount !== 0 && this._iteration >= this._repeatCount) {
                                this.stop();
                                enterTimeline("Timer.TimerComplete");
                                try {
                                    this.dispatchEvent(new flash.events.TimerEvent(flash.events.TimerEvent.TIMER_COMPLETE, false, false));
                                }
                                catch (e) {
                                    console.warn('caught error under Timer COMPLETE event: ', e);
                                }
                                leaveTimeline();
                            }
                        };
                        Timer.classInitializer = null;
                        Timer.initializer = null;
                        Timer.classSymbols = null;
                        Timer.instanceSymbols = null;
                        Timer.dispatchingEnabled = true;
                        return Timer;
                    })(flash.events.EventDispatcher);
                    utils.Timer = Timer;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SetIntervalTimer = (function (_super) {
                        __extends(SetIntervalTimer, _super);
                        function SetIntervalTimer(closure, delay, repeats, rest) {
                            closure = closure;
                            delay = +delay;
                            repeats = !!repeats;
                            rest = rest;
                            false && _super.call(this, undefined, undefined);
                            dummyConstructor("packageInternal flash.utils.SetIntervalTimer");
                        }
                        SetIntervalTimer.classInitializer = null;
                        SetIntervalTimer.initializer = null;
                        SetIntervalTimer.classSymbols = null;
                        SetIntervalTimer.instanceSymbols = null;
                        return SetIntervalTimer;
                    })(flash.utils.Timer);
                    utils.SetIntervalTimer = SetIntervalTimer;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var XMLNode = (function (_super) {
                        __extends(XMLNode, _super);
                        function XMLNode(type, value) {
                            type = type >>> 0;
                            value = asCoerceString(value);
                            false && _super.call(this);
                            dummyConstructor("public flash.xml.XMLNode");
                        }
                        XMLNode.escapeXML = function (value) {
                            value = asCoerceString(value);
                            notImplemented("public flash.xml.XMLNode::static escapeXML");
                            return;
                        };
                        XMLNode.initializer = null;
                        return XMLNode;
                    })(AS.ASNative);
                    xml.XMLNode = XMLNode;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var XMLDocument = (function (_super) {
                        __extends(XMLDocument, _super);
                        function XMLDocument(source) {
                            if (source === void 0) { source = null; }
                            source = asCoerceString(source);
                            false && _super.call(this, undefined, undefined);
                            dummyConstructor("public flash.xml.XMLDocument");
                        }
                        XMLDocument.initializer = null;
                        return XMLDocument;
                    })(flash.xml.XMLNode);
                    xml.XMLDocument = XMLDocument;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var XMLNodeType = (function (_super) {
                        __extends(XMLNodeType, _super);
                        function XMLNodeType() {
                            false && _super.call(this);
                            dummyConstructor("public flash.xml.XMLNodeType");
                        }
                        XMLNodeType.initializer = null;
                        return XMLNodeType;
                    })(AS.ASNative);
                    xml.XMLNodeType = XMLNodeType;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var XMLParser = (function (_super) {
                        __extends(XMLParser, _super);
                        function XMLParser() {
                            false && _super.call(this);
                            dummyConstructor("packageInternal flash.xml.XMLParser");
                        }
                        XMLParser.prototype.startParse = function (source, ignoreWhite) {
                            source = asCoerceString(source);
                            ignoreWhite = !!ignoreWhite;
                            notImplemented("packageInternal flash.xml.XMLParser::startParse");
                            return;
                        };
                        XMLParser.prototype.getNext = function (tag) {
                            tag = tag;
                            notImplemented("packageInternal flash.xml.XMLParser::getNext");
                            return;
                        };
                        XMLParser.initializer = null;
                        return XMLParser;
                    })(AS.ASNative);
                    xml.XMLParser = XMLParser;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var XMLTag = (function (_super) {
                        __extends(XMLTag, _super);
                        function XMLTag() {
                            false && _super.call(this);
                            dummyConstructor("packageInternal flash.xml.XMLTag");
                        }
                        Object.defineProperty(XMLTag.prototype, "type", {
                            get: function () {
                                notImplemented("packageInternal flash.xml.XMLTag::get type");
                                return;
                            },
                            set: function (value) {
                                value = value >>> 0;
                                notImplemented("packageInternal flash.xml.XMLTag::set type");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(XMLTag.prototype, "empty", {
                            get: function () {
                                notImplemented("packageInternal flash.xml.XMLTag::get empty");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("packageInternal flash.xml.XMLTag::set empty");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(XMLTag.prototype, "value", {
                            get: function () {
                                notImplemented("packageInternal flash.xml.XMLTag::get value");
                                return;
                            },
                            set: function (v) {
                                v = asCoerceString(v);
                                notImplemented("packageInternal flash.xml.XMLTag::set value");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(XMLTag.prototype, "attrs", {
                            get: function () {
                                notImplemented("packageInternal flash.xml.XMLTag::get attrs");
                                return;
                            },
                            set: function (value) {
                                value = value;
                                notImplemented("packageInternal flash.xml.XMLTag::set attrs");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        XMLTag.initializer = null;
                        return XMLTag;
                    })(AS.ASNative);
                    xml.XMLTag = XMLTag;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var throwError = Shumway.AVM2.Runtime.throwError;
            var flash = Shumway.AVM2.AS.flash;
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var assert = Shumway.Debug.assert;
            function M(classSimpleName, nativeName, cls) {
                return {
                    classSimpleName: classSimpleName,
                    nativeName: nativeName,
                    cls: cls
                };
            }
            function makeStub(container, classSimpleName, shortName) {
                Object.defineProperty(container, shortName, {
                    get: function () {
                        release || assert(Shumway.AVM2.Runtime.AVM2.instance, "AVM2 needs to be initialized.");
                        var cls = Shumway.AVM2.Runtime.AVM2.instance.systemDomain.getClass(classSimpleName);
                        release || assert(cls.instanceConstructor);
                        Object.defineProperty(container, shortName, {
                            value: cls.instanceConstructor,
                            writable: false
                        });
                        return container[shortName];
                    },
                    configurable: true
                });
            }
            jsGlobal["flash"] = Shumway.AVM2.AS.flash;
            function linkNatives(runtime) {
                var symbols = [
                    M("flash.display.DisplayObject", "DisplayObjectClass", flash.display.DisplayObject),
                    M("flash.display.InteractiveObject", "InteractiveObjectClass", flash.display.InteractiveObject),
                    M("flash.display.DisplayObjectContainer", "ContainerClass", flash.display.DisplayObjectContainer),
                    M("flash.display.Sprite", "SpriteClass", flash.display.Sprite),
                    M("flash.display.MovieClip", "MovieClipClass", flash.display.MovieClip),
                    M("flash.display.Shape", "ShapeClass", flash.display.Shape),
                    M("flash.display.Bitmap", "BitmapClass", flash.display.Bitmap),
                    M("flash.display.BitmapData", "BitmapDataClass", flash.display.BitmapData),
                    M("flash.display.Stage", "StageClass", flash.display.Stage),
                    M("flash.display.Loader", "LoaderClass", flash.display.Loader),
                    M("flash.display.LoaderInfo", "LoaderInfoClass", flash.display.LoaderInfo),
                    M("flash.display.Graphics", "GraphicsClass", flash.display.Graphics),
                    M("flash.display.SimpleButton", "SimpleButtonClass", flash.display.SimpleButton),
                    M("flash.display.MorphShape", "MorphShapeClass", flash.display.MorphShape),
                    M("flash.display.NativeMenu", "NativeMenuClass", flash.display.NativeMenu),
                    M("flash.display.NativeMenuItem", "NativeMenuItemClass", flash.display.NativeMenuItem),
                    M("flash.display.FrameLabel", "FrameLabelClass", flash.display.FrameLabel),
                    M("flash.display.Scene", "SceneClass", flash.display.Scene),
                    M("flash.display.AVM1Movie", "AVM1MovieClass", flash.display.AVM1Movie),
                    M("flash.filters.BevelFilter", "BevelFilterClass", flash.filters.BevelFilter),
                    M("flash.filters.BitmapFilter", "BitmapFilterClass", flash.filters.BitmapFilter),
                    M("flash.filters.BlurFilter", "BlurFilterClass", flash.filters.BlurFilter),
                    M("flash.filters.ColorMatrixFilter", "ColorMatrixFilterClass", flash.filters.ColorMatrixFilter),
                    M("flash.filters.ConvolutionFilter", "ConvolutionFilterClass", flash.filters.ConvolutionFilter),
                    M("flash.filters.DisplacementMapFilter", "DisplacementMapFilterClass", flash.filters.DisplacementMapFilter),
                    M("flash.filters.DropShadowFilter", "DropShadowFilterClass", flash.filters.DropShadowFilter),
                    M("flash.filters.GlowFilter", "GlowFilterClass", flash.filters.GlowFilter),
                    M("flash.filters.GradientBevelFilter", "GradientBevelFilterClass", flash.filters.GradientBevelFilter),
                    M("flash.filters.GradientGlowFilter", "GradientGlowFilterClass", flash.filters.GradientGlowFilter),
                    M("flash.geom.Point", "PointClass", flash.geom.Point),
                    M("flash.geom.Rectangle", "RectangleClass", flash.geom.Rectangle),
                    M("flash.geom.Matrix", "MatrixClass", flash.geom.Matrix),
                    M("flash.geom.Matrix3D", "Matrix3DClass", flash.geom.Matrix3D),
                    M("flash.geom.Vector3D", "Vector3DClass", flash.geom.Vector3D),
                    M("flash.geom.Transform", "TransformClass", flash.geom.Transform),
                    M("flash.geom.ColorTransform", "ColorTransformClass", flash.geom.ColorTransform),
                    M("flash.events.EventDispatcher", "EventDispatcherClass", flash.events.EventDispatcher),
                    M("flash.events.Event", "EventClass", flash.events.Event),
                    M("flash.events.ErrorEvent", "ErrorEventClass", flash.events.ErrorEvent),
                    M("flash.events.IOErrorEvent", "IOErrorEventClass", flash.events.IOErrorEvent),
                    M("flash.events.KeyboardEvent", "KeyboardEventClass", flash.events.KeyboardEvent),
                    M("flash.events.MouseEvent", "MouseEventClass", flash.events.MouseEvent),
                    M("flash.events.GestureEvent", "GestureEventClass", flash.events.GestureEvent),
                    M("flash.events.TextEvent", "TextEventClass", flash.events.TextEvent),
                    M("flash.events.TimerEvent", "TimerEventClass", flash.events.TimerEvent),
                    M("flash.events.ProgressEvent", "ProgressEventClass", flash.events.ProgressEvent),
                    M("flash.events.NetStatusEvent", "NetStatusEventClass", flash.events.NetStatusEvent),
                    M("flash.events.HTTPStatusEvent", "HTTPStatusEventClass", flash.events.HTTPStatusEvent),
                    M("flash.events.UncaughtErrorEvents", "UncaughtErrorEventsClass", flash.events.UncaughtErrorEvents),
                    M("flash.external.ExternalInterface", "ExternalInterfaceClass", flash.external.ExternalInterface),
                    M("flash.ui.ContextMenu", "ContextMenuClass", flash.ui.ContextMenu),
                    M("flash.ui.ContextMenuItem", "ContextMenuItemClass", flash.ui.ContextMenuItem),
                    M("flash.ui.ContextMenuBuiltInItems", "ContextMenuBuiltInItemsClass", flash.ui.ContextMenuBuiltInItems),
                    M("flash.ui.ContextMenuClipboardItems", "ContextMenuClipboardItemsClass", flash.ui.ContextMenuClipboardItems),
                    M("flash.ui.Keyboard", "KeyboardClass", flash.ui.Keyboard),
                    M("flash.ui.Mouse", "MouseClass", flash.ui.Mouse),
                    M("flash.ui.MouseCursorData", "MouseCursorDataClass", flash.ui.MouseCursorData),
                    M("flash.ui.GameInput", "GameInputClass", flash.ui.GameInput),
                    M("flash.events.GameInputEvent", "GameInputEventClass", flash.events.GameInputEvent),
                    M("flash.ui.GameInputControl", "GameInputControlClass", flash.ui.GameInputControl),
                    M("flash.ui.GameInputControlType", "GameInputControlTypeClass", flash.ui.GameInputControlType),
                    M("flash.ui.GameInputDevice", "GameInputDeviceClass", flash.ui.GameInputDevice),
                    M("flash.ui.GameInputFinger", "GameInputFingerClass", flash.ui.GameInputFinger),
                    M("flash.ui.GameInputHand", "GameInputHandClass", flash.ui.GameInputHand),
                    M("flash.ui.Multitouch", "MultitouchClass", flash.ui.Multitouch),
                    M("flash.ui.MultitouchInputMode", "MultitouchInputModeClass", flash.ui.MultitouchInputMode),
                    M("flash.events.TouchEvent", "TouchEventClass", flash.events.TouchEvent),
                    M("flash.text.Font", "FontClass", flash.text.Font),
                    M("flash.text.TextField", "TextFieldClass", flash.text.TextField),
                    M("flash.text.StaticText", "StaticTextClass", flash.text.StaticText),
                    M("flash.text.StyleSheet", "StyleSheetClass", flash.text.StyleSheet),
                    M("flash.text.TextFormat", "TextFormatClass", flash.text.TextFormat),
                    M("flash.text.TextRun", "TextRunClass", flash.text.TextRun),
                    M("flash.text.TextLineMetrics"),
                    M("flash.media.Sound", "SoundClass", flash.media.Sound),
                    M("flash.media.SoundChannel", "SoundChannelClass", flash.media.SoundChannel),
                    M("flash.media.SoundMixer", "SoundMixerClass", flash.media.SoundMixer),
                    M("flash.media.SoundTransform", "SoundTransformClass", flash.media.SoundTransform),
                    M("flash.media.Video", "VideoClass", flash.media.Video),
                    M("flash.media.StageVideo", "StageVideoClass", flash.media.StageVideo),
                    M("flash.media.ID3Info", "ID3InfoClass", flash.media.ID3Info),
                    M("flash.media.Microphone", "MicrophoneClass", flash.media.Microphone),
                    M("flash.net.FileFilter", "FileFilterClass", flash.net.FileFilter),
                    M("flash.net.NetConnection", "NetConnectionClass", flash.net.NetConnection),
                    M("flash.net.NetStream", "NetStreamClass", flash.net.NetStream),
                    M("flash.net.Responder", "ResponderClass", flash.net.Responder),
                    M("flash.net.URLRequest", "URLRequestClass", flash.net.URLRequest),
                    M("flash.net.URLRequestHeader"),
                    M("flash.net.URLStream", "URLStreamClass", flash.net.URLStream),
                    M("flash.net.URLLoader", "URLLoaderClass", flash.net.URLLoader),
                    M("flash.net.SharedObject", "SharedObjectClass", flash.net.SharedObject),
                    M("flash.net.ObjectEncoding", "ObjectEncodingClass", flash.net.ObjectEncoding),
                    M("flash.net.LocalConnection", "LocalConnectionClass", flash.net.LocalConnection),
                    M("flash.net.Socket", "SocketClass", flash.net.Socket),
                    M("flash.net.URLVariables", "URLVariablesClass", flash.net.URLVariables),
                    M("packageInternal flash.system.FSCommand", "FSCommandClass", flash.system.FSCommand),
                    M("flash.system.Capabilities", "CapabilitiesClass", flash.system.Capabilities),
                    M("flash.system.Security", "SecurityClass", flash.system.Security),
                    M("flash.system.SecurityDomain", "SecurityDomainClass", flash.system.SecurityDomain),
                    M("flash.system.ApplicationDomain", "ApplicationDomainClass", flash.system.ApplicationDomain),
                    M("flash.system.JPEGLoaderContext", "JPEGLoaderContextClass", flash.system.JPEGLoaderContext),
                    M("flash.system.LoaderContext", "LoaderContextClass", flash.system.LoaderContext),
                    M("flash.accessibility.Accessibility", "AccessibilityClass", flash.accessibility.Accessibility),
                    M("flash.utils.Timer", "TimerClass", flash.utils.Timer),
                    M("flash.utils.ByteArray", "ByteArrayClass", flash.utils.ByteArray),
                ];
                symbols.forEach(function (s) {
                    var className = Multiname.fromSimpleName(s.classSimpleName);
                    var path = className.getOriginalName().split(".");
                    var container = Shumway.AVM2.AS;
                    for (var i = 0, j = path.length - 1; i < j; i++) {
                        if (!container[path[i]]) {
                            container[path[i]] = {};
                        }
                        container = container[path[i]];
                    }
                    makeStub(container, s.classSimpleName, path[path.length - 1]);
                    AS.registerNativeClass(s.nativeName, s.cls);
                });
                AS.registerNativeFunction('FlashUtilScript::getDefinitionByName', Shumway.AVM2.AS.Natives.getDefinitionByName);
                AS.registerNativeFunction('FlashUtilScript::getTimer', FlashUtilScript_getTimer);
                AS.registerNativeFunction('FlashUtilScript::escapeMultiByte', escape);
                AS.registerNativeFunction('FlashUtilScript::unescapeMultiByte', unescape);
                AS.registerNativeFunction('FlashNetScript::navigateToURL', FlashNetScript_navigateToURL);
                AS.registerNativeFunction('FlashNetScript::sendToURL', FlashNetScript_sendToURL);
                AS.registerNativeFunction('Toplevel::registerClassAlias', Toplevel_registerClassAlias);
                AS.registerNativeFunction('Toplevel::getClassByAlias', Toplevel_getClassByAlias);
            }
            AS.linkNatives = linkNatives;
            function FlashUtilScript_getTimer() {
                return Date.now() - flash.display.Loader.runtimeStartTime;
            }
            AS.FlashUtilScript_getTimer = FlashUtilScript_getTimer;
            function FlashNetScript_navigateToURL(request, window_) {
                if (request === null || request === undefined) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'request');
                }
                var RequestClass = Shumway.AVM2.Runtime.AVM2.instance.systemDomain.getClass("flash.net.URLRequest");
                if (!RequestClass.isInstanceOf(request)) {
                    throwError('TypeError', AVM2.Errors.CheckTypeFailedError, request, 'flash.net.URLRequest');
                }
                var url = request.url;
                if (Shumway.isNullOrUndefined(url)) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'url');
                }
                if (/^fscommand:/i.test(url)) {
                    var fscommand = Shumway.AVM2.Runtime.AVM2.instance.applicationDomain.getProperty(Multiname.fromSimpleName('flash.system.fscommand'), true, true);
                    fscommand.call(null, url.substring('fscommand:'.length), window_);
                    return;
                }
                Shumway.FileLoadingService.instance.navigateTo(url, window_);
            }
            AS.FlashNetScript_navigateToURL = FlashNetScript_navigateToURL;
            function FlashNetScript_sendToURL(request) {
                if (request === null || request === undefined) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'request');
                }
                var RequestClass = Shumway.AVM2.Runtime.AVM2.instance.systemDomain.getClass("flash.net.URLRequest");
                if (!RequestClass.isInstanceOf(request)) {
                    throwError('TypeError', AVM2.Errors.CheckTypeFailedError, request, 'flash.net.URLRequest');
                }
                var session = Shumway.FileLoadingService.instance.createSession();
                session.onprogress = function () {
                };
                session.open(request);
            }
            function Toplevel_registerClassAlias(aliasName, classObject) {
                if (!aliasName) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'aliasName');
                }
                if (!classObject) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'classObject');
                }
                AVM2.aliasesCache.classes.set(classObject, aliasName);
                AVM2.aliasesCache.names[aliasName] = classObject;
            }
            function Toplevel_getClassByAlias(aliasName) {
                if (!aliasName) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'aliasName');
                }
                var classObject = AVM2.aliasesCache.names[aliasName];
                if (!classObject) {
                    throwError('ReferenceError', AVM2.Errors.ClassNotFoundError, aliasName);
                }
                return classObject;
            }
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
//# sourceMappingURL=flash.js.map